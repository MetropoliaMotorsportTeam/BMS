
dev_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000918c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009364  08009364  0000a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c8  080097c8  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  080097c8  080097c8  0000a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d0  080097d0  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d0  080097d0  0000a7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097d4  080097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080097d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  20000088  08009860  0000b088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08009860  0000b7d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a81f  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b4  00000000  00000000  000258d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00028d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001176  00000000  00000000  0002a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207a4  00000000  00000000  0002b576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b343  00000000  00000000  0004bd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce54f  00000000  00000000  0006705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001355ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063c8  00000000  00000000  001355f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0013b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800934c 	.word	0x0800934c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	0800934c 	.word	0x0800934c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <WakeIdle>:
#define T_WAKE_MAX		400
#define T_REFUP_MAX		4400
#define T_CYCLE_FAST_MAX	1185	// Measure 12 Cells

void WakeIdle(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e84:	20ff      	movs	r0, #255	@ 0xff
 8000e86:	f001 fcdd 	bl	8002844 <spi_write_read_byte>
	delay_u(IC_NUM * T_READY);
 8000e8a:	2050      	movs	r0, #80	@ 0x50
 8000e8c:	f001 fca6 	bl	80027dc <delay_u>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <WakeUp>:

void WakeUp(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	spi_write_read_byte(0xFF);
 8000e98:	20ff      	movs	r0, #255	@ 0xff
 8000e9a:	f001 fcd3 	bl	8002844 <spi_write_read_byte>
	delay_u(IC_NUM * T_WAKE_MAX);
 8000e9e:	f44f 6048 	mov.w	r0, #3200	@ 0xc80
 8000ea2:	f001 fc9b 	bl	80027dc <delay_u>

#if ((IC_NUM * T_WAKE_MAX) >= T_IDLE_MIN)
	spi_write_read_byte(0xFF);
	delay_u(IC_NUM * T_READY);
#endif
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <initialize>:
uint8_t ADCV[2]; //!< Cell Voltage conversion command
uint8_t ADAX[2]; //!< GPIO conversion command
uint8_t ADSTAT[2]; //!< STAT conversion command

void initialize(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af02      	add	r7, sp, #8
	init(MD_NORMAL,DCP_DISABLED,CELL_CH_ALL,AUX_CH_ALL,STS_CH_ALL);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 f804 	bl	8000ec8 <init>
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <init>:
				  uint8_t DCP,	//Discharge Permit
				  uint8_t CH,	//Cell Channels to be measured
				  uint8_t CHG,	//GPIO Channels to be measured
				  uint8_t CHST	//Status Channels to be measured
				  )
{
 8000ec8:	b490      	push	{r4, r7}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4604      	mov	r4, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	4603      	mov	r3, r0
 8000edc:	71bb      	strb	r3, [r7, #6]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	717b      	strb	r3, [r7, #5]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	105b      	asrs	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <init+0xb8>)
 8000efa:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	01db      	lsls	r3, r3, #7
 8000f00:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	797b      	ldrb	r3, [r7, #5]
 8000f10:	4413      	add	r3, r2
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	3360      	adds	r3, #96	@ 0x60
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <init+0xb8>)
 8000f1a:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	105b      	asrs	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <init+0xbc>)
 8000f30:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	793b      	ldrb	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3360      	adds	r3, #96	@ 0x60
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <init+0xbc>)
 8000f46:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	105b      	asrs	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
	ADSTAT[0] = md_bits + 0x04;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	3304      	adds	r3, #4
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <init+0xc0>)
 8000f5c:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	01db      	lsls	r3, r3, #7
 8000f62:	73fb      	strb	r3, [r7, #15]
	ADSTAT[1] = md_bits + 0x68 + CHST;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	7e3b      	ldrb	r3, [r7, #24]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3368      	adds	r3, #104	@ 0x68
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <init+0xc0>)
 8000f72:	705a      	strb	r2, [r3, #1]
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc90      	pop	{r4, r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200000a4 	.word	0x200000a4
 8000f84:	200000a8 	.word	0x200000a8
 8000f88:	200000ac 	.word	0x200000ac

08000f8c <pec15_calc>:

uint16_t pec15_calc(uint8_t len,	//Number of bytes that will be used to calculate a PEC
                    uint8_t *data	//Array of data that will be used to calculate  a PEC
                   )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder, addr;

  remainder = 16;					//initialize the PEC
 8000f98:	2310      	movs	r3, #16
 8000f9a:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	737b      	strb	r3, [r7, #13]
 8000fa0:	e017      	b.n	8000fd2 <pec15_calc+0x46>
  {
    addr = ((remainder>>7)^data[i])&0xff;	//calculate PEC table address
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	09db      	lsrs	r3, r3, #7
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	7b7a      	ldrb	r2, [r7, #13]
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	440a      	add	r2, r1
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	4053      	eors	r3, r2
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	817b      	strh	r3, [r7, #10]
    remainder = (remainder<<8)^crc15Table[addr];
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	897b      	ldrh	r3, [r7, #10]
 8000fc0:	490a      	ldr	r1, [pc, #40]	@ (8000fec <pec15_calc+0x60>)
 8000fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4053      	eors	r3, r2
 8000fca:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++)	// loops for each byte in data array
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	737b      	strb	r3, [r7, #13]
 8000fd2:	7b7a      	ldrb	r2, [r7, #13]
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3e3      	bcc.n	8000fa2 <pec15_calc+0x16>
  }
  return(remainder*2);	//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b29b      	uxth	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	08009374 	.word	0x08009374

08000ff0 <wrcfg>:

void wrcfg(uint8_t total_ic,
				   uint8_t config[][6]
				  )
{
 8000ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ff4:	b089      	sub	sp, #36	@ 0x24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6039      	str	r1, [r7, #0]
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	466b      	mov	r3, sp
 8001000:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 8001002:	2306      	movs	r3, #6
 8001004:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3304      	adds	r3, #4
 800100e:	76fb      	strb	r3, [r7, #27]

#if DYNAMIC_MEM
	uint8_t *cmd;
	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
#else
	uint8_t cmd[CMD_LEN];
 8001010:	7efb      	ldrb	r3, [r7, #27]
 8001012:	3b01      	subs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	7efb      	ldrb	r3, [r7, #27]
 8001018:	2200      	movs	r2, #0
 800101a:	4698      	mov	r8, r3
 800101c:	4691      	mov	r9, r2
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800102a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800102e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001032:	7efb      	ldrb	r3, [r7, #27]
 8001034:	2200      	movs	r2, #0
 8001036:	461c      	mov	r4, r3
 8001038:	4615      	mov	r5, r2
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	00eb      	lsls	r3, r5, #3
 8001044:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001048:	00e2      	lsls	r2, r4, #3
 800104a:	7efb      	ldrb	r3, [r7, #27]
 800104c:	3307      	adds	r3, #7
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	ebad 0d03 	sub.w	sp, sp, r3
 8001056:	466b      	mov	r3, sp
 8001058:	3300      	adds	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2201      	movs	r2, #1
 8001066:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x3d;
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	223d      	movs	r2, #61	@ 0x3d
 800106c:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6e;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	226e      	movs	r2, #110	@ 0x6e
 8001072:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	77bb      	strb	r3, [r7, #30]
 800107c:	e03c      	b.n	80010f8 <wrcfg+0x108>
	{
		/* the last IC on the stack. The first configuration written is */
		/* received by the last IC in the daisy chain */

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 800107e:	2300      	movs	r3, #0
 8001080:	777b      	strb	r3, [r7, #29]
 8001082:	e012      	b.n	80010aa <wrcfg+0xba>
		{
			/* current_byte is the byte counter */

			cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 8001084:	7fba      	ldrb	r2, [r7, #30]
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	3b06      	subs	r3, #6
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	18d1      	adds	r1, r2, r3
 8001094:	7f7a      	ldrb	r2, [r7, #29]
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	5c89      	ldrb	r1, [r1, r2]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 800109e:	7ffb      	ldrb	r3, [r7, #31]
 80010a0:	3301      	adds	r3, #1
 80010a2:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80010a4:	7f7b      	ldrb	r3, [r7, #29]
 80010a6:	3301      	adds	r3, #1
 80010a8:	777b      	strb	r3, [r7, #29]
 80010aa:	7f7a      	ldrb	r2, [r7, #29]
 80010ac:	7f3b      	ldrb	r3, [r7, #28]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3e8      	bcc.n	8001084 <wrcfg+0x94>
		}
		cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 80010b2:	7fba      	ldrb	r2, [r7, #30]
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	3b06      	subs	r3, #6
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	461a      	mov	r2, r3
 80010c4:	7f3b      	ldrb	r3, [r7, #28]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5f 	bl	8000f8c <pec15_calc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 80010d2:	89fb      	ldrh	r3, [r7, #14]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	b2d1      	uxtb	r1, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	54d1      	strb	r1, [r2, r3]
		cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 80010e0:	7ffb      	ldrb	r3, [r7, #31]
 80010e2:	3301      	adds	r3, #1
 80010e4:	89fa      	ldrh	r2, [r7, #14]
 80010e6:	b2d1      	uxtb	r1, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	3302      	adds	r3, #2
 80010f0:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 80010f2:	7fbb      	ldrb	r3, [r7, #30]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	77bb      	strb	r3, [r7, #30]
 80010f8:	7fbb      	ldrb	r3, [r7, #30]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1bf      	bne.n	800107e <wrcfg+0x8e>
	}

	uint8_t rx_data;
	WakeIdle();
 80010fe:	f7ff febf 	bl	8000e80 <WakeIdle>
	//spi_write_array(CMD_LEN, cmd); //This function causes bad stuff!
	spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001102:	7ef8      	ldrb	r0, [r7, #27]
 8001104:	f107 030d 	add.w	r3, r7, #13
 8001108:	2200      	movs	r2, #0
 800110a:	6939      	ldr	r1, [r7, #16]
 800110c:	f001 fbde 	bl	80028cc <spi_write_then_read_array_ltc>
 8001110:	46b5      	mov	sp, r6

#if DYNAMIC_MEM
	free(cmd);
#endif
}
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800111c <rdcfg>:

int8_t rdcfg(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 800111c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001120:	b089      	sub	sp, #36	@ 0x24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	6039      	str	r1, [r7, #0]
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	466b      	mov	r3, sp
 800112c:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 800112e:	2308      	movs	r3, #8
 8001130:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	77fb      	strb	r3, [r7, #31]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001136:	230c      	movs	r3, #12
 8001138:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 800113a:	7efb      	ldrb	r3, [r7, #27]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	3b01      	subs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	7efb      	ldrb	r3, [r7, #27]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	461a      	mov	r2, r3
 8001148:	2300      	movs	r3, #0
 800114a:	4690      	mov	r8, r2
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	7efb      	ldrb	r3, [r7, #27]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	461a      	mov	r2, r3
 8001168:	2300      	movs	r3, #0
 800116a:	4614      	mov	r4, r2
 800116c:	461d      	mov	r5, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	00eb      	lsls	r3, r5, #3
 8001178:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800117c:	00e2      	lsls	r2, r4, #3
 800117e:	7efb      	ldrb	r3, [r7, #27]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	3307      	adds	r3, #7
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	ebad 0d03 	sub.w	sp, sp, r3
 800118c:	466b      	mov	r3, sp
 800118e:	3300      	adds	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001192:	2300      	movs	r3, #0
 8001194:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x02;
 8001196:	2302      	movs	r3, #2
 8001198:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 800119a:	232b      	movs	r3, #43	@ 0x2b
 800119c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0a;
 800119e:	230a      	movs	r3, #10
 80011a0:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 80011a2:	f7ff fe6d 	bl	8000e80 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 80011a6:	7f3b      	ldrb	r3, [r7, #28]
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	fb03 f202 	mul.w	r2, r3, r2
 80011ae:	f107 0108 	add.w	r1, r7, #8
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2004      	movs	r0, #4
 80011b6:	f001 fb89 	bl	80028cc <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	77bb      	strb	r3, [r7, #30]
 80011be:	e038      	b.n	8001232 <rdcfg+0x116>
	{
		// executes for each LTC6804 in the daisy chain and packs the data
		// into the r_config array as well as check the received Config data
		// for any bit errors

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	777b      	strb	r3, [r7, #29]
 80011c4:	e010      	b.n	80011e8 <rdcfg+0xcc>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80011c6:	7f7a      	ldrb	r2, [r7, #29]
 80011c8:	7fbb      	ldrb	r3, [r7, #30]
 80011ca:	7f39      	ldrb	r1, [r7, #28]
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	18d1      	adds	r1, r2, r3
 80011d2:	7fbb      	ldrb	r3, [r7, #30]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	441a      	add	r2, r3
 80011da:	7f7b      	ldrb	r3, [r7, #29]
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	5c41      	ldrb	r1, [r0, r1]
 80011e0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80011e2:	7f7b      	ldrb	r3, [r7, #29]
 80011e4:	3301      	adds	r3, #1
 80011e6:	777b      	strb	r3, [r7, #29]
 80011e8:	7f7a      	ldrb	r2, [r7, #29]
 80011ea:	7f3b      	ldrb	r3, [r7, #28]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3ea      	bcc.n	80011c6 <rdcfg+0xaa>
		}

		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 80011f0:	7fbb      	ldrb	r3, [r7, #30]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	799b      	ldrb	r3, [r3, #6]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	7fba      	ldrb	r2, [r7, #30]
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	440a      	add	r2, r1
 8001206:	79d2      	ldrb	r2, [r2, #7]
 8001208:	4413      	add	r3, r2
 800120a:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 800120c:	7fbb      	ldrb	r3, [r7, #30]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4619      	mov	r1, r3
 8001216:	2006      	movs	r0, #6
 8001218:	f7ff feb8 	bl	8000f8c <pec15_calc>
 800121c:	4603      	mov	r3, r0
 800121e:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 8001220:	89fa      	ldrh	r2, [r7, #14]
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <rdcfg+0x110>
		{
			pec_error = -1;
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 800122c:	7fbb      	ldrb	r3, [r7, #30]
 800122e:	3301      	adds	r3, #1
 8001230:	77bb      	strb	r3, [r7, #30]
 8001232:	7fba      	ldrb	r2, [r7, #30]
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	429a      	cmp	r2, r3
 8001238:	d3c2      	bcc.n	80011c0 <rdcfg+0xa4>
	}

#if DYNAMIC_MEM
	free(rx_data);
#endif
	return(pec_error);
 800123a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800123e:	46b5      	mov	sp, r6
}
 8001240:	4618      	mov	r0, r3
 8001242:	3724      	adds	r7, #36	@ 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124a <wrcfgb>:

void wrcfgb(uint8_t total_ic,
				   uint8_t config[][6]
				  ){
 800124a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	466b      	mov	r3, sp
 800125a:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 6;
 800125c:	2306      	movs	r3, #6
 800125e:	773b      	strb	r3, [r7, #28]
		const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	3304      	adds	r3, #4
 8001268:	76fb      	strb	r3, [r7, #27]

	#if DYNAMIC_MEM
		uint8_t *cmd;
		cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
	#else
		uint8_t cmd[CMD_LEN];
 800126a:	7efb      	ldrb	r3, [r7, #27]
 800126c:	3b01      	subs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	7efb      	ldrb	r3, [r7, #27]
 8001272:	2200      	movs	r2, #0
 8001274:	4698      	mov	r8, r3
 8001276:	4691      	mov	r9, r2
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001284:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001288:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	2200      	movs	r2, #0
 8001290:	461c      	mov	r4, r3
 8001292:	4615      	mov	r5, r2
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	00eb      	lsls	r3, r5, #3
 800129e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012a2:	00e2      	lsls	r2, r4, #3
 80012a4:	7efb      	ldrb	r3, [r7, #27]
 80012a6:	3307      	adds	r3, #7
 80012a8:	08db      	lsrs	r3, r3, #3
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	ebad 0d03 	sub.w	sp, sp, r3
 80012b0:	466b      	mov	r3, sp
 80012b2:	3300      	adds	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
	#endif

		cmd[0] = 0x00;
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
		cmd[1] = 0x24;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2224      	movs	r2, #36	@ 0x24
 80012c0:	705a      	strb	r2, [r3, #1]
		//pec15_calc(2, cmd);
		cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff fe61 	bl	8000f8c <pec15_calc>
 80012ca:	4603      	mov	r3, r0
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	709a      	strb	r2, [r3, #2]
		cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff fe57 	bl	8000f8c <pec15_calc>
 80012de:	4603      	mov	r3, r0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	70da      	strb	r2, [r3, #3]

		cmd_index = 4;
 80012e6:	2304      	movs	r3, #4
 80012e8:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	77bb      	strb	r3, [r7, #30]
 80012ee:	e03c      	b.n	800136a <wrcfgb+0x120>
		{
			/* the last IC on the stack. The first configuration written is */
			/* received by the last IC in the daisy chain */

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 80012f0:	2300      	movs	r3, #0
 80012f2:	777b      	strb	r3, [r7, #29]
 80012f4:	e012      	b.n	800131c <wrcfgb+0xd2>
			{
				/* current_byte is the byte counter */

				cmd[cmd_index] = config[current_ic-1][current_byte];					/* adding the config data to the array to be sent */
 80012f6:	7fba      	ldrb	r2, [r7, #30]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	3b06      	subs	r3, #6
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	18d1      	adds	r1, r2, r3
 8001306:	7f7a      	ldrb	r2, [r7, #29]
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	5c89      	ldrb	r1, [r1, r2]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	54d1      	strb	r1, [r2, r3]
				cmd_index = cmd_index + 1;
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	3301      	adds	r3, #1
 8001314:	77fb      	strb	r3, [r7, #31]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	/* executes for each of the 6 bytes in the CFGR register */
 8001316:	7f7b      	ldrb	r3, [r7, #29]
 8001318:	3301      	adds	r3, #1
 800131a:	777b      	strb	r3, [r7, #29]
 800131c:	7f7a      	ldrb	r2, [r7, #29]
 800131e:	7f3b      	ldrb	r3, [r7, #28]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3e8      	bcc.n	80012f6 <wrcfgb+0xac>
			}
			cfg_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);		/* calculating the PEC for each ICs configuration register data */
 8001324:	7fba      	ldrb	r2, [r7, #30]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	3b06      	subs	r3, #6
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	461a      	mov	r2, r3
 8001336:	7f3b      	ldrb	r3, [r7, #28]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe26 	bl	8000f8c <pec15_calc>
 8001340:	4603      	mov	r3, r0
 8001342:	81fb      	strh	r3, [r7, #14]
			cmd[cmd_index] = (uint8_t)(cfg_pec >> 8);
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	b29a      	uxth	r2, r3
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	b2d1      	uxtb	r1, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	54d1      	strb	r1, [r2, r3]
			cmd[cmd_index + 1] = (uint8_t)cfg_pec;
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	3301      	adds	r3, #1
 8001356:	89fa      	ldrh	r2, [r7, #14]
 8001358:	b2d1      	uxtb	r1, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 2;
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	3302      	adds	r3, #2
 8001362:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)
 8001364:	7fbb      	ldrb	r3, [r7, #30]
 8001366:	3b01      	subs	r3, #1
 8001368:	77bb      	strb	r3, [r7, #30]
 800136a:	7fbb      	ldrb	r3, [r7, #30]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1bf      	bne.n	80012f0 <wrcfgb+0xa6>
		}

		uint8_t rx_data;

		WakeIdle();
 8001370:	f7ff fd86 	bl	8000e80 <WakeIdle>
		spi_write_then_read_array_ltc(CMD_LEN, cmd, 0, &rx_data);
 8001374:	7ef8      	ldrb	r0, [r7, #27]
 8001376:	f107 030d 	add.w	r3, r7, #13
 800137a:	2200      	movs	r2, #0
 800137c:	6939      	ldr	r1, [r7, #16]
 800137e:	f001 faa5 	bl	80028cc <spi_write_then_read_array_ltc>
 8001382:	46b5      	mov	sp, r6
#if DYNAMIC_MEM
	free(cmd);
#endif

}
 8001384:	bf00      	nop
 8001386:	3724      	adds	r7, #36	@ 0x24
 8001388:	46bd      	mov	sp, r7
 800138a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800138e <rdcfgb>:

int8_t rdcfgb(uint8_t total_ic,
                     uint8_t r_config[][8]
                    )
{
 800138e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	466b      	mov	r3, sp
 800139e:	461e      	mov	r6, r3
	const uint8_t BYTES_IN_REG = 8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	773b      	strb	r3, [r7, #28]

	uint8_t cmd[4];
	int8_t pec_error = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]

#if DYNAMIC_MEM
	uint8_t *rx_data;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 80013a8:	230c      	movs	r3, #12
 80013aa:	76fb      	strb	r3, [r7, #27]
	uint8_t rx_data[8 * max_ic];
 80013ac:	7efb      	ldrb	r3, [r7, #27]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	3b01      	subs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	7efb      	ldrb	r3, [r7, #27]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	461a      	mov	r2, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	4690      	mov	r8, r2
 80013be:	4699      	mov	r9, r3
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013d4:	7efb      	ldrb	r3, [r7, #27]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	461a      	mov	r2, r3
 80013da:	2300      	movs	r3, #0
 80013dc:	4614      	mov	r4, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	00eb      	lsls	r3, r5, #3
 80013ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013ee:	00e2      	lsls	r2, r4, #3
 80013f0:	7efb      	ldrb	r3, [r7, #27]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	3307      	adds	r3, #7
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	ebad 0d03 	sub.w	sp, sp, r3
 80013fe:	466b      	mov	r3, sp
 8001400:	3300      	adds	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
#endif

	cmd[0] = 0x00;
 8001404:	2300      	movs	r3, #0
 8001406:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x26;
 8001408:	2326      	movs	r3, #38	@ 0x26
 800140a:	727b      	strb	r3, [r7, #9]
	cmd[2] = (pec15_calc(2, cmd) >> 8) & 0xFF;
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4619      	mov	r1, r3
 8001412:	2002      	movs	r0, #2
 8001414:	f7ff fdba 	bl	8000f8c <pec15_calc>
 8001418:	4603      	mov	r3, r0
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec15_calc(2, cmd) >> 0) & 0xFF;
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4619      	mov	r1, r3
 8001428:	2002      	movs	r0, #2
 800142a:	f7ff fdaf 	bl	8000f8c <pec15_calc>
 800142e:	4603      	mov	r3, r0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001434:	f7ff fd24 	bl	8000e80 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (BYTES_IN_REG*total_ic), rx_data);
 8001438:	7f3b      	ldrb	r3, [r7, #28]
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	fb03 f202 	mul.w	r2, r3, r2
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2004      	movs	r0, #4
 8001448:	f001 fa40 	bl	80028cc <spi_write_then_read_array_ltc>

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 800144c:	2300      	movs	r3, #0
 800144e:	77bb      	strb	r3, [r7, #30]
 8001450:	e038      	b.n	80014c4 <rdcfgb+0x136>
		{
			// executes for each LTC6804 in the daisy chain and packs the data
			// into the r_config array as well as check the received Config data
			// for any bit errors

			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001452:	2300      	movs	r3, #0
 8001454:	777b      	strb	r3, [r7, #29]
 8001456:	e010      	b.n	800147a <rdcfgb+0xec>
			{
				r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 8001458:	7f7a      	ldrb	r2, [r7, #29]
 800145a:	7fbb      	ldrb	r3, [r7, #30]
 800145c:	7f39      	ldrb	r1, [r7, #28]
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	18d1      	adds	r1, r2, r3
 8001464:	7fbb      	ldrb	r3, [r7, #30]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	441a      	add	r2, r3
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	6938      	ldr	r0, [r7, #16]
 8001470:	5c41      	ldrb	r1, [r0, r1]
 8001472:	54d1      	strb	r1, [r2, r3]
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001474:	7f7b      	ldrb	r3, [r7, #29]
 8001476:	3301      	adds	r3, #1
 8001478:	777b      	strb	r3, [r7, #29]
 800147a:	7f7a      	ldrb	r2, [r7, #29]
 800147c:	7f3b      	ldrb	r3, [r7, #28]
 800147e:	429a      	cmp	r2, r3
 8001480:	d3ea      	bcc.n	8001458 <rdcfgb+0xca>
			}

			received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8001482:	7fbb      	ldrb	r3, [r7, #30]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	4413      	add	r3, r2
 800148a:	799b      	ldrb	r3, [r3, #6]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29b      	uxth	r3, r3
 8001490:	7fba      	ldrb	r2, [r7, #30]
 8001492:	00d2      	lsls	r2, r2, #3
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	440a      	add	r2, r1
 8001498:	79d2      	ldrb	r2, [r2, #7]
 800149a:	4413      	add	r3, r2
 800149c:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(6, &r_config[current_ic][0]);
 800149e:	7fbb      	ldrb	r3, [r7, #30]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	2006      	movs	r0, #6
 80014aa:	f7ff fd6f 	bl	8000f8c <pec15_calc>
 80014ae:	4603      	mov	r3, r0
 80014b0:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 80014b2:	89fa      	ldrh	r2, [r7, #14]
 80014b4:	89bb      	ldrh	r3, [r7, #12]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d001      	beq.n	80014be <rdcfgb+0x130>
			{
				pec_error = -1;
 80014ba:	23ff      	movs	r3, #255	@ 0xff
 80014bc:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++)
 80014be:	7fbb      	ldrb	r3, [r7, #30]
 80014c0:	3301      	adds	r3, #1
 80014c2:	77bb      	strb	r3, [r7, #30]
 80014c4:	7fba      	ldrb	r2, [r7, #30]
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d3c2      	bcc.n	8001452 <rdcfgb+0xc4>
		}

	#if DYNAMIC_MEM
		free(rx_data);
	#endif
		return(pec_error);
 80014cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d0:	46b5      	mov	sp, r6

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014dc <rdcv>:

uint8_t rdcv(uint8_t reg,				// Controls which cell voltage register is read back.
                     uint8_t total_ic,			// the number of ICs in the system
                     cell_data_t cell_codes[][18]	// Array of the parsed cell codes
                    )
{
 80014dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e0:	b08b      	sub	sp, #44	@ 0x2c
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	603a      	str	r2, [r7, #0]
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	460b      	mov	r3, r1
 80014ec:	71bb      	strb	r3, [r7, #6]
 80014ee:	466b      	mov	r3, sp
 80014f0:	461e      	mov	r6, r3

	const uint8_t NUM_RX_BYT = 8;
 80014f2:	2308      	movs	r3, #8
 80014f4:	f887 3020 	strb.w	r3, [r7, #32]
	const uint8_t BYT_IN_REG = 6;
 80014f8:	2306      	movs	r3, #6
 80014fa:	77fb      	strb	r3, [r7, #31]
	const uint8_t CELL_IN_REG = 3;
 80014fc:	2303      	movs	r3, #3
 80014fe:	77bb      	strb	r3, [r7, #30]

	uint8_t pec_error = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0;	//data counter
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if DYNAMIC_MEM
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 18;
 800150c:	2312      	movs	r3, #18
 800150e:	777b      	strb	r3, [r7, #29]
	uint8_t cell_data[NUM_RX_BYT * max_ic];
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	7f7a      	ldrb	r2, [r7, #29]
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	3b01      	subs	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001522:	7f7a      	ldrb	r2, [r7, #29]
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	461a      	mov	r2, r3
 800152a:	2300      	movs	r3, #0
 800152c:	4690      	mov	r8, r2
 800152e:	4699      	mov	r9, r3
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800153c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001540:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001544:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001548:	7f7a      	ldrb	r2, [r7, #29]
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	461a      	mov	r2, r3
 8001550:	2300      	movs	r3, #0
 8001552:	4614      	mov	r4, r2
 8001554:	461d      	mov	r5, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	00eb      	lsls	r3, r5, #3
 8001560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001564:	00e2      	lsls	r2, r4, #3
 8001566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800156a:	7f7a      	ldrb	r2, [r7, #29]
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	3307      	adds	r3, #7
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	ebad 0d03 	sub.w	sp, sp, r3
 800157a:	466b      	mov	r3, sp
 800157c:	3300      	adds	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
#endif


	if (reg == 0)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 8084 	bne.w	8001690 <rdcv+0x1b4>
	{
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 8001588:	2301      	movs	r3, #1
 800158a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800158e:	e07a      	b.n	8001686 <rdcv+0x1aa>
		{
			data_counter = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			rdcv_reg(cell_reg, total_ic,cell_data );				 //Reads a single Cell voltage register
 8001596:	79b9      	ldrb	r1, [r7, #6]
 8001598:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f8ef 	bl	8001782 <rdcv_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80015aa:	e062      	b.n	8001672 <rdcv+0x196>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015b2:	e02c      	b.n	800160e <rdcv+0x132>
				{
					// loops once for each of the 3 cell voltage codes in the register

					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80015b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	4619      	mov	r1, r3
 80015be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015c2:	3301      	adds	r3, #1
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	440b      	add	r3, r1
 80015ce:	81fb      	strh	r3, [r7, #14]
					// create the parsed cell voltage code
					//cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)].voltage = parsed_cell;
 80015d0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	461a      	mov	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 80015e6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80015ea:	3a01      	subs	r2, #1
 80015ec:	7fb8      	ldrb	r0, [r7, #30]
 80015ee:	fb00 f202 	mul.w	r2, r0, r2
 80015f2:	440a      	add	r2, r1
 80015f4:	89f9      	ldrh	r1, [r7, #14]
 80015f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 80015fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015fe:	3302      	adds	r3, #2
 8001600:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001604:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001608:	3301      	adds	r3, #1
 800160a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800160e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001612:	7fbb      	ldrb	r3, [r7, #30]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3cd      	bcc.n	80015b4 <rdcv+0xd8>
					//must increment by two for each parsed cell code
				}
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b29b      	uxth	r3, r3
 8001624:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001628:	3201      	adds	r2, #1
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	5c8a      	ldrb	r2, [r1, r2]
 800162e:	4413      	add	r3, r2
 8001630:	827b      	strh	r3, [r7, #18]
				//after the 6 cell voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001632:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001636:	f897 2020 	ldrb.w	r2, [r7, #32]
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	441a      	add	r2, r3
 8001642:	7ffb      	ldrb	r3, [r7, #31]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fca0 	bl	8000f8c <pec15_calc>
 800164c:	4603      	mov	r3, r0
 800164e:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 8001650:	8a7a      	ldrh	r2, [r7, #18]
 8001652:	8a3b      	ldrh	r3, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d002      	beq.n	800165e <rdcv+0x182>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 8001658:	23ff      	movs	r3, #255	@ 0xff
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					//are detected in the serial data
				}
			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 800165e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001662:	3302      	adds	r3, #2
 8001664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 8001668:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800166c:	3301      	adds	r3, #1
 800166e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001672:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	429a      	cmp	r2, r3
 800167a:	d397      	bcc.n	80015ac <rdcv+0xd0>
		for (uint8_t cell_reg = 1; cell_reg<7; cell_reg++)                    //executes once for each of the LTC6804 cell voltage registers/ LTC6813 changed cell_reg<5 to cell_reg<7
 800167c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001680:	3301      	adds	r3, #1
 8001682:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001686:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800168a:	2b06      	cmp	r3, #6
 800168c:	d980      	bls.n	8001590 <rdcv+0xb4>
 800168e:	e070      	b.n	8001772 <rdcv+0x296>
		}
	}

	else
	{
		rdcv_reg(reg, total_ic,cell_data);
 8001690:	79b9      	ldrb	r1, [r7, #6]
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f873 	bl	8001782 <rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016a2:	e061      	b.n	8001768 <rdcv+0x28c>
		{
			// current_ic is used as the IC counter
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80016aa:	e02b      	b.n	8001704 <rdcv+0x228>
			{
				// loops once for each of the 3 cell voltage codes in the register

				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8); //Each cell code is received as two bytes and is combined to
 80016ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ba:	3301      	adds	r3, #1
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	440b      	add	r3, r1
 80016c6:	81fb      	strh	r3, [r7, #14]
				// create the parsed cell voltage code

				//cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)].voltage = 0x0000FFFF & parsed_cell;
 80016c8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	461a      	mov	r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	3a01      	subs	r2, #1
 80016e2:	7fb8      	ldrb	r0, [r7, #30]
 80016e4:	fb00 f202 	mul.w	r2, r0, r2
 80016e8:	440a      	add	r2, r1
 80016ea:	89f9      	ldrh	r1, [r7, #14]
 80016ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 80016f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016f4:	3302      	adds	r3, #2
 80016f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80016fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80016fe:	3301      	adds	r3, #1
 8001700:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001704:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001708:	7fbb      	ldrb	r3, [r7, #30]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3ce      	bcc.n	80016ac <rdcv+0x1d0>
				//must increment by two for each parsed cell code
			}
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800170e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	5cd3      	ldrb	r3, [r2, r3]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b29b      	uxth	r3, r3
 800171a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800171e:	3201      	adds	r2, #1
 8001720:	6979      	ldr	r1, [r7, #20]
 8001722:	5c8a      	ldrb	r2, [r1, r2]
 8001724:	4413      	add	r3, r2
 8001726:	827b      	strh	r3, [r7, #18]
			//after the 6 cell voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001728:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800172c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	441a      	add	r2, r3
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fc25 	bl	8000f8c <pec15_calc>
 8001742:	4603      	mov	r3, r0
 8001744:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001746:	8a7a      	ldrh	r2, [r7, #18]
 8001748:	8a3b      	ldrh	r3, [r7, #16]
 800174a:	429a      	cmp	r2, r3
 800174c:	d002      	beq.n	8001754 <rdcv+0x278>
			{
				pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 800174e:	23ff      	movs	r3, #255	@ 0xff
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				//are detected in the serial data
			}
			data_counter= data_counter + 2;                       //Because the transmitted PEC code is 2 bytes long the data_counter
 8001754:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001758:	3302      	adds	r3, #2
 800175a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)        // executes for every LTC6804 in the daisy chain
 800175e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001762:	3301      	adds	r3, #1
 8001764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001768:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	429a      	cmp	r2, r3
 8001770:	d398      	bcc.n	80016a4 <rdcv+0x1c8>
		}
	}
#if DYNAMIC_MEM
	free(cell_data);
#endif
	return(pec_error);
 8001772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001776:	46b5      	mov	sp, r6
}
 8001778:	4618      	mov	r0, r3
 800177a:	372c      	adds	r7, #44	@ 0x2c
 800177c:	46bd      	mov	sp, r7
 800177e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001782 <rdcv_reg>:
*/
void rdcv_reg(uint8_t reg,			//Determines which cell voltage register is read back
                      uint8_t total_ic,		//the number of ICs in the
                      uint8_t *data			//An array of the unparsed cell codes
                     )
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	603a      	str	r2, [r7, #0]
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	460b      	mov	r3, r1
 8001790:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8001792:	2308      	movs	r3, #8
 8001794:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d104      	bne.n	80017a6 <rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 800179c:	2304      	movs	r3, #4
 800179e:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017a0:	2300      	movs	r3, #0
 80017a2:	723b      	strb	r3, [r7, #8]
 80017a4:	e026      	b.n	80017f4 <rdcv_reg+0x72>
	}
	else if (reg == 2)
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d104      	bne.n	80017b6 <rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80017ac:	2306      	movs	r3, #6
 80017ae:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017b0:	2300      	movs	r3, #0
 80017b2:	723b      	strb	r3, [r7, #8]
 80017b4:	e01e      	b.n	80017f4 <rdcv_reg+0x72>
	}
	else if (reg == 3)
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d104      	bne.n	80017c6 <rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80017bc:	2308      	movs	r3, #8
 80017be:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	723b      	strb	r3, [r7, #8]
 80017c4:	e016      	b.n	80017f4 <rdcv_reg+0x72>
	}
	else if (reg == 4)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d104      	bne.n	80017d6 <rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 80017cc:	230a      	movs	r3, #10
 80017ce:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017d0:	2300      	movs	r3, #0
 80017d2:	723b      	strb	r3, [r7, #8]
 80017d4:	e00e      	b.n	80017f4 <rdcv_reg+0x72>
	}
	else if (reg == 5) // LTC6813 - Cell register E
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d104      	bne.n	80017e6 <rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 80017dc:	2309      	movs	r3, #9
 80017de:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017e0:	2300      	movs	r3, #0
 80017e2:	723b      	strb	r3, [r7, #8]
 80017e4:	e006      	b.n	80017f4 <rdcv_reg+0x72>
	}
	else if (reg == 6) // LTC6813 - Cell register F
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d103      	bne.n	80017f4 <rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 80017ec:	230b      	movs	r3, #11
 80017ee:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017f0:	2300      	movs	r3, #0
 80017f2:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4619      	mov	r1, r3
 80017fa:	2002      	movs	r0, #2
 80017fc:	f7ff fbc6 	bl	8000f8c <pec15_calc>
 8001800:	4603      	mov	r3, r0
 8001802:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001804:	89bb      	ldrh	r3, [r7, #12]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	b29b      	uxth	r3, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800180e:	89bb      	ldrh	r3, [r7, #12]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001814:	f7ff fb34 	bl	8000e80 <WakeIdle>
	WakeIdle();
 8001818:	f7ff fb32 	bl	8000e80 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	79ba      	ldrb	r2, [r7, #6]
 8001820:	fb03 f202 	mul.w	r2, r3, r2
 8001824:	f107 0108 	add.w	r1, r7, #8
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2004      	movs	r0, #4
 800182c:	f001 f84e 	bl	80028cc <spi_write_then_read_array_ltc>
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <rdaux>:
*/
int8_t rdaux(uint8_t reg,				//Determines which GPIO voltage register is read back.
                     uint8_t total_ic,			//the number of ICs in the system
                     temp_data_t aux_codes[][GPIO_NUM]	//A two dimensional array of the gpio voltage codes.
                    )
{
 8001838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800183c:	b08d      	sub	sp, #52	@ 0x34
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	603a      	str	r2, [r7, #0]
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	466b      	mov	r3, sp
 800184c:	461e      	mov	r6, r3
	const uint8_t NUM_RX_BYT = 8;
 800184e:	2308      	movs	r3, #8
 8001850:	77fb      	strb	r3, [r7, #31]
	const uint8_t BYT_IN_REG = 6;
 8001852:	2306      	movs	r3, #6
 8001854:	77bb      	strb	r3, [r7, #30]
	const uint8_t GPIO_IN_REG = 3;
 8001856:	2303      	movs	r3, #3
 8001858:	777b      	strb	r3, [r7, #29]

	uint8_t data_counter = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	int8_t pec_error = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint16_t data_pec;
#if DYNAMIC_MEM
	uint8_t *data;
	data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
#else
	const uint8_t max_ic = 12;
 8001866:	230c      	movs	r3, #12
 8001868:	773b      	strb	r3, [r7, #28]
	uint8_t data[NUM_RX_BYT * max_ic];
 800186a:	7ffb      	ldrb	r3, [r7, #31]
 800186c:	7f3a      	ldrb	r2, [r7, #28]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	7f3a      	ldrb	r2, [r7, #28]
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	461a      	mov	r2, r3
 8001880:	2300      	movs	r3, #0
 8001882:	4690      	mov	r8, r2
 8001884:	4699      	mov	r9, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800189a:	7ffb      	ldrb	r3, [r7, #31]
 800189c:	7f3a      	ldrb	r2, [r7, #28]
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	4614      	mov	r4, r2
 80018a8:	461d      	mov	r5, r3
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	00eb      	lsls	r3, r5, #3
 80018b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b8:	00e2      	lsls	r2, r4, #3
 80018ba:	7ffb      	ldrb	r3, [r7, #31]
 80018bc:	7f3a      	ldrb	r2, [r7, #28]
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	3307      	adds	r3, #7
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	ebad 0d03 	sub.w	sp, sp, r3
 80018cc:	466b      	mov	r3, sp
 80018ce:	3300      	adds	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
#endif

	if (reg == 0)
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 8083 	bne.w	80019e0 <rdaux+0x1a8>
	{
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80018e0:	e079      	b.n	80019d6 <rdaux+0x19e>
		{
			data_counter = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 80018e8:	79b9      	ldrb	r1, [r7, #6]
 80018ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8f2 	bl	8001ada <rdaux_reg>

			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80018fc:	e061      	b.n	80019c2 <rdaux+0x18a>
			{
				// current_ic is used as the IC counter

				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001904:	e02c      	b.n	8001960 <rdaux+0x128>
				{
					// loops once for each of the 3 gpio voltage codes in the register

					parsed_aux = data[data_counter] + (data[data_counter+1]<<8);              //Each gpio codes is received as two bytes and is combined to
 8001906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	4619      	mov	r1, r3
 8001910:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001914:	3301      	adds	r3, #1
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b29b      	uxth	r3, r3
 800191e:	440b      	add	r3, r1
 8001920:	81fb      	strh	r3, [r7, #14]
					// create the parsed gpio voltage code

					//aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)] = parsed_aux;
					aux_codes[current_ic][current_gpio +((gpio_reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001922:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	461a      	mov	r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8001938:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800193c:	3a01      	subs	r2, #1
 800193e:	7f78      	ldrb	r0, [r7, #29]
 8001940:	fb00 f202 	mul.w	r2, r0, r2
 8001944:	440a      	add	r2, r1
 8001946:	89f9      	ldrh	r1, [r7, #14]
 8001948:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
					data_counter=data_counter+2;                        //Because gpio voltage codes are two bytes the data counter
 800194c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001950:	3302      	adds	r3, #2
 8001952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				for (uint8_t current_gpio = 0; current_gpio< GPIO_IN_REG; current_gpio++) // This loop parses the read back data into GPIO voltages, it
 8001956:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800195a:	3301      	adds	r3, #1
 800195c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001960:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001964:	7f7b      	ldrb	r3, [r7, #29]
 8001966:	429a      	cmp	r2, r3
 8001968:	d3cd      	bcc.n	8001906 <rdaux+0xce>
					//must increment by two for each parsed gpio voltage code
				}
				received_pec = (data[data_counter]<<8)+ data[data_counter+1];          //The received PEC for the current_ic is transmitted as the 7th and 8th
 800196a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800197a:	3201      	adds	r2, #1
 800197c:	6979      	ldr	r1, [r7, #20]
 800197e:	5c8a      	ldrb	r2, [r1, r2]
 8001980:	4413      	add	r3, r2
 8001982:	827b      	strh	r3, [r7, #18]
				//after the 6 gpio voltage data bytes
				data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001984:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001988:	7ffa      	ldrb	r2, [r7, #31]
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	441a      	add	r2, r3
 8001992:	7fbb      	ldrb	r3, [r7, #30]
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff faf8 	bl	8000f8c <pec15_calc>
 800199c:	4603      	mov	r3, r0
 800199e:	823b      	strh	r3, [r7, #16]
				if (received_pec != data_pec)
 80019a0:	8a7a      	ldrh	r2, [r7, #18]
 80019a2:	8a3b      	ldrh	r3, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d002      	beq.n	80019ae <rdaux+0x176>
				{
					pec_error = -1;                             //The pec_error variable is simply set negative if any PEC errors
 80019a8:	23ff      	movs	r3, #255	@ 0xff
 80019aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
					//are detected in the received serial data
				}

				data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 80019ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b2:	3302      	adds	r3, #2
 80019b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++)      // executes for every LTC6804 in the daisy chain
 80019b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019bc:	3301      	adds	r3, #1
 80019be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80019c2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d398      	bcc.n	80018fe <rdaux+0xc6>
		for (uint8_t gpio_reg = 1; gpio_reg<5; gpio_reg++)                //executes once for each of the LTC6804 aux voltage registers
 80019cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019d0:	3301      	adds	r3, #1
 80019d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80019d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d981      	bls.n	80018e2 <rdaux+0xaa>
 80019de:	e064      	b.n	8001aaa <rdaux+0x272>
		}

	}
	else
	{
		rdaux_reg(reg, total_ic, data);
 80019e0:	79b9      	ldrb	r1, [r7, #6]
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f877 	bl	8001ada <rdaux_reg>
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f0:	e057      	b.n	8001aa2 <rdaux+0x26a>
		{
			// current_ic is used as an IC counter

			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
 80019f6:	e027      	b.n	8001a48 <rdaux+0x210>
			{
				// once for each aux voltage in the register

				parsed_aux = (data[data_counter] + (data[data_counter+1]<<8));        //Each gpio codes is received as two bytes and is combined to
 80019f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a06:	3301      	adds	r3, #1
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	440b      	add	r3, r1
 8001a12:	81fb      	strh	r3, [r7, #14]
				// create the parsed gpio voltage code
				//aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)] = parsed_aux;
				aux_codes[current_ic][current_gpio +((reg-1)*GPIO_IN_REG)].raw = parsed_aux;
 8001a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	461a      	mov	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	79fa      	ldrb	r2, [r7, #7]
 8001a26:	3a01      	subs	r2, #1
 8001a28:	7f79      	ldrb	r1, [r7, #29]
 8001a2a:	fb02 f101 	mul.w	r1, r2, r1
 8001a2e:	6a3a      	ldr	r2, [r7, #32]
 8001a30:	440a      	add	r2, r1
 8001a32:	89f9      	ldrh	r1, [r7, #14]
 8001a34:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
				data_counter=data_counter+2;                      //Because gpio voltage codes are two bytes the data counter
 8001a38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			for (int current_gpio = 0; current_gpio<GPIO_IN_REG; current_gpio++)    // This loop parses the read back data. Loops
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	3301      	adds	r3, #1
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	7f7b      	ldrb	r3, [r7, #29]
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbd3      	blt.n	80019f8 <rdaux+0x1c0>
				//must increment by two for each parsed gpio voltage code
			}
			received_pec = (data[data_counter]<<8) + data[data_counter+1];         //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001a60:	3201      	adds	r2, #1
 8001a62:	6979      	ldr	r1, [r7, #20]
 8001a64:	5c8a      	ldrb	r2, [r1, r2]
 8001a66:	4413      	add	r3, r2
 8001a68:	827b      	strh	r3, [r7, #18]
			//after the 6 gpio voltage data bytes
			data_pec = pec15_calc(BYT_IN_REG, &data[current_ic*NUM_RX_BYT]);
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	441a      	add	r2, r3
 8001a76:	7fbb      	ldrb	r3, [r7, #30]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fa86 	bl	8000f8c <pec15_calc>
 8001a80:	4603      	mov	r3, r0
 8001a82:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 8001a84:	8a7a      	ldrh	r2, [r7, #18]
 8001a86:	8a3b      	ldrh	r3, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d002      	beq.n	8001a92 <rdaux+0x25a>
			{
				pec_error = -1;                               //The pec_error variable is simply set negative if any PEC errors
 8001a8c:	23ff      	movs	r3, #255	@ 0xff
 8001a8e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				//are detected in the received serial data
			}

			data_counter=data_counter+2;                        //Because the transmitted PEC code is 2 bytes long the data_counter
 8001a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a96:	3302      	adds	r3, #2
 8001a98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for (int current_ic = 0 ; current_ic < total_ic; current_ic++)            // executes for every LTC6804 in the daisy chain
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dba3      	blt.n	80019f2 <rdaux+0x1ba>
	}

#if DYNAMIC_MEM
	free(data);
#endif
	return (pec_error);
 8001aaa:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8001aae:	46b5      	mov	sp, r6
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3734      	adds	r7, #52	@ 0x34
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001aba <adcv_delay>:

	free(data);
	return (pec_error);
}

void adcv_delay(void){
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001abe:	f241 50d1 	movw	r0, #5585	@ 0x15d1
 8001ac2:	f000 fe8b 	bl	80027dc <delay_u>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <adax_delay>:

void adax_delay(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
	delay_u(T_REFUP_MAX + T_CYCLE_FAST_MAX);
 8001ace:	f241 50d1 	movw	r0, #5585	@ 0x15d1
 8001ad2:	f000 fe83 	bl	80027dc <delay_u>

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <rdaux_reg>:
*/
void rdaux_reg(uint8_t reg,			//Determines which GPIO voltage register is read back
                       uint8_t total_ic,	//The number of ICs in the system
                       uint8_t *data		//Array of the unparsed auxiliary codes
                      )
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	603a      	str	r2, [r7, #0]
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001aea:	2308      	movs	r3, #8
 8001aec:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d104      	bne.n	8001afe <rdaux_reg+0x24>
	{
		cmd[1] = 0x0C;
 8001af4:	230c      	movs	r3, #12
 8001af6:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001af8:	2300      	movs	r3, #0
 8001afa:	723b      	strb	r3, [r7, #8]
 8001afc:	e01b      	b.n	8001b36 <rdaux_reg+0x5c>
	}
	else if (reg == 2)  //Read back auxiliary group B
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d104      	bne.n	8001b0e <rdaux_reg+0x34>
	{
		cmd[1] = 0x0E;
 8001b04:	230e      	movs	r3, #14
 8001b06:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	723b      	strb	r3, [r7, #8]
 8001b0c:	e013      	b.n	8001b36 <rdaux_reg+0x5c>
	}
	else if (reg == 3)  //Read back auxiliary group C
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d104      	bne.n	8001b1e <rdaux_reg+0x44>
	{
		cmd[1] = 0x0D;
 8001b14:	230d      	movs	r3, #13
 8001b16:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	723b      	strb	r3, [r7, #8]
 8001b1c:	e00b      	b.n	8001b36 <rdaux_reg+0x5c>
	}
	else if (reg == 4)  //Read back auxiliary group D
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d104      	bne.n	8001b2e <rdaux_reg+0x54>
	{
		cmd[1] = 0x0F;
 8001b24:	230f      	movs	r3, #15
 8001b26:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	723b      	strb	r3, [r7, #8]
 8001b2c:	e003      	b.n	8001b36 <rdaux_reg+0x5c>
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
 8001b2e:	230c      	movs	r3, #12
 8001b30:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fa25 	bl	8000f8c <pec15_calc>
 8001b42:	4603      	mov	r3, r0
 8001b44:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b46:	89bb      	ldrh	r3, [r7, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b50:	89bb      	ldrh	r3, [r7, #12]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	72fb      	strb	r3, [r7, #11]

	WakeIdle();
 8001b56:	f7ff f993 	bl	8000e80 <WakeIdle>
	spi_write_then_read_array_ltc(4, cmd, (REG_LEN*total_ic), data);
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	79ba      	ldrb	r2, [r7, #6]
 8001b5e:	fb03 f202 	mul.w	r2, r3, r2
 8001b62:	f107 0108 	add.w	r1, r7, #8
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2004      	movs	r0, #4
 8001b6a:	f000 feaf 	bl	80028cc <spi_write_then_read_array_ltc>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <adcv>:

/*!
	\brief Starts cell voltage conversion.
*/
void adcv(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADCV[0];
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <adcv+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001b84:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <adcv+0x44>)
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADCV);
 8001b8a:	490c      	ldr	r1, [pc, #48]	@ (8001bbc <adcv+0x44>)
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7ff f9fd 	bl	8000f8c <pec15_calc>
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001ba6:	f7ff f96b 	bl	8000e80 <WakeIdle>
	spi_write_array(4, cmd);
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	2004      	movs	r0, #4
 8001bb0:	f000 fe6a 	bl	8002888 <spi_write_array>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200000a4 	.word	0x200000a4

08001bc0 <adax>:

/*!
	\brief Start an GPIO Conversion.
*/
void adax(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = ADAX[0];
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <adax+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <adax+0x44>)
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	707b      	strb	r3, [r7, #1]

	cmd_pec = pec15_calc(2, ADAX);
 8001bd2:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <adax+0x44>)
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f7ff f9d9 	bl	8000f8c <pec15_calc>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(cmd_pec);
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	70fb      	strb	r3, [r7, #3]

	WakeIdle();
 8001bee:	f7ff f947 	bl	8000e80 <WakeIdle>
	spi_write_array(4, cmd);
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	2004      	movs	r0, #4
 8001bf8:	f000 fe46 	bl	8002888 <spi_write_array>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200000a8 	.word	0x200000a8

08001c08 <calc_sum_of_cells>:
	\brief	Calculates the Sum of Cells.
*/


void calc_sum_of_cells(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	73fb      	strb	r3, [r7, #15]

	uint16_t soc = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	82fb      	strh	r3, [r7, #22]

	for(uint8_t i = 0; i < total_ic; i++){
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	757b      	strb	r3, [r7, #21]
 8001c1e:	e01e      	b.n	8001c5e <calc_sum_of_cells+0x56>
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c20:	2300      	movs	r3, #0
 8001c22:	753b      	strb	r3, [r7, #20]
 8001c24:	e015      	b.n	8001c52 <calc_sum_of_cells+0x4a>
			soc += (cell_data[i][j].voltage / 100);
 8001c26:	7d7a      	ldrb	r2, [r7, #21]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	7d3a      	ldrb	r2, [r7, #20]
 8001c38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c3c:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <calc_sum_of_cells+0x84>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	8afb      	ldrh	r3, [r7, #22]
 8001c48:	4413      	add	r3, r2
 8001c4a:	82fb      	strh	r3, [r7, #22]
		for(uint8_t j = 0; j < CELL_NUM; j++){
 8001c4c:	7d3b      	ldrb	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	753b      	strb	r3, [r7, #20]
 8001c52:	7d3b      	ldrb	r3, [r7, #20]
 8001c54:	2b11      	cmp	r3, #17
 8001c56:	d9e6      	bls.n	8001c26 <calc_sum_of_cells+0x1e>
	for(uint8_t i = 0; i < total_ic; i++){
 8001c58:	7d7b      	ldrb	r3, [r7, #21]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	757b      	strb	r3, [r7, #21]
 8001c5e:	7d7a      	ldrb	r2, [r7, #21]
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3dc      	bcc.n	8001c20 <calc_sum_of_cells+0x18>
		}
	}
	status_data->sum_of_cells = (float)soc /100;
 8001c66:	8afb      	ldrh	r3, [r7, #22]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c70:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001c90 <calc_sum_of_cells+0x88>
 8001c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	51eb851f 	.word	0x51eb851f
 8001c90:	42c80000 	.word	0x42c80000

08001c94 <calculate_soc>:
/*!
	\brief	Calculate power from current data and Sum of Cells.
*/

void calculate_soc(status_data_t *status_data){
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

	//float consumed = status_data->IVT_I * FREQUENCY/3600;

	status_data->soc = 100 - (status_data->IVT_Wh / ACCU_Wh)*100;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <calculate_soc+0x3c>)
 8001ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca6:	441a      	add	r2, r3
 8001ca8:	1312      	asrs	r2, r2, #12
 8001caa:	17db      	asrs	r3, r3, #31
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	3301      	adds	r3, #1
 8001cb0:	2264      	movs	r2, #100	@ 0x64
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	9ee009ef 	.word	0x9ee009ef

08001cd4 <get_minmax_temperature>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][12]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_temperature(uint8_t total_ic, temp_data_t temp_data[][GPIO_NUM], status_data_t *status_data)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	@ 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	73fb      	strb	r3, [r7, #15]
	int32_t min = temp_data[0][0].temp;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ce8:	61fb      	str	r3, [r7, #28]
	int32_t max = temp_data[0][0].temp;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cf0:	61bb      	str	r3, [r7, #24]
	uint8_t min_id = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
	uint8_t max_id = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < total_ic; i++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	757b      	strb	r3, [r7, #21]
 8001cfe:	e062      	b.n	8001dc6 <get_minmax_temperature+0xf2>
	{
		for (uint8_t j = 0; j < 5; j++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	753b      	strb	r3, [r7, #20]
 8001d04:	e059      	b.n	8001dba <get_minmax_temperature+0xe6>
		{

			if (temp_data[i][j].temp > max)
 8001d06:	7d7a      	ldrb	r2, [r7, #21]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	441a      	add	r2, r3
 8001d16:	7d3b      	ldrb	r3, [r7, #20]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d20:	461a      	mov	r2, r3
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	da18      	bge.n	8001d5a <get_minmax_temperature+0x86>
			{

				max = temp_data[i][j].temp;
 8001d28:	7d7a      	ldrb	r2, [r7, #21]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	441a      	add	r2, r3
 8001d38:	7d3b      	ldrb	r3, [r7, #20]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d42:	61bb      	str	r3, [r7, #24]
				max_id = (i << 4) | (j & 0x0f);
 8001d44:	7d7b      	ldrb	r3, [r7, #21]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	b25a      	sxtb	r2, r3
 8001d4a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	75bb      	strb	r3, [r7, #22]

			}
			if (temp_data[i][j].temp < min && j != 5)
 8001d5a:	7d7a      	ldrb	r2, [r7, #21]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	441a      	add	r2, r3
 8001d6a:	7d3b      	ldrb	r3, [r7, #20]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d74:	461a      	mov	r2, r3
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	dd1b      	ble.n	8001db4 <get_minmax_temperature+0xe0>
 8001d7c:	7d3b      	ldrb	r3, [r7, #20]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d018      	beq.n	8001db4 <get_minmax_temperature+0xe0>
			{

				min = temp_data[i][j].temp;
 8001d82:	7d7a      	ldrb	r2, [r7, #21]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	441a      	add	r2, r3
 8001d92:	7d3b      	ldrb	r3, [r7, #20]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d9c:	61fb      	str	r3, [r7, #28]
				min_id = (i << 4) | (j & 0x0f);
 8001d9e:	7d7b      	ldrb	r3, [r7, #21]
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	b25a      	sxtb	r2, r3
 8001da4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < 5; j++)
 8001db4:	7d3b      	ldrb	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	753b      	strb	r3, [r7, #20]
 8001dba:	7d3b      	ldrb	r3, [r7, #20]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d9a2      	bls.n	8001d06 <get_minmax_temperature+0x32>
	for (uint8_t i = 0; i < total_ic; i++)
 8001dc0:	7d7b      	ldrb	r3, [r7, #21]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	757b      	strb	r3, [r7, #21]
 8001dc6:	7d7a      	ldrb	r2, [r7, #21]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d398      	bcc.n	8001d00 <get_minmax_temperature+0x2c>

			}
		}
	}
	status_data->min_temp = min;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	83da      	strh	r2, [r3, #30]
	status_data->max_temp = max;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	841a      	strh	r2, [r3, #32]

	status_data->min_temp_id = min_id;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7dfa      	ldrb	r2, [r7, #23]
 8001de2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	status_data->max_temp_id = max_id;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7dba      	ldrb	r2, [r7, #22]
 8001dea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	@ 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <get_minmax_voltage>:
	\param total_ic				Number of ltc6804 ICs in stack
	\param cell_data[][CELL_NUM]		Cell data array
	\param *status_data			Pointer to status_data struct
*/
void get_minmax_voltage(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], status_data_t *status_data)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b087      	sub	sp, #28
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
	uint16_t min = cell_data[0][0].voltage;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	82fb      	strh	r3, [r7, #22]
	uint16_t max = cell_data[0][0].voltage;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	82bb      	strh	r3, [r7, #20]
	uint8_t min_id = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	74fb      	strb	r3, [r7, #19]
	uint8_t max_id = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	74bb      	strb	r3, [r7, #18]





	for (uint8_t i = 0; i < total_ic; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	747b      	strb	r3, [r7, #17]
 8001e20:	e064      	b.n	8001eec <get_minmax_voltage+0xf2>
	{
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	743b      	strb	r3, [r7, #16]
 8001e26:	e05b      	b.n	8001ee0 <get_minmax_voltage+0xe6>
		{
			if (cell_data[i][j].voltage > max)
 8001e28:	7c7a      	ldrb	r2, [r7, #17]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4413      	add	r3, r2
 8001e38:	7c3a      	ldrb	r2, [r7, #16]
 8001e3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e3e:	8aba      	ldrh	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d216      	bcs.n	8001e72 <get_minmax_voltage+0x78>
			{
				max = cell_data[i][j].voltage;
 8001e44:	7c7a      	ldrb	r2, [r7, #17]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4413      	add	r3, r2
 8001e54:	7c3a      	ldrb	r2, [r7, #16]
 8001e56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e5a:	82bb      	strh	r3, [r7, #20]
				max_id = (i << 4) | (j & 0x0f);
 8001e5c:	7c7b      	ldrb	r3, [r7, #17]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	b25a      	sxtb	r2, r3
 8001e62:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	74bb      	strb	r3, [r7, #18]
			}
			if (cell_data[i][j].voltage < min && cell_data[i][j].voltage > 5000) //ignore cells under .5V
 8001e72:	7c7a      	ldrb	r2, [r7, #17]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	7c3a      	ldrb	r2, [r7, #16]
 8001e84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e88:	8afa      	ldrh	r2, [r7, #22]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d925      	bls.n	8001eda <get_minmax_voltage+0xe0>
 8001e8e:	7c7a      	ldrb	r2, [r7, #17]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	7c3a      	ldrb	r2, [r7, #16]
 8001ea0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d916      	bls.n	8001eda <get_minmax_voltage+0xe0>
			{
				min = cell_data[i][j].voltage;
 8001eac:	7c7a      	ldrb	r2, [r7, #17]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4413      	add	r3, r2
 8001ebc:	7c3a      	ldrb	r2, [r7, #16]
 8001ebe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ec2:	82fb      	strh	r3, [r7, #22]
				min_id = (i << 4) | (j & 0x0f);
 8001ec4:	7c7b      	ldrb	r3, [r7, #17]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	74fb      	strb	r3, [r7, #19]
		for (uint8_t j = 0; j < CELL_NUM; j++)
 8001eda:	7c3b      	ldrb	r3, [r7, #16]
 8001edc:	3301      	adds	r3, #1
 8001ede:	743b      	strb	r3, [r7, #16]
 8001ee0:	7c3b      	ldrb	r3, [r7, #16]
 8001ee2:	2b11      	cmp	r3, #17
 8001ee4:	d9a0      	bls.n	8001e28 <get_minmax_voltage+0x2e>
	for (uint8_t i = 0; i < total_ic; i++)
 8001ee6:	7c7b      	ldrb	r3, [r7, #17]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	747b      	strb	r3, [r7, #17]
 8001eec:	7c7a      	ldrb	r2, [r7, #17]
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d396      	bcc.n	8001e22 <get_minmax_voltage+0x28>
			}
		}
	}
	status_data->min_voltage = min;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8afa      	ldrh	r2, [r7, #22]
 8001ef8:	849a      	strh	r2, [r3, #36]	@ 0x24
	status_data->max_voltage = max;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	8aba      	ldrh	r2, [r7, #20]
 8001efe:	84da      	strh	r2, [r3, #38]	@ 0x26
	status_data->delta = max - min;
 8001f00:	8aba      	ldrh	r2, [r7, #20]
 8001f02:	8afb      	ldrh	r3, [r7, #22]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	839a      	strh	r2, [r3, #28]
	status_data->min_voltage_id = min_id;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7cfa      	ldrb	r2, [r7, #19]
 8001f12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	status_data->max_voltage_id = max_id;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7cba      	ldrb	r2, [r7, #18]
 8001f1a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <build_disch_cfg>:




void build_disch_cfg(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
					 status_data_t *status_data, limit_t *limit){
 8001f2a:	b480      	push	{r7}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	82fb      	strh	r3, [r7, #22]
	//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8001f3e:	2300      	movs	r3, #0
 8001f40:	757b      	strb	r3, [r7, #21]
 8001f42:	e051      	b.n	8001fe8 <build_disch_cfg+0xbe>
		for (uint8_t j = 0; j < 12; j++){
 8001f44:	2300      	movs	r3, #0
 8001f46:	753b      	strb	r3, [r7, #20]
 8001f48:	e02d      	b.n	8001fa6 <build_disch_cfg+0x7c>
			if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 8001f4a:	7d7a      	ldrb	r2, [r7, #21]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4413      	add	r3, r2
 8001f5a:	7d3a      	ldrb	r2, [r7, #20]
 8001f5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001f66:	4619      	mov	r1, r3
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	8a9b      	ldrh	r3, [r3, #20]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dd0a      	ble.n	8001f88 <build_disch_cfg+0x5e>
				DCCx |= (1<<j);
 8001f72:	7d3b      	ldrb	r3, [r7, #20]
 8001f74:	2201      	movs	r2, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	82fb      	strh	r3, [r7, #22]
 8001f86:	e00b      	b.n	8001fa0 <build_disch_cfg+0x76>
			}
			else{
				DCCx &= ~(1<<j);
 8001f88:	7d3b      	ldrb	r3, [r7, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 12; j++){
 8001fa0:	7d3b      	ldrb	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	753b      	strb	r3, [r7, #20]
 8001fa6:	7d3b      	ldrb	r3, [r7, #20]
 8001fa8:	2b0b      	cmp	r3, #11
 8001faa:	d9ce      	bls.n	8001f4a <build_disch_cfg+0x20>
			}
		}
		tx_config[i][4] = (DCCx & 0x00ff);
 8001fac:	7d7a      	ldrb	r2, [r7, #21]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	8afa      	ldrh	r2, [r7, #22]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	711a      	strb	r2, [r3, #4]
		tx_config[i][5] = ((DCCx >> 8) & 0x0f);
 8001fc2:	8afb      	ldrh	r3, [r7, #22]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b2d9      	uxtb	r1, r3
 8001fca:	7d7a      	ldrb	r2, [r7, #21]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f001 020f 	and.w	r2, r1, #15
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < total_ic; i++){
 8001fe2:	7d7b      	ldrb	r3, [r7, #21]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	757b      	strb	r3, [r7, #21]
 8001fe8:	7d7a      	ldrb	r2, [r7, #21]
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3a9      	bcc.n	8001f44 <build_disch_cfg+0x1a>
	}

}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <build_disch_cfgb>:

void build_disch_cfgb(uint8_t total_ic, cell_data_t cell_data[][CELL_NUM], uint8_t tx_config[][6],\
status_data_t *status_data, limit_t *limit)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b087      	sub	sp, #28
 8002002:	af00      	add	r7, sp, #0
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
	uint16_t DCCx = 0x0000;
 800200e:	2300      	movs	r3, #0
 8002010:	82fb      	strh	r3, [r7, #22]
		//discharge all cells

	for (uint8_t i = 0; i < total_ic; i++){
 8002012:	2300      	movs	r3, #0
 8002014:	757b      	strb	r3, [r7, #21]
 8002016:	e051      	b.n	80020bc <build_disch_cfgb+0xbe>
			for (uint8_t j = 12; j < CELL_NUM; j++){
 8002018:	230c      	movs	r3, #12
 800201a:	753b      	strb	r3, [r7, #20]
 800201c:	e02f      	b.n	800207e <build_disch_cfgb+0x80>
				if (cell_data[i][j].voltage > (status_data->min_voltage + limit->tolerance)){
 800201e:	7d7a      	ldrb	r2, [r7, #21]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4413      	add	r3, r2
 800202e:	7d3a      	ldrb	r2, [r7, #20]
 8002030:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002034:	461a      	mov	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	8a9b      	ldrh	r3, [r3, #20]
 8002040:	440b      	add	r3, r1
 8002042:	429a      	cmp	r2, r3
 8002044:	dd0b      	ble.n	800205e <build_disch_cfgb+0x60>
					DCCx |= (1<<(j - 12));
 8002046:	7d3b      	ldrb	r3, [r7, #20]
 8002048:	3b0c      	subs	r3, #12
 800204a:	2201      	movs	r2, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	b21a      	sxth	r2, r3
 8002052:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002056:	4313      	orrs	r3, r2
 8002058:	b21b      	sxth	r3, r3
 800205a:	82fb      	strh	r3, [r7, #22]
 800205c:	e00c      	b.n	8002078 <build_disch_cfgb+0x7a>
				}
				else{
					DCCx &= ~(1<<(j - 12));
 800205e:	7d3b      	ldrb	r3, [r7, #20]
 8002060:	3b0c      	subs	r3, #12
 8002062:	2201      	movs	r2, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	b21b      	sxth	r3, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	b21a      	sxth	r2, r3
 800206e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002072:	4013      	ands	r3, r2
 8002074:	b21b      	sxth	r3, r3
 8002076:	82fb      	strh	r3, [r7, #22]
			for (uint8_t j = 12; j < CELL_NUM; j++){
 8002078:	7d3b      	ldrb	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	753b      	strb	r3, [r7, #20]
 800207e:	7d3b      	ldrb	r3, [r7, #20]
 8002080:	2b11      	cmp	r3, #17
 8002082:	d9cc      	bls.n	800201e <build_disch_cfgb+0x20>
				}
			}
			tx_config[i][0] = (DCCx & 0x0f) << 4 ;
 8002084:	8afb      	ldrh	r3, [r7, #22]
 8002086:	0119      	lsls	r1, r3, #4
 8002088:	7d7a      	ldrb	r2, [r7, #21]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	461a      	mov	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	b2ca      	uxtb	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
			tx_config[i][1] = (DCCx >> 4);
 800209c:	8afb      	ldrh	r3, [r7, #22]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	b299      	uxth	r1, r3
 80020a2:	7d7a      	ldrb	r2, [r7, #21]
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	461a      	mov	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < total_ic; i++){
 80020b6:	7d7b      	ldrb	r3, [r7, #21]
 80020b8:	3301      	adds	r3, #1
 80020ba:	757b      	strb	r3, [r7, #21]
 80020bc:	7d7a      	ldrb	r2, [r7, #21]
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3a9      	bcc.n	8002018 <build_disch_cfgb+0x1a>
		}
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <read_IVT_I>:


#define ERR_CANOFFLINE				11
uint8_t canSendErrorFlag;

void read_IVT_I(){
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 1;
 80020d8:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <read_IVT_I+0x54>)
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

	status_data.IVT_I = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <read_IVT_I+0x58>)
 80020e2:	795b      	ldrb	r3, [r3, #5]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <read_IVT_I+0x58>)
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	431a      	orrs	r2, r3
 80020ee:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <read_IVT_I+0x58>)
 80020f0:	78db      	ldrb	r3, [r3, #3]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <read_IVT_I+0x58>)
 80020f8:	789b      	ldrb	r3, [r3, #2]
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	4313      	orrs	r3, r2
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <read_IVT_I+0x54>)
 8002100:	6513      	str	r3, [r2, #80]	@ 0x50
	status_data.IVT_I_f = status_data.IVT_I / 1000.0f;
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <read_IVT_I+0x54>)
 8002104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002130 <read_IVT_I+0x5c>
 8002112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <read_IVT_I+0x54>)
 8002118:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	2000062c 	.word	0x2000062c
 800212c:	200002a4 	.word	0x200002a4
 8002130:	447a0000 	.word	0x447a0000

08002134 <read_IVT_U1>:

void read_IVT_U1(){
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 1;
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <read_IVT_U1+0x54>)
 800213a:	2201      	movs	r2, #1
 800213c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

	status_data.IVT_U1 = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <read_IVT_U1+0x58>)
 8002142:	795b      	ldrb	r3, [r3, #5]
 8002144:	461a      	mov	r2, r3
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <read_IVT_U1+0x58>)
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	431a      	orrs	r2, r3
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <read_IVT_U1+0x58>)
 8002150:	78db      	ldrb	r3, [r3, #3]
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	431a      	orrs	r2, r3
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <read_IVT_U1+0x58>)
 8002158:	789b      	ldrb	r3, [r3, #2]
 800215a:	061b      	lsls	r3, r3, #24
 800215c:	4313      	orrs	r3, r2
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <read_IVT_U1+0x54>)
 8002160:	6393      	str	r3, [r2, #56]	@ 0x38
	status_data.IVT_U1_f = status_data.IVT_U1 / 1000.0f;
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <read_IVT_U1+0x54>)
 8002164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800216e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002190 <read_IVT_U1+0x5c>
 8002172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <read_IVT_U1+0x54>)
 8002178:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000062c 	.word	0x2000062c
 800218c:	200002a4 	.word	0x200002a4
 8002190:	447a0000 	.word	0x447a0000

08002194 <read_IVT_U2>:

void read_IVT_U2(){
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 1;
 8002198:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <read_IVT_U2+0x54>)
 800219a:	2201      	movs	r2, #1
 800219c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

	status_data.IVT_U2 = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <read_IVT_U2+0x58>)
 80021a2:	795b      	ldrb	r3, [r3, #5]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <read_IVT_U2+0x58>)
 80021a8:	791b      	ldrb	r3, [r3, #4]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	431a      	orrs	r2, r3
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <read_IVT_U2+0x58>)
 80021b0:	78db      	ldrb	r3, [r3, #3]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	431a      	orrs	r2, r3
 80021b6:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <read_IVT_U2+0x58>)
 80021b8:	789b      	ldrb	r3, [r3, #2]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	4313      	orrs	r3, r2
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <read_IVT_U2+0x54>)
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
	status_data.IVT_U2_f = status_data.IVT_U2 / 1000.0f;
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <read_IVT_U2+0x54>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ce:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80021f0 <read_IVT_U2+0x5c>
 80021d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <read_IVT_U2+0x54>)
 80021d8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	2000062c 	.word	0x2000062c
 80021ec:	200002a4 	.word	0x200002a4
 80021f0:	447a0000 	.word	0x447a0000

080021f4 <read_IVT_Wh>:

void read_IVT_Wh(){
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	status_data.recieved_IVT = 1;
 80021f8:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <read_IVT_Wh+0x54>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

	status_data.IVT_Wh = (uint32_t)(CAN_RxData[5] | (CAN_RxData[4] << 8) | (CAN_RxData[3] << 16) | (CAN_RxData[2] << 24) );
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <read_IVT_Wh+0x58>)
 8002202:	795b      	ldrb	r3, [r3, #5]
 8002204:	461a      	mov	r2, r3
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <read_IVT_Wh+0x58>)
 8002208:	791b      	ldrb	r3, [r3, #4]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	431a      	orrs	r2, r3
 800220e:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <read_IVT_Wh+0x58>)
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	431a      	orrs	r2, r3
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <read_IVT_Wh+0x58>)
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	061b      	lsls	r3, r3, #24
 800221c:	4313      	orrs	r3, r2
 800221e:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <read_IVT_Wh+0x54>)
 8002220:	6493      	str	r3, [r2, #72]	@ 0x48
	status_data.IVT_Wh_f = status_data.IVT_Wh / 1000.0f;
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <read_IVT_Wh+0x54>)
 8002224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002250 <read_IVT_Wh+0x5c>
 8002232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <read_IVT_Wh+0x54>)
 8002238:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	2000062c 	.word	0x2000062c
 800224c:	200002a4 	.word	0x200002a4
 8002250:	447a0000 	.word	0x447a0000

08002254 <HAL_FDCAN_RxFifo0Callback>:




void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03b      	beq.n	80022e0 <HAL_FDCAN_RxFifo0Callback+0x8c>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK)
 8002268:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <HAL_FDCAN_RxFifo0Callback+0x94>)
 800226a:	4a20      	ldr	r2, [pc, #128]	@ (80022ec <HAL_FDCAN_RxFifo0Callback+0x98>)
 800226c:	2140      	movs	r1, #64	@ 0x40
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f002 fa18 	bl	80046a4 <HAL_FDCAN_GetRxMessage>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    /* Reception Error */
    Error_Handler();
 800227a:	f000 fe25 	bl	8002ec8 <Error_Handler>
 800227e:	e025      	b.n	80022cc <HAL_FDCAN_RxFifo0Callback+0x78>
    }
    else{
    	switch(RxHeader.Identifier){
 8002280:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <HAL_FDCAN_RxFifo0Callback+0x98>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f2a3 5321 	subw	r3, r3, #1313	@ 0x521
 8002288:	2b07      	cmp	r3, #7
 800228a:	d81f      	bhi.n	80022cc <HAL_FDCAN_RxFifo0Callback+0x78>
 800228c:	a201      	add	r2, pc, #4	@ (adr r2, 8002294 <HAL_FDCAN_RxFifo0Callback+0x40>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022b5 	.word	0x080022b5
 8002298:	080022bb 	.word	0x080022bb
 800229c:	080022c1 	.word	0x080022c1
 80022a0:	080022cd 	.word	0x080022cd
 80022a4:	080022cd 	.word	0x080022cd
 80022a8:	080022cd 	.word	0x080022cd
 80022ac:	080022cd 	.word	0x080022cd
 80022b0:	080022c7 	.word	0x080022c7
    	case CAN_IVT_I:
			read_IVT_I();
 80022b4:	f7ff ff0e 	bl	80020d4 <read_IVT_I>
    		break;
 80022b8:	e008      	b.n	80022cc <HAL_FDCAN_RxFifo0Callback+0x78>
    	case CAN_IVT_U1:
			read_IVT_U1();
 80022ba:	f7ff ff3b 	bl	8002134 <read_IVT_U1>
			break;
 80022be:	e005      	b.n	80022cc <HAL_FDCAN_RxFifo0Callback+0x78>
		case CAN_IVT_U2:
			read_IVT_U2();
 80022c0:	f7ff ff68 	bl	8002194 <read_IVT_U2>
			break;
 80022c4:	e002      	b.n	80022cc <HAL_FDCAN_RxFifo0Callback+0x78>
		case CAN_IVT_Wh:
			read_IVT_Wh();
 80022c6:	f7ff ff95 	bl	80021f4 <read_IVT_Wh>
			break;
 80022ca:	bf00      	nop
	

    	}
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80022cc:	2200      	movs	r2, #0
 80022ce:	2101      	movs	r1, #1
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f002 fb01 	bl	80048d8 <HAL_FDCAN_ActivateNotification>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_FDCAN_RxFifo0Callback+0x8c>
    {
      /* Notification Error */
      Error_Handler();
 80022dc:	f000 fdf4 	bl	8002ec8 <Error_Handler>
    }


  }
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200002a4 	.word	0x200002a4
 80022ec:	2000027c 	.word	0x2000027c

080022f0 <CanSend>:


void CanSend(uint8_t *TxData, uint32_t identifier ){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier = identifier;
 80022fa:	4a0c      	ldr	r2, [pc, #48]	@ (800232c <CanSend+0x3c>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6013      	str	r3, [r2, #0]


	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8002300:	e002      	b.n	8002308 <CanSend+0x18>
		delay_u(10);
 8002302:	200a      	movs	r0, #10
 8002304:	f000 fa6a 	bl	80027dc <delay_u>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8002308:	4809      	ldr	r0, [pc, #36]	@ (8002330 <CanSend+0x40>)
 800230a:	f002 fad3 	bl	80048b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <CanSend+0x34>
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4905      	ldr	r1, [pc, #20]	@ (800232c <CanSend+0x3c>)
 8002318:	4805      	ldr	r0, [pc, #20]	@ (8002330 <CanSend+0x40>)
 800231a:	f002 f97f 	bl	800461c <HAL_FDCAN_AddMessageToTxFifoQ>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ee      	bne.n	8002302 <CanSend+0x12>
	}

}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000258 	.word	0x20000258
 8002330:	200000b0 	.word	0x200000b0

08002334 <ReadCANBusMessage>:

int ReadCANBusMessage(uint32_t messageIdentifier, uint8_t* RxData1)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    /* Infinite loop to keep trying to read the message */
	uint32_t t = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

    while(t < 4294967295)
 8002342:	e015      	b.n	8002370 <ReadCANBusMessage+0x3c>
    {
    	t++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
        /* Check if a new message is available in RX FIFO 0 */
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData1) == HAL_OK)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <ReadCANBusMessage+0x50>)
 800234e:	2140      	movs	r1, #64	@ 0x40
 8002350:	480d      	ldr	r0, [pc, #52]	@ (8002388 <ReadCANBusMessage+0x54>)
 8002352:	f002 f9a7 	bl	80046a4 <HAL_FDCAN_GetRxMessage>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <ReadCANBusMessage+0x3c>
        {
            /* Validate the Identifier */
            if(RxHeader.Identifier == messageIdentifier)
 800235c:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <ReadCANBusMessage+0x50>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d101      	bne.n	800236a <ReadCANBusMessage+0x36>
            {
                return 0; // Message successfully read and validated
 8002366:	2300      	movs	r3, #0
 8002368:	e007      	b.n	800237a <ReadCANBusMessage+0x46>
            }
            delay_u(10);
 800236a:	200a      	movs	r0, #10
 800236c:	f000 fa36 	bl	80027dc <delay_u>
    while(t < 4294967295)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d1e5      	bne.n	8002344 <ReadCANBusMessage+0x10>
        }
        // Else, ignore the error and try again
    }
    return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000027c 	.word	0x2000027c
 8002388:	200000b0 	.word	0x200000b0

0800238c <Send_cell_data>:



void Send_cell_data(cell_data_t cell_data[][CELL_NUM]){
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	@ 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < IC_NUM; i++){
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
 8002398:	e061      	b.n	800245e <Send_cell_data+0xd2>
		for(int j = 0; j < CELL_NUM; j += 3){
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	e058      	b.n	8002452 <Send_cell_data+0xc6>
			uint16_t buf = cell_data[i][j].voltage;
 80023a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	461a      	mov	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023b6:	83fb      	strh	r3, [r7, #30]
			uint16_t buf2 = cell_data[i][j+1].voltage;
 80023b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	461a      	mov	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	3201      	adds	r2, #1
 80023cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023d0:	83bb      	strh	r3, [r7, #28]
			uint16_t buf3 = cell_data[i][j+2].voltage;
 80023d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	3202      	adds	r2, #2
 80023e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023ea:	837b      	strh	r3, [r7, #26]

			uint8_t c1_1 = buf;
 80023ec:	8bfb      	ldrh	r3, [r7, #30]
 80023ee:	767b      	strb	r3, [r7, #25]
			uint8_t c2_1 = buf >> 8;
 80023f0:	8bfb      	ldrh	r3, [r7, #30]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	763b      	strb	r3, [r7, #24]

			uint8_t c1_2 = buf2;
 80023f8:	8bbb      	ldrh	r3, [r7, #28]
 80023fa:	75fb      	strb	r3, [r7, #23]
			uint8_t c2_2 = buf2 >> 8;
 80023fc:	8bbb      	ldrh	r3, [r7, #28]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29b      	uxth	r3, r3
 8002402:	75bb      	strb	r3, [r7, #22]

			uint8_t c1_3 = buf3;
 8002404:	8b7b      	ldrh	r3, [r7, #26]
 8002406:	757b      	strb	r3, [r7, #21]
			uint8_t c2_3 = buf3 >> 8;
 8002408:	8b7b      	ldrh	r3, [r7, #26]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29b      	uxth	r3, r3
 800240e:	753b      	strb	r3, [r7, #20]


			uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, i, j};
 8002410:	7e7b      	ldrb	r3, [r7, #25]
 8002412:	723b      	strb	r3, [r7, #8]
 8002414:	7e3b      	ldrb	r3, [r7, #24]
 8002416:	727b      	strb	r3, [r7, #9]
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	72bb      	strb	r3, [r7, #10]
 800241c:	7dbb      	ldrb	r3, [r7, #22]
 800241e:	72fb      	strb	r3, [r7, #11]
 8002420:	7d7b      	ldrb	r3, [r7, #21]
 8002422:	733b      	strb	r3, [r7, #12]
 8002424:	7d3b      	ldrb	r3, [r7, #20]
 8002426:	737b      	strb	r3, [r7, #13]
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	b2db      	uxtb	r3, r3
 800242c:	73bb      	strb	r3, [r7, #14]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	73fb      	strb	r3, [r7, #15]

			uint32_t id_c = 0x778;
 8002434:	f44f 63ef 	mov.w	r3, #1912	@ 0x778
 8002438:	613b      	str	r3, [r7, #16]
			CanSend(TxData, id_c);
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	6939      	ldr	r1, [r7, #16]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff55 	bl	80022f0 <CanSend>
			delay_u(100);
 8002446:	2064      	movs	r0, #100	@ 0x64
 8002448:	f000 f9c8 	bl	80027dc <delay_u>
		for(int j = 0; j < CELL_NUM; j += 3){
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	3303      	adds	r3, #3
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	2b11      	cmp	r3, #17
 8002456:	dda3      	ble.n	80023a0 <Send_cell_data+0x14>
	for(int i = 0; i < IC_NUM; i++){
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	3301      	adds	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	2b07      	cmp	r3, #7
 8002462:	dd9a      	ble.n	800239a <Send_cell_data+0xe>
		}
	}
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <Send_temp_data>:

#define TEMP_FIXED 1
void Send_temp_data(temp_data_t temp_data[][GPIO_NUM]){
 800246e:	b580      	push	{r7, lr}
 8002470:	b094      	sub	sp, #80	@ 0x50
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]

#if TEMP_FIXED

		for(int i = 0; i < IC_NUM; i++){
 8002476:	2300      	movs	r3, #0
 8002478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800247a:	e11d      	b.n	80026b8 <Send_temp_data+0x24a>
			uint32_t id_t = 1960;
 800247c:	f44f 63f5 	mov.w	r3, #1960	@ 0x7a8
 8002480:	64bb      	str	r3, [r7, #72]	@ 0x48

						uint16_t buf = temp_data[i][0].temp;
 8002482:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002496:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
						uint16_t buf2 = temp_data[i][1].temp;
 800249a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	461a      	mov	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024ae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
						uint16_t buf3 = temp_data[i][2].temp;
 80024b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80024c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

						uint8_t c1_1 = buf;
 80024ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80024ce:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
						uint8_t c2_1 = buf >> 8;
 80024d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

						uint8_t c1_2 = buf2;
 80024de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80024e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						uint8_t c2_2 = buf2 >> 8;
 80024e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

						uint8_t c1_3 = buf3;
 80024f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
						uint8_t c2_3 = buf3 >> 8;
 80024fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	b29b      	uxth	r3, r3
 8002502:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

						uint8_t TxData[8] = { c1_1, c2_1, c1_2, c2_2 ,c1_3, c2_3, i, 0};
 8002506:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800250a:	773b      	strb	r3, [r7, #28]
 800250c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002510:	777b      	strb	r3, [r7, #29]
 8002512:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002516:	77bb      	strb	r3, [r7, #30]
 8002518:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800251c:	77fb      	strb	r3, [r7, #31]
 800251e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002522:	f887 3020 	strb.w	r3, [r7, #32]
 8002526:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800252a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800252e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002536:	2300      	movs	r3, #0
 8002538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

						CanSend(TxData, id_t);
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fed4 	bl	80022f0 <CanSend>
						delay_u(100);
 8002548:	2064      	movs	r0, #100	@ 0x64
 800254a:	f000 f947 	bl	80027dc <delay_u>

						uint16_t buf4 = temp_data[i][3].temp;
 800254e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002562:	877b      	strh	r3, [r7, #58]	@ 0x3a
						uint16_t buf5 = temp_data[i][4].temp;
 8002564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	461a      	mov	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002578:	873b      	strh	r3, [r7, #56]	@ 0x38
						uint16_t buf6 = temp_data[i][6].temp;
 800257a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800258e:	86fb      	strh	r3, [r7, #54]	@ 0x36

						uint8_t c1_4 = buf4;
 8002590:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002592:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						uint8_t c2_4 = buf4 >> 8;
 8002596:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	b29b      	uxth	r3, r3
 800259c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

						uint8_t c1_5 = buf5;
 80025a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80025a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
						uint8_t c2_5 = buf5 >> 8;
 80025a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

						uint8_t c1_6 = buf6;
 80025b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80025b2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						uint8_t c2_6 = buf6 >> 8;
 80025b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

						uint8_t TxData1[8] = { c1_4, c2_4, c1_5, c2_5 ,c1_6, c2_6, i, 1};
 80025c0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80025c4:	753b      	strb	r3, [r7, #20]
 80025c6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80025ca:	757b      	strb	r3, [r7, #21]
 80025cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025d0:	75bb      	strb	r3, [r7, #22]
 80025d2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80025d6:	75fb      	strb	r3, [r7, #23]
 80025d8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80025dc:	763b      	strb	r3, [r7, #24]
 80025de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80025e2:	767b      	strb	r3, [r7, #25]
 80025e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	76bb      	strb	r3, [r7, #26]
 80025ea:	2301      	movs	r3, #1
 80025ec:	76fb      	strb	r3, [r7, #27]

						CanSend(TxData1, id_t);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fe7b 	bl	80022f0 <CanSend>
						delay_u(100);
 80025fa:	2064      	movs	r0, #100	@ 0x64
 80025fc:	f000 f8ee 	bl	80027dc <delay_u>

						uint16_t buf7 = temp_data[i][7].temp;
 8002600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002614:	85fb      	strh	r3, [r7, #46]	@ 0x2e
						uint16_t buf8 = temp_data[i][8].temp;
 8002616:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	461a      	mov	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800262a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
						uint16_t buf9 = temp_data[i][9].temp;
 800262c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	461a      	mov	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8002640:	857b      	strh	r3, [r7, #42]	@ 0x2a

						uint8_t c1_7 = buf7;
 8002642:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002644:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
						uint8_t c2_7 = buf7 >> 8;
 8002648:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29b      	uxth	r3, r3
 800264e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

						uint8_t c1_8 = buf8;
 8002652:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						uint8_t c2_8 = buf8 >> 8;
 8002658:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	b29b      	uxth	r3, r3
 800265e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

						uint8_t c1_9 = buf9;
 8002662:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002664:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
						uint8_t c2_9 = buf9 >> 8;
 8002668:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	b29b      	uxth	r3, r3
 800266e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


						uint8_t TxData2[8] = { c1_7, c2_7, c1_8, c2_8 ,c1_9, c2_9, i, 2};
 8002672:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002676:	733b      	strb	r3, [r7, #12]
 8002678:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800267c:	737b      	strb	r3, [r7, #13]
 800267e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002682:	73bb      	strb	r3, [r7, #14]
 8002684:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800268e:	743b      	strb	r3, [r7, #16]
 8002690:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002694:	747b      	strb	r3, [r7, #17]
 8002696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002698:	b2db      	uxtb	r3, r3
 800269a:	74bb      	strb	r3, [r7, #18]
 800269c:	2302      	movs	r3, #2
 800269e:	74fb      	strb	r3, [r7, #19]
						CanSend(TxData2, id_t);
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fe22 	bl	80022f0 <CanSend>
						delay_u(100);
 80026ac:	2064      	movs	r0, #100	@ 0x64
 80026ae:	f000 f895 	bl	80027dc <delay_u>
		for(int i = 0; i < IC_NUM; i++){
 80026b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026b4:	3301      	adds	r3, #1
 80026b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	f77f aede 	ble.w	800247c <Send_temp_data+0xe>
		}
#endif



}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3750      	adds	r7, #80	@ 0x50
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <Send_Soc>:



void Send_Soc(status_data_t *status_data){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Data[8];

	Tx_Data[0] = (uint8_t)status_data->soc;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80026da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026de:	edc7 7a00 	vstr	s15, [r7]
 80026e2:	783b      	ldrb	r3, [r7, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	723b      	strb	r3, [r7, #8]
	uint16_t buf = status_data->max_voltage / 10;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ec:	4a1f      	ldr	r2, [pc, #124]	@ (800276c <Send_Soc+0xa0>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	08db      	lsrs	r3, r3, #3
 80026f4:	82fb      	strh	r3, [r7, #22]
	uint8_t c1 = buf;
 80026f6:	8afb      	ldrh	r3, [r7, #22]
 80026f8:	757b      	strb	r3, [r7, #21]
	uint8_t c2 = buf >> 8;
 80026fa:	8afb      	ldrh	r3, [r7, #22]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	b29b      	uxth	r3, r3
 8002700:	753b      	strb	r3, [r7, #20]
	Tx_Data[1] = c1;
 8002702:	7d7b      	ldrb	r3, [r7, #21]
 8002704:	727b      	strb	r3, [r7, #9]
	Tx_Data[2] = c2;
 8002706:	7d3b      	ldrb	r3, [r7, #20]
 8002708:	72bb      	strb	r3, [r7, #10]
	if(status_data->air_s == true)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <Send_Soc+0x4e>
	Tx_Data[3] = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	72fb      	strb	r3, [r7, #11]
 8002718:	e001      	b.n	800271e <Send_Soc+0x52>
	else
	Tx_Data[3] = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	72fb      	strb	r3, [r7, #11]

	uint16_t buf1 = (uint16_t)status_data->sum_of_cells;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002728:	ee17 3a90 	vmov	r3, s15
 800272c:	827b      	strh	r3, [r7, #18]

	Tx_Data[4]= (uint8_t)(buf1);
 800272e:	8a7b      	ldrh	r3, [r7, #18]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	733b      	strb	r3, [r7, #12]
	Tx_Data[5]= (uint8_t)(buf1 >> 8);
 8002734:	8a7b      	ldrh	r3, [r7, #18]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	b29b      	uxth	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	737b      	strb	r3, [r7, #13]

	uint16_t buf2 = (uint16_t)status_data->max_temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002744:	823b      	strh	r3, [r7, #16]

	Tx_Data[6]= (uint8_t)(buf2);
 8002746:	8a3b      	ldrh	r3, [r7, #16]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	73bb      	strb	r3, [r7, #14]
	Tx_Data[7]= (uint8_t)(buf2 >> 8);
 800274c:	8a3b      	ldrh	r3, [r7, #16]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	73fb      	strb	r3, [r7, #15]

	CanSend(Tx_Data, CAN_SOC);
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	2197      	movs	r1, #151	@ 0x97
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fdc7 	bl	80022f0 <CanSend>

}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	cccccccd 	.word	0xcccccccd

08002770 <Send_Min>:

void Send_Min(status_data_t *status_data){
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	uint8_t Tx_Data[8];

	uint16_t buf = status_data->min_voltage / 10;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800277c:	4a16      	ldr	r2, [pc, #88]	@ (80027d8 <Send_Min+0x68>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	82fb      	strh	r3, [r7, #22]
	uint8_t c1 = buf;
 8002786:	8afb      	ldrh	r3, [r7, #22]
 8002788:	757b      	strb	r3, [r7, #21]
	uint8_t c2 = buf >> 8;
 800278a:	8afb      	ldrh	r3, [r7, #22]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	b29b      	uxth	r3, r3
 8002790:	753b      	strb	r3, [r7, #20]
	Tx_Data[0] = c1;
 8002792:	7d7b      	ldrb	r3, [r7, #21]
 8002794:	723b      	strb	r3, [r7, #8]
	Tx_Data[1] = c2;
 8002796:	7d3b      	ldrb	r3, [r7, #20]
 8002798:	727b      	strb	r3, [r7, #9]

	uint16_t buf2 = (uint16_t)status_data->max_temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80027a0:	827b      	strh	r3, [r7, #18]

	Tx_Data[2]= (uint8_t)(buf2);
 80027a2:	8a7b      	ldrh	r3, [r7, #18]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	72bb      	strb	r3, [r7, #10]
	Tx_Data[3]= (uint8_t)(buf2 >> 8);
 80027a8:	8a7b      	ldrh	r3, [r7, #18]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	72fb      	strb	r3, [r7, #11]

	Tx_Data[4]= 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	733b      	strb	r3, [r7, #12]
	Tx_Data[5]= 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	737b      	strb	r3, [r7, #13]
	Tx_Data[6]= 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73bb      	strb	r3, [r7, #14]
	Tx_Data[7]= 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]


	CanSend(Tx_Data, CAN_MIN);
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	2198      	movs	r1, #152	@ 0x98
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fd91 	bl	80022f0 <CanSend>

}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	cccccccd 	.word	0xcccccccd

080027dc <delay_u>:
#include "conf.h"

extern SPI_HandleTypeDef hspi1;


void delay_u(uint32_t us){
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <delay_u+0x58>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a12      	ldr	r2, [pc, #72]	@ (8002834 <delay_u+0x58>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	60d3      	str	r3, [r2, #12]
		    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <delay_u+0x5c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a10      	ldr	r2, [pc, #64]	@ (8002838 <delay_u+0x5c>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6013      	str	r3, [r2, #0]
		    // Get the current number of clock cycles
		    uint32_t const startTicks = DWT->CYCCNT;
 80027fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <delay_u+0x5c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60fb      	str	r3, [r7, #12]
		    // Calculate the number of clock cycles for the desired delay
		    uint32_t const delayTicks = (SystemCoreClock / 1000000) * us;
 8002802:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <delay_u+0x60>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a0e      	ldr	r2, [pc, #56]	@ (8002840 <delay_u+0x64>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	0c9a      	lsrs	r2, r3, #18
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	60bb      	str	r3, [r7, #8]
		    // Wait until the number of clock cycles has elapsed
		    while (DWT->CYCCNT - startTicks < delayTicks);
 8002816:	bf00      	nop
 8002818:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <delay_u+0x5c>)
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d8f8      	bhi.n	8002818 <delay_u+0x3c>
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000edf0 	.word	0xe000edf0
 8002838:	e0001000 	.word	0xe0001000
 800283c:	2000002c 	.word	0x2000002c
 8002840:	431bde83 	.word	0x431bde83

08002844 <spi_write_read_byte>:

void delay_m(uint32_t ms){
	HAL_Delay(ms);
}

uint8_t spi_write_read_byte(uint8_t wbyte){
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af02      	add	r7, sp, #8
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]

	uint8_t rxByte;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2110      	movs	r1, #16
 8002852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002856:	f002 fd1f 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &wbyte, &rxByte, 1, SPI_TIMEOUT);
 800285a:	f107 020f 	add.w	r2, r7, #15
 800285e:	1df9      	adds	r1, r7, #7
 8002860:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2301      	movs	r3, #1
 8002868:	4806      	ldr	r0, [pc, #24]	@ (8002884 <spi_write_read_byte+0x40>)
 800286a:	f004 f846 	bl	80068fa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800286e:	2201      	movs	r2, #1
 8002870:	2110      	movs	r1, #16
 8002872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002876:	f002 fd0f 	bl	8005298 <HAL_GPIO_WritePin>

	return rxByte;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000114 	.word	0x20000114

08002888 <spi_write_array>:

uint32_t spi_write_array(uint8_t len, uint8_t *data){
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2110      	movs	r1, #16
 8002898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289c:	f002 fcfc 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, len, SPI_TIMEOUT);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4807      	ldr	r0, [pc, #28]	@ (80028c8 <spi_write_array+0x40>)
 80028ac:	f003 fd79 	bl	80063a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028b0:	2201      	movs	r2, #1
 80028b2:	2110      	movs	r1, #16
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b8:	f002 fcee 	bl	8005298 <HAL_GPIO_WritePin>

	return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000114 	.word	0x20000114

080028cc <spi_write_then_read_array_ltc>:

uint32_t spi_write_then_read_array_ltc(uint8_t wlen, uint8_t *wbuffer, uint8_t rlen, uint8_t *rbuffer){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	4613      	mov	r3, r2
 80028dc:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2110      	movs	r1, #16
 80028e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e6:	f002 fcd7 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wbuffer, wlen, SPI_TIMEOUT);
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	480a      	ldr	r0, [pc, #40]	@ (8002920 <spi_write_then_read_array_ltc+0x54>)
 80028f6:	f003 fd54 	bl	80063a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rbuffer, rlen, SPI_TIMEOUT);
 80028fa:	7bbb      	ldrb	r3, [r7, #14]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4806      	ldr	r0, [pc, #24]	@ (8002920 <spi_write_then_read_array_ltc+0x54>)
 8002906:	f003 fec1 	bl	800668c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800290a:	2201      	movs	r2, #1
 800290c:	2110      	movs	r1, #16
 800290e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002912:	f002 fcc1 	bl	8005298 <HAL_GPIO_WritePin>

	return 0;
 8002916:	2300      	movs	r3, #0

}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000114 	.word	0x20000114

08002924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800292a:	f001 fa8e 	bl	8003e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800292e:	f000 f815 	bl	800295c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002932:	f000 fa6f 	bl	8002e14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002936:	f000 fa21 	bl	8002d7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800293a:	f000 f931 	bl	8002ba0 <MX_SPI1_Init>
  MX_TIM8_Init();
 800293e:	f000 f96d 	bl	8002c1c <MX_TIM8_Init>
  MX_FDCAN1_Init();
 8002942:	f000 f84b 	bl	80029dc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002946:	2108      	movs	r1, #8
 8002948:	4803      	ldr	r0, [pc, #12]	@ (8002958 <main+0x34>)
 800294a:	f005 faa9 	bl	8007ea0 <HAL_TIMEx_PWMN_Start>
  uint16_t pulse = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // Here we create a FDCAN message

	 operation_main();
 8002952:	f000 fac3 	bl	8002edc <operation_main>
 8002956:	e7fc      	b.n	8002952 <main+0x2e>
 8002958:	20000178 	.word	0x20000178

0800295c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b094      	sub	sp, #80	@ 0x50
 8002960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002962:	f107 0318 	add.w	r3, r7, #24
 8002966:	2238      	movs	r2, #56	@ 0x38
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f006 fabe 	bl	8008eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800297e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002982:	f002 fca1 	bl	80052c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002986:	2302      	movs	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800298a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002990:	2340      	movs	r3, #64	@ 0x40
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002994:	2300      	movs	r3, #0
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002998:	f107 0318 	add.w	r3, r7, #24
 800299c:	4618      	mov	r0, r3
 800299e:	f002 fd37 	bl	8005410 <HAL_RCC_OscConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80029a8:	f000 fa8e 	bl	8002ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	230f      	movs	r3, #15
 80029ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029b0:	2301      	movs	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 f835 	bl	8005a34 <HAL_RCC_ClockConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80029d0:	f000 fa7a 	bl	8002ec8 <Error_Handler>
  }
}
 80029d4:	bf00      	nop
 80029d6:	3750      	adds	r7, #80	@ 0x50
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80029e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 80029e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002b98 <MX_FDCAN1_Init+0x1bc>)
 80029e6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80029e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80029ee:	4b69      	ldr	r3, [pc, #420]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80029f4:	4b67      	ldr	r3, [pc, #412]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80029fa:	4b66      	ldr	r3, [pc, #408]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002a00:	4b64      	ldr	r3, [pc, #400]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002a06:	4b63      	ldr	r3, [pc, #396]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002a0c:	4b61      	ldr	r3, [pc, #388]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002a12:	4b60      	ldr	r3, [pc, #384]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8002a18:	4b5e      	ldr	r3, [pc, #376]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a1a:	220d      	movs	r2, #13
 8002a1c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a20:	2202      	movs	r2, #2
 8002a22:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002a24:	4b5b      	ldr	r3, [pc, #364]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002a30:	4b58      	ldr	r3, [pc, #352]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002a36:	4b57      	ldr	r3, [pc, #348]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8002a3c:	4b55      	ldr	r3, [pc, #340]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a3e:	221c      	movs	r2, #28
 8002a40:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002a42:	4b54      	ldr	r3, [pc, #336]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a48:	4b52      	ldr	r3, [pc, #328]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002a4e:	4851      	ldr	r0, [pc, #324]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a50:	f001 fb9e 	bl	8004190 <HAL_FDCAN_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002a5a:	f000 fa35 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	2140      	movs	r1, #64	@ 0x40
 8002a62:	484c      	ldr	r0, [pc, #304]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a64:	f001 fd79 	bl	800455a <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_FDCAN1_Init+0x96>
    {
      Error_Handler();
 8002a6e:	f000 fa2b 	bl	8002ec8 <Error_Handler>
    }
  if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan1, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002a72:	2201      	movs	r2, #1
 8002a74:	2141      	movs	r1, #65	@ 0x41
 8002a76:	4847      	ldr	r0, [pc, #284]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002a78:	f001 fd6f 	bl	800455a <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_FDCAN1_Init+0xaa>
    {
      Error_Handler();
 8002a82:	f000 fa21 	bl	8002ec8 <Error_Handler>
    }

  //only accept config/request can messages and sync can messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002a92:	2301      	movs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 1900; //CANID_CONFIG;
 8002a96:	f240 736c 	movw	r3, #1900	@ 0x76c
 8002a9a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8002a9c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002aa0:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	483b      	ldr	r0, [pc, #236]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002aa8:	f001 fccc 	bl	8004444 <HAL_FDCAN_ConfigFilter>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_FDCAN1_Init+0xda>
    {
      Error_Handler();
 8002ab2:	f000 fa09 	bl	8002ec8 <Error_Handler>
    }

  // Additional filter configuration for 0x52x messages
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x520;   // Start of the range
 8002ac6:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8002aca:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x700;   // Mask for the filter. This will allow IDs 0x520 - 0x52F
 8002acc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002ad0:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	482f      	ldr	r0, [pc, #188]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002ad8:	f001 fcb4 	bl	8004444 <HAL_FDCAN_ConfigFilter>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_FDCAN1_Init+0x10a>
  {
      Error_Handler();
 8002ae2:	f000 f9f1 	bl	8002ec8 <Error_Handler>
  }

  // Filter configuration for message ID 150
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 2; // Different index for this filter
 8002aea:	2302      	movs	r3, #2
 8002aec:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002aee:	2302      	movs	r3, #2
 8002af0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002af2:	2301      	movs	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 150;   // Specific ID
 8002af6:	2396      	movs	r3, #150	@ 0x96
 8002af8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;   // Mask for the filter. This will allow only ID 150
 8002afa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002afe:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002b00:	463b      	mov	r3, r7
 8002b02:	4619      	mov	r1, r3
 8002b04:	4823      	ldr	r0, [pc, #140]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002b06:	f001 fc9d 	bl	8004444 <HAL_FDCAN_ConfigFilter>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_FDCAN1_Init+0x138>
  {
      Error_Handler();
 8002b10:	f000 f9da 	bl	8002ec8 <Error_Handler>
  }

  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8002b14:	2301      	movs	r3, #1
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	481d      	ldr	r0, [pc, #116]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002b20:	f001 fcea 	bl	80044f8 <HAL_FDCAN_ConfigGlobalFilter>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_FDCAN1_Init+0x152>
    {
      Error_Handler();
 8002b2a:	f000 f9cd 	bl	8002ec8 <Error_Handler>
    }

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8002b2e:	4819      	ldr	r0, [pc, #100]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002b30:	f001 fd4c 	bl	80045cc <HAL_FDCAN_Start>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_FDCAN1_Init+0x162>
    {
      Error_Handler();
 8002b3a:	f000 f9c5 	bl	8002ec8 <Error_Handler>
    }
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2101      	movs	r1, #1
 8002b42:	4814      	ldr	r0, [pc, #80]	@ (8002b94 <MX_FDCAN1_Init+0x1b8>)
 8002b44:	f001 fec8 	bl	80048d8 <HAL_FDCAN_ActivateNotification>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_FDCAN1_Init+0x176>
    {
      Error_Handler();
 8002b4e:	f000 f9bb 	bl	8002ec8 <Error_Handler>
    }

  TxHeader.Identifier = 0x123; // Modify this with your identifier
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b54:	f240 1223 	movw	r2, #291	@ 0x123
 8002b58:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b68:	2208      	movs	r2, #8
 8002b6a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <MX_FDCAN1_Init+0x1c0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200000b0 	.word	0x200000b0
 8002b98:	40006400 	.word	0x40006400
 8002b9c:	20000258 	.word	0x20000258

08002ba0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <MX_SPI1_Init+0x78>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bb2:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bb8:	4b16      	ldr	r3, [pc, #88]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002bbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bd6:	2238      	movs	r2, #56	@ 0x38
 8002bd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bee:	2207      	movs	r2, #7
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bfe:	4805      	ldr	r0, [pc, #20]	@ (8002c14 <MX_SPI1_Init+0x74>)
 8002c00:	f003 fb24 	bl	800624c <HAL_SPI_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c0a:	f000 f95d 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000114 	.word	0x20000114
 8002c18:	40013000 	.word	0x40013000

08002c1c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b09c      	sub	sp, #112	@ 0x70
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c22:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
 8002c4c:	615a      	str	r2, [r3, #20]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2234      	movs	r2, #52	@ 0x34
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f006 f948 	bl	8008eec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c5c:	4b45      	ldr	r3, [pc, #276]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c5e:	4a46      	ldr	r2, [pc, #280]	@ (8002d78 <MX_TIM8_Init+0x15c>)
 8002c60:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8002c62:	4b44      	ldr	r3, [pc, #272]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c64:	220f      	movs	r2, #15
 8002c66:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c68:	4b42      	ldr	r3, [pc, #264]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39;
 8002c6e:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c70:	2227      	movs	r2, #39	@ 0x27
 8002c72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c74:	4b3f      	ldr	r3, [pc, #252]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c80:	4b3c      	ldr	r3, [pc, #240]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c82:	2280      	movs	r2, #128	@ 0x80
 8002c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c86:	483b      	ldr	r0, [pc, #236]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002c88:	f004 fa16 	bl	80070b8 <HAL_TIM_Base_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002c92:	f000 f919 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c9c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4834      	ldr	r0, [pc, #208]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002ca4:	f004 fbd4 	bl	8007450 <HAL_TIM_ConfigClockSource>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002cae:	f000 f90b 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cb2:	4830      	ldr	r0, [pc, #192]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002cb4:	f004 fa57 	bl	8007166 <HAL_TIM_PWM_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002cbe:	f000 f903 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4827      	ldr	r0, [pc, #156]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002cd6:	f005 f997 	bl	8008008 <HAL_TIMEx_MasterConfigSynchronization>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002ce0:	f000 f8f2 	bl	8002ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce4:	2360      	movs	r3, #96	@ 0x60
 8002ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 19;
 8002ce8:	2313      	movs	r3, #19
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d04:	2208      	movs	r2, #8
 8002d06:	4619      	mov	r1, r3
 8002d08:	481a      	ldr	r0, [pc, #104]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002d0a:	f004 fa8d 	bl	8007228 <HAL_TIM_PWM_ConfigChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002d14:	f000 f8d8 	bl	8002ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4807      	ldr	r0, [pc, #28]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002d56:	f005 f9d9 	bl	800810c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8002d60:	f000 f8b2 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002d64:	4803      	ldr	r0, [pc, #12]	@ (8002d74 <MX_TIM8_Init+0x158>)
 8002d66:	f000 fdfd 	bl	8003964 <HAL_TIM_MspPostInit>

}
 8002d6a:	bf00      	nop
 8002d6c:	3770      	adds	r7, #112	@ 0x70
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000178 	.word	0x20000178
 8002d78:	40013400 	.word	0x40013400

08002d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d80:	4b22      	ldr	r3, [pc, #136]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002d82:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <MX_USART2_UART_Init+0x94>)
 8002d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d86:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da6:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dac:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dbe:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dc4:	4811      	ldr	r0, [pc, #68]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002dc6:	f005 fa52 	bl	800826e <HAL_UART_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002dd0:	f000 f87a 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	480d      	ldr	r0, [pc, #52]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002dd8:	f005 ffbe 	bl	8008d58 <HAL_UARTEx_SetTxFifoThreshold>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002de2:	f000 f871 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002de6:	2100      	movs	r1, #0
 8002de8:	4808      	ldr	r0, [pc, #32]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002dea:	f005 fff3 	bl	8008dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002df4:	f000 f868 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002df8:	4804      	ldr	r0, [pc, #16]	@ (8002e0c <MX_USART2_UART_Init+0x90>)
 8002dfa:	f005 ff74 	bl	8008ce6 <HAL_UARTEx_DisableFifoMode>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002e04:	f000 f860 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200001c4 	.word	0x200001c4
 8002e10:	40004400 	.word	0x40004400

08002e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e2a:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	4a24      	ldr	r2, [pc, #144]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e30:	f043 0320 	orr.w	r3, r3, #32
 8002e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e36:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e66:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <MX_GPIO_Init+0xac>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002e72:	2200      	movs	r2, #0
 8002e74:	f248 7110 	movw	r1, #34576	@ 0x8710
 8002e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e7c:	f002 fa0c 	bl	8005298 <HAL_GPIO_WritePin>
                          |FAN_control_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_Pin Led_debug_Pin PRE_Done_Pin AMS_Ok_Pin
                           FAN_control_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Led_debug_Pin|PRE_Done_Pin|AMS_Ok_Pin
 8002e80:	f248 7310 	movw	r3, #34576	@ 0x8710
 8002e84:	60fb      	str	r3, [r7, #12]
                          |FAN_control_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e86:	2301      	movs	r3, #1
 8002e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e9c:	f002 f862 	bl	8004f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_PRE_Pin AIR__Pin AIR_B7_Pin */
  GPIO_InitStruct.Pin = AIR_PRE_Pin|AIR__Pin|AIR_B7_Pin;
 8002ea0:	23d0      	movs	r3, #208	@ 0xd0
 8002ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4804      	ldr	r0, [pc, #16]	@ (8002ec4 <MX_GPIO_Init+0xb0>)
 8002eb4:	f002 f856 	bl	8004f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	48000400 	.word	0x48000400

08002ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	open_AIR();
 8002ecc:	f000 f88a 	bl	8002fe4 <open_AIR>
		open_PRE();
 8002ed0:	f000 f8ce 	bl	8003070 <open_PRE>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed4:	b672      	cpsid	i
}
 8002ed6:	bf00      	nop
	__disable_irq();
  while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <Error_Handler+0x10>

08002edc <operation_main>:
	.precharge_min_start_voltage = 450.0,
	.precharge_max_end_voltage = 450.0,
	.limp_min_voltage = 34000
};

void operation_main(void){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0

	open_AIR();
 8002ee0:	f000 f880 	bl	8002fe4 <open_AIR>
	open_PRE();
 8002ee4:	f000 f8c4 	bl	8003070 <open_PRE>


	initialize();
 8002ee8:	f7fd ffdf 	bl	8000eaa <initialize>
	init_slave_cfg();
 8002eec:	f000 fb60 	bl	80035b0 <init_slave_cfg>

		status_data.pec_error_counter = 0;
 8002ef0:	4b39      	ldr	r3, [pc, #228]	@ (8002fd8 <operation_main+0xfc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
		status_data.pec_error_counter_last = 0;
 8002ef6:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <operation_main+0xfc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	661a      	str	r2, [r3, #96]	@ 0x60

		status_data.limping = 0;
 8002efc:	4b36      	ldr	r3, [pc, #216]	@ (8002fd8 <operation_main+0xfc>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	669a      	str	r2, [r3, #104]	@ 0x68
		status_data.recieved_IVT = 0;
 8002f02:	4b35      	ldr	r3, [pc, #212]	@ (8002fd8 <operation_main+0xfc>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c


		status_data.mode = 0;
 8002f0a:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <operation_main+0xfc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	711a      	strb	r2, [r3, #4]

		//Set Fans on
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8002f10:	2201      	movs	r2, #1
 8002f12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f1a:	f002 f9bd 	bl	8005298 <HAL_GPIO_WritePin>


	while(1){


		switch (status_data.mode){
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd8 <operation_main+0xfc>)
 8002f20:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d855      	bhi.n	8002fd4 <operation_main+0xf8>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <operation_main+0x54>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f97 	.word	0x08002f97
 8002f3c:	08002fa7 	.word	0x08002fa7
			case 0:
				core_routine(RETEST_YES);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f000 f961 	bl	8003208 <core_routine>
				status_data.uptime++;
 8002f46:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <operation_main+0xfc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <operation_main+0xfc>)
 8002f4e:	6013      	str	r3, [r2, #0]

			    HAL_Delay(100);
 8002f50:	2064      	movs	r0, #100	@ 0x64
 8002f52:	f000 ffeb 	bl	8003f2c <HAL_Delay>

				break;
 8002f56:	e03e      	b.n	8002fd6 <operation_main+0xfa>
			case 1:
				read_cell_voltage();
 8002f58:	f000 faca 	bl	80034f0 <read_cell_voltage>
				read_temp_measurement();
 8002f5c:	f000 faf6 	bl	800354c <read_temp_measurement>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002f60:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd8 <operation_main+0xfc>)
 8002f62:	491e      	ldr	r1, [pc, #120]	@ (8002fdc <operation_main+0x100>)
 8002f64:	2008      	movs	r0, #8
 8002f66:	f7fe ff48 	bl	8001dfa <get_minmax_voltage>
				get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd8 <operation_main+0xfc>)
 8002f6c:	491c      	ldr	r1, [pc, #112]	@ (8002fe0 <operation_main+0x104>)
 8002f6e:	2008      	movs	r0, #8
 8002f70:	f7fe feb0 	bl	8001cd4 <get_minmax_temperature>
				calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 8002f74:	4a18      	ldr	r2, [pc, #96]	@ (8002fd8 <operation_main+0xfc>)
 8002f76:	4919      	ldr	r1, [pc, #100]	@ (8002fdc <operation_main+0x100>)
 8002f78:	2008      	movs	r0, #8
 8002f7a:	f7fe fe45 	bl	8001c08 <calc_sum_of_cells>
				balance_routine();
 8002f7e:	f000 fa55 	bl	800342c <balance_routine>
				status_data.uptime++;
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <operation_main+0xfc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <operation_main+0xfc>)
 8002f8a:	6013      	str	r3, [r2, #0]
				HAL_Delay(1900);
 8002f8c:	f240 706c 	movw	r0, #1900	@ 0x76c
 8002f90:	f000 ffcc 	bl	8003f2c <HAL_Delay>

				break;
 8002f94:	e01f      	b.n	8002fd6 <operation_main+0xfa>
			case 2:

				charge_routine();
 8002f96:	f000 f8c3 	bl	8003120 <charge_routine>
				status_data.uptime++;
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <operation_main+0xfc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd8 <operation_main+0xfc>)
 8002fa2:	6013      	str	r3, [r2, #0]
				break;
 8002fa4:	e017      	b.n	8002fd6 <operation_main+0xfa>
			case 3:
				//debug_routine();
				read_cell_voltage();
 8002fa6:	f000 faa3 	bl	80034f0 <read_cell_voltage>
				read_temp_measurement();
 8002faa:	f000 facf 	bl	800354c <read_temp_measurement>
				get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8002fae:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <operation_main+0xfc>)
 8002fb0:	490b      	ldr	r1, [pc, #44]	@ (8002fe0 <operation_main+0x104>)
 8002fb2:	2008      	movs	r0, #8
 8002fb4:	f7fe fe8e 	bl	8001cd4 <get_minmax_temperature>
				get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <operation_main+0xfc>)
 8002fba:	4908      	ldr	r1, [pc, #32]	@ (8002fdc <operation_main+0x100>)
 8002fbc:	2008      	movs	r0, #8
 8002fbe:	f7fe ff1c 	bl	8001dfa <get_minmax_voltage>
				status_data.uptime++;
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <operation_main+0xfc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a03      	ldr	r2, [pc, #12]	@ (8002fd8 <operation_main+0xfc>)
 8002fca:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8002fcc:	2064      	movs	r0, #100	@ 0x64
 8002fce:	f000 ffad 	bl	8003f2c <HAL_Delay>

				break;
 8002fd2:	e000      	b.n	8002fd6 <operation_main+0xfa>
			default:
				break;
 8002fd4:	bf00      	nop
		switch (status_data.mode){
 8002fd6:	e7a2      	b.n	8002f1e <operation_main+0x42>
 8002fd8:	2000062c 	.word	0x2000062c
 8002fdc:	200002ac 	.word	0x200002ac
 8002fe0:	200003cc 	.word	0x200003cc

08002fe4 <open_AIR>:
		Data is checked against limits and a return value is generated.

	\return status of test_limits function (0: OK, -1 FAIL).
*/

void open_AIR(void){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ff2:	f002 f951 	bl	8005298 <HAL_GPIO_WritePin>
	status_data.air_s = false;
 8002ff6:	4b03      	ldr	r3, [pc, #12]	@ (8003004 <open_AIR+0x20>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000062c 	.word	0x2000062c

08003008 <close_AIR>:

void close_AIR(void){
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800300c:	2201      	movs	r2, #1
 800300e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003016:	f002 f93f 	bl	8005298 <HAL_GPIO_WritePin>
	status_data.air_s = true;
 800301a:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <close_AIR+0x20>)
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000062c 	.word	0x2000062c

0800302c <close_PRE>:

void close_PRE(void){
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8003032:	2201      	movs	r2, #1
 8003034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800303c:	f002 f92c 	bl	8005298 <HAL_GPIO_WritePin>
	status_data.pre_s = true;
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <close_PRE+0x3c>)
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

	uint8_t tx[8] ={1, 0, 0, 0, 0, 0, 0, 0 };
 8003048:	4a08      	ldr	r2, [pc, #32]	@ (800306c <close_PRE+0x40>)
 800304a:	463b      	mov	r3, r7
 800304c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003050:	e883 0003 	stmia.w	r3, {r0, r1}
	CanSend(tx, CAN_PRE_DONE);
 8003054:	463b      	mov	r3, r7
 8003056:	2199      	movs	r1, #153	@ 0x99
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff f949 	bl	80022f0 <CanSend>


}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000062c 	.word	0x2000062c
 800306c:	08009364 	.word	0x08009364

08003070 <open_PRE>:

void open_PRE(void){
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800307c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003080:	f002 f90a 	bl	8005298 <HAL_GPIO_WritePin>
	status_data.pre_s = false;
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <open_PRE+0x3c>)
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	uint8_t tx[8] ={0, 0, 0, 0, 0, 0, 0, 0 };
 800308c:	4a08      	ldr	r2, [pc, #32]	@ (80030b0 <open_PRE+0x40>)
 800308e:	463b      	mov	r3, r7
 8003090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003094:	e883 0003 	stmia.w	r3, {r0, r1}
	CanSend(tx, CAN_PRE_DONE);
 8003098:	463b      	mov	r3, r7
 800309a:	2199      	movs	r1, #153	@ 0x99
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff f927 	bl	80022f0 <CanSend>

}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000062c 	.word	0x2000062c
 80030b0:	0800936c 	.word	0x0800936c

080030b4 <AMS_OK>:

int AMS_OK(status_data_t *status_data, limit_t *limit){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
	if(status_data->min_voltage > limit->min_voltage && status_data->max_voltage < limit->max_voltage){
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	885b      	ldrh	r3, [r3, #2]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d922      	bls.n	8003110 <AMS_OK+0x5c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d21c      	bcs.n	8003110 <AMS_OK+0x5c>
		if(status_data->min_temp > limit->min_temp && status_data->max_temp < limit->max_temp){
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	dd14      	ble.n	8003110 <AMS_OK+0x5c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	da0c      	bge.n	8003110 <AMS_OK+0x5c>
			if(status_data->recieved_IVT){
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <AMS_OK+0x5c>
				close_AIR();
 8003100:	f7ff ff82 	bl	8003008 <close_AIR>
				status_data->recieved_IVT = 0;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
				return 0;
 800310c:	2300      	movs	r3, #0
 800310e:	e002      	b.n	8003116 <AMS_OK+0x62>
			}
		}
	}
	open_AIR();
 8003110:	f7ff ff68 	bl	8002fe4 <open_AIR>
	return 1;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <charge_routine>:




void charge_routine(void){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0

	uint8_t RxData2[8];
		while(ReadCANBusMessage(0x96, &RxData2)){
 8003126:	e002      	b.n	800312e <charge_routine+0xe>
			delay_u(200);
 8003128:	20c8      	movs	r0, #200	@ 0xc8
 800312a:	f7ff fb57 	bl	80027dc <delay_u>
		while(ReadCANBusMessage(0x96, &RxData2)){
 800312e:	463b      	mov	r3, r7
 8003130:	4619      	mov	r1, r3
 8003132:	2096      	movs	r0, #150	@ 0x96
 8003134:	f7ff f8fe 	bl	8002334 <ReadCANBusMessage>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f4      	bne.n	8003128 <charge_routine+0x8>
		}

	while(1){
		status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800313e:	2140      	movs	r1, #64	@ 0x40
 8003140:	482c      	ldr	r0, [pc, #176]	@ (80031f4 <charge_routine+0xd4>)
 8003142:	f002 f891 	bl	8005268 <HAL_GPIO_ReadPin>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <charge_routine+0xd8>)
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8003158:	2180      	movs	r1, #128	@ 0x80
 800315a:	4826      	ldr	r0, [pc, #152]	@ (80031f4 <charge_routine+0xd4>)
 800315c:	f002 f884 	bl	8005268 <HAL_GPIO_ReadPin>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b22      	ldr	r3, [pc, #136]	@ (80031f8 <charge_routine+0xd8>)
 800316e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8003172:	2110      	movs	r1, #16
 8003174:	481f      	ldr	r0, [pc, #124]	@ (80031f4 <charge_routine+0xd4>)
 8003176:	f002 f877 	bl	8005268 <HAL_GPIO_ReadPin>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <charge_routine+0xd8>)
 8003188:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

		empty_disch_cfg();
 800318c:	f000 f970 	bl	8003470 <empty_disch_cfg>
		read_cell_voltage();
 8003190:	f000 f9ae 	bl	80034f0 <read_cell_voltage>
		read_temp_measurement();
 8003194:	f000 f9da 	bl	800354c <read_temp_measurement>
		get_minmax_voltage(IC_NUM, cell_data, &status_data);
 8003198:	4a17      	ldr	r2, [pc, #92]	@ (80031f8 <charge_routine+0xd8>)
 800319a:	4918      	ldr	r1, [pc, #96]	@ (80031fc <charge_routine+0xdc>)
 800319c:	2008      	movs	r0, #8
 800319e:	f7fe fe2c 	bl	8001dfa <get_minmax_voltage>
		get_minmax_temperature(IC_NUM, temp_data, &status_data);
 80031a2:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <charge_routine+0xd8>)
 80031a4:	4916      	ldr	r1, [pc, #88]	@ (8003200 <charge_routine+0xe0>)
 80031a6:	2008      	movs	r0, #8
 80031a8:	f7fe fd94 	bl	8001cd4 <get_minmax_temperature>
		calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 80031ac:	4a12      	ldr	r2, [pc, #72]	@ (80031f8 <charge_routine+0xd8>)
 80031ae:	4913      	ldr	r1, [pc, #76]	@ (80031fc <charge_routine+0xdc>)
 80031b0:	2008      	movs	r0, #8
 80031b2:	f7fe fd29 	bl	8001c08 <calc_sum_of_cells>
		AMS_OK(&status_data, &limits);
 80031b6:	4913      	ldr	r1, [pc, #76]	@ (8003204 <charge_routine+0xe4>)
 80031b8:	480f      	ldr	r0, [pc, #60]	@ (80031f8 <charge_routine+0xd8>)
 80031ba:	f7ff ff7b 	bl	80030b4 <AMS_OK>
		set_fan_duty_cycle(&status_data);
 80031be:	480e      	ldr	r0, [pc, #56]	@ (80031f8 <charge_routine+0xd8>)
 80031c0:	f000 face 	bl	8003760 <set_fan_duty_cycle>

	#if IVT
		calculate_soc(&status_data);
 80031c4:	480c      	ldr	r0, [pc, #48]	@ (80031f8 <charge_routine+0xd8>)
 80031c6:	f7fe fd65 	bl	8001c94 <calculate_soc>
		precharge_compare();
 80031ca:	f000 f88b 	bl	80032e4 <precharge_compare>
		calculate_soc(&status_data);
 80031ce:	480a      	ldr	r0, [pc, #40]	@ (80031f8 <charge_routine+0xd8>)
 80031d0:	f7fe fd60 	bl	8001c94 <calculate_soc>
	#endif

	#if CAN_ENABLED

		Send_cell_data(cell_data);
 80031d4:	4809      	ldr	r0, [pc, #36]	@ (80031fc <charge_routine+0xdc>)
 80031d6:	f7ff f8d9 	bl	800238c <Send_cell_data>

		Send_temp_data(temp_data);
 80031da:	4809      	ldr	r0, [pc, #36]	@ (8003200 <charge_routine+0xe0>)
 80031dc:	f7ff f947 	bl	800246e <Send_temp_data>
		Send_Soc(&status_data);
 80031e0:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <charge_routine+0xd8>)
 80031e2:	f7ff fa73 	bl	80026cc <Send_Soc>
	#endif

		balance_routine();
 80031e6:	f000 f921 	bl	800342c <balance_routine>
		HAL_Delay(100);
 80031ea:	2064      	movs	r0, #100	@ 0x64
 80031ec:	f000 fe9e 	bl	8003f2c <HAL_Delay>
	while(1){
 80031f0:	bf00      	nop
 80031f2:	e7a4      	b.n	800313e <charge_routine+0x1e>
 80031f4:	48000400 	.word	0x48000400
 80031f8:	2000062c 	.word	0x2000062c
 80031fc:	200002ac 	.word	0x200002ac
 8003200:	200003cc 	.word	0x200003cc
 8003204:	20000000 	.word	0x20000000

08003208 <core_routine>:
}




void core_routine(int32_t retest){
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

	status_data.air_m = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8003210:	2140      	movs	r1, #64	@ 0x40
 8003212:	482f      	ldr	r0, [pc, #188]	@ (80032d0 <core_routine+0xc8>)
 8003214:	f002 f828 	bl	8005268 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b2b      	ldr	r3, [pc, #172]	@ (80032d4 <core_routine+0xcc>)
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	status_data.air_p = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800322a:	2180      	movs	r1, #128	@ 0x80
 800322c:	4828      	ldr	r0, [pc, #160]	@ (80032d0 <core_routine+0xc8>)
 800322e:	f002 f81b 	bl	8005268 <HAL_GPIO_ReadPin>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf14      	ite	ne
 8003238:	2301      	movne	r3, #1
 800323a:	2300      	moveq	r3, #0
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <core_routine+0xcc>)
 8003240:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	status_data.air_pre = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8003244:	2110      	movs	r1, #16
 8003246:	4822      	ldr	r0, [pc, #136]	@ (80032d0 <core_routine+0xc8>)
 8003248:	f002 f80e 	bl	8005268 <HAL_GPIO_ReadPin>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <core_routine+0xcc>)
 800325a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

	empty_disch_cfg();
 800325e:	f000 f907 	bl	8003470 <empty_disch_cfg>
	read_cell_voltage();
 8003262:	f000 f945 	bl	80034f0 <read_cell_voltage>
	read_temp_measurement();
 8003266:	f000 f971 	bl	800354c <read_temp_measurement>
	get_minmax_voltage(IC_NUM, cell_data, &status_data);
 800326a:	4a1a      	ldr	r2, [pc, #104]	@ (80032d4 <core_routine+0xcc>)
 800326c:	491a      	ldr	r1, [pc, #104]	@ (80032d8 <core_routine+0xd0>)
 800326e:	2008      	movs	r0, #8
 8003270:	f7fe fdc3 	bl	8001dfa <get_minmax_voltage>
	get_minmax_temperature(IC_NUM, temp_data, &status_data);
 8003274:	4a17      	ldr	r2, [pc, #92]	@ (80032d4 <core_routine+0xcc>)
 8003276:	4919      	ldr	r1, [pc, #100]	@ (80032dc <core_routine+0xd4>)
 8003278:	2008      	movs	r0, #8
 800327a:	f7fe fd2b 	bl	8001cd4 <get_minmax_temperature>
	calc_sum_of_cells(IC_NUM, cell_data, &status_data);
 800327e:	4a15      	ldr	r2, [pc, #84]	@ (80032d4 <core_routine+0xcc>)
 8003280:	4915      	ldr	r1, [pc, #84]	@ (80032d8 <core_routine+0xd0>)
 8003282:	2008      	movs	r0, #8
 8003284:	f7fe fcc0 	bl	8001c08 <calc_sum_of_cells>
	AMS_OK(&status_data, &limits);
 8003288:	4915      	ldr	r1, [pc, #84]	@ (80032e0 <core_routine+0xd8>)
 800328a:	4812      	ldr	r0, [pc, #72]	@ (80032d4 <core_routine+0xcc>)
 800328c:	f7ff ff12 	bl	80030b4 <AMS_OK>
	set_fan_duty_cycle(&status_data);
 8003290:	4810      	ldr	r0, [pc, #64]	@ (80032d4 <core_routine+0xcc>)
 8003292:	f000 fa65 	bl	8003760 <set_fan_duty_cycle>

#if IVT
	calculate_soc(&status_data);
 8003296:	480f      	ldr	r0, [pc, #60]	@ (80032d4 <core_routine+0xcc>)
 8003298:	f7fe fcfc 	bl	8001c94 <calculate_soc>
	precharge_compare();
 800329c:	f000 f822 	bl	80032e4 <precharge_compare>
	calculate_soc(&status_data);
 80032a0:	480c      	ldr	r0, [pc, #48]	@ (80032d4 <core_routine+0xcc>)
 80032a2:	f7fe fcf7 	bl	8001c94 <calculate_soc>
#endif

#if CAN_ENABLED

	Send_cell_data(cell_data);
 80032a6:	480c      	ldr	r0, [pc, #48]	@ (80032d8 <core_routine+0xd0>)
 80032a8:	f7ff f870 	bl	800238c <Send_cell_data>
	Send_temp_data(temp_data);
 80032ac:	480b      	ldr	r0, [pc, #44]	@ (80032dc <core_routine+0xd4>)
 80032ae:	f7ff f8de 	bl	800246e <Send_temp_data>
	Send_Soc(&status_data);
 80032b2:	4808      	ldr	r0, [pc, #32]	@ (80032d4 <core_routine+0xcc>)
 80032b4:	f7ff fa0a 	bl	80026cc <Send_Soc>
	Send_Min(&status_data);
 80032b8:	4806      	ldr	r0, [pc, #24]	@ (80032d4 <core_routine+0xcc>)
 80032ba:	f7ff fa59 	bl	8002770 <Send_Min>
	test_limp(&status_data, &limits);
 80032be:	4908      	ldr	r1, [pc, #32]	@ (80032e0 <core_routine+0xd8>)
 80032c0:	4804      	ldr	r0, [pc, #16]	@ (80032d4 <core_routine+0xcc>)
 80032c2:	f000 fa16 	bl	80036f2 <test_limp>
#endif

}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	48000400 	.word	0x48000400
 80032d4:	2000062c 	.word	0x2000062c
 80032d8:	200002ac 	.word	0x200002ac
 80032dc:	200003cc 	.word	0x200003cc
 80032e0:	20000000 	.word	0x20000000

080032e4 <precharge_compare>:



void precharge_compare(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0

//TODO

	float percentage;
	float pre = status_data.IVT_U1_f;
 80032ea:	4b2e      	ldr	r3, [pc, #184]	@ (80033a4 <precharge_compare+0xc0>)
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ee:	60fb      	str	r3, [r7, #12]
	float air_p = status_data.IVT_U2_f;
 80032f0:	4b2c      	ldr	r3, [pc, #176]	@ (80033a4 <precharge_compare+0xc0>)
 80032f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f4:	60bb      	str	r3, [r7, #8]
	percentage = (air_p * 100) / pre;
 80032f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80033a8 <precharge_compare+0xc4>
 80032fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003302:	ed97 7a03 	vldr	s14, [r7, #12]
 8003306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330a:	edc7 7a01 	vstr	s15, [r7, #4]
	status_data.pre_percentage = percentage;
 800330e:	4a25      	ldr	r2, [pc, #148]	@ (80033a4 <precharge_compare+0xc0>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6593      	str	r3, [r2, #88]	@ 0x58
	if (status_data.safe_state_executed == 0) {
 8003314:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <precharge_compare+0xc0>)
 8003316:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d03b      	beq.n	800339c <precharge_compare+0xb8>
		if ((percentage >= 95) && (check_voltage_match() == true) && status_data.IVT_U1_f > limits.precharge_min_start_voltage) {
 8003324:	edd7 7a01 	vldr	s15, [r7, #4]
 8003328:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80033ac <precharge_compare+0xc8>
 800332c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	db30      	blt.n	8003398 <precharge_compare+0xb4>
 8003336:	f000 f83d 	bl	80033b4 <check_voltage_match>
 800333a:	4603      	mov	r3, r0
 800333c:	2b01      	cmp	r3, #1
 800333e:	d12b      	bne.n	8003398 <precharge_compare+0xb4>
 8003340:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <precharge_compare+0xc0>)
 8003342:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003346:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <precharge_compare+0xcc>)
 8003348:	edd3 7a08 	vldr	s15, [r3, #32]
 800334c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	dd20      	ble.n	8003398 <precharge_compare+0xb4>
			if(status_data.pre_s == false)
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <precharge_compare+0xc0>)
 8003358:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800335c:	f083 0301 	eor.w	r3, r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <precharge_compare+0xae>
			{
				uint32_t starttick = HAL_GetTick();
 8003366:	f000 fdd5 	bl	8003f14 <HAL_GetTick>
 800336a:	6038      	str	r0, [r7, #0]
				while ( HAL_GetTick() - starttick < 5000 )
 800336c:	e008      	b.n	8003380 <precharge_compare+0x9c>
				{
					calculate_soc(&status_data);
 800336e:	480d      	ldr	r0, [pc, #52]	@ (80033a4 <precharge_compare+0xc0>)
 8003370:	f7fe fc90 	bl	8001c94 <calculate_soc>
					Send_Soc(&status_data);
 8003374:	480b      	ldr	r0, [pc, #44]	@ (80033a4 <precharge_compare+0xc0>)
 8003376:	f7ff f9a9 	bl	80026cc <Send_Soc>
					HAL_Delay(100);
 800337a:	2064      	movs	r0, #100	@ 0x64
 800337c:	f000 fdd6 	bl	8003f2c <HAL_Delay>
				while ( HAL_GetTick() - starttick < 5000 )
 8003380:	f000 fdc8 	bl	8003f14 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800338e:	4293      	cmp	r3, r2
 8003390:	d9ed      	bls.n	800336e <precharge_compare+0x8a>
				}
			}
			close_PRE();
 8003392:	f7ff fe4b 	bl	800302c <close_PRE>
		else
		{
			open_PRE();
		}
	}
}
 8003396:	e001      	b.n	800339c <precharge_compare+0xb8>
			open_PRE();
 8003398:	f7ff fe6a 	bl	8003070 <open_PRE>
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000062c 	.word	0x2000062c
 80033a8:	42c80000 	.word	0x42c80000
 80033ac:	42be0000 	.word	0x42be0000
 80033b0:	20000000 	.word	0x20000000

080033b4 <check_voltage_match>:

int check_voltage_match(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
	float percentage;
	float accu_volt = (float)status_data.sum_of_cells;
 80033ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <check_voltage_match+0x70>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033be:	60fb      	str	r3, [r7, #12]
	float post_volt = (float)status_data.IVT_U2_f;
 80033c0:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <check_voltage_match+0x70>)
 80033c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c4:	60bb      	str	r3, [r7, #8]
	percentage = (post_volt * 100) / accu_volt;
 80033c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ca:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003428 <check_voltage_match+0x74>
 80033ce:	ee67 6a87 	vmul.f32	s13, s15, s14
 80033d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80033d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033da:	edc7 7a01 	vstr	s15, [r7, #4]
	percentage = percentage - 100;
 80033de:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003428 <check_voltage_match+0x74>
 80033e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033ea:	edc7 7a01 	vstr	s15, [r7, #4]

	if ((percentage < 10) && (percentage > -10)) {
 80033ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80033f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fe:	d50a      	bpl.n	8003416 <check_voltage_match+0x62>
 8003400:	edd7 7a01 	vldr	s15, [r7, #4]
 8003404:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8003408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003410:	dd01      	ble.n	8003416 <check_voltage_match+0x62>
		return 1;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <check_voltage_match+0x64>
	}
	return 0;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	2000062c 	.word	0x2000062c
 8003428:	42c80000 	.word	0x42c80000

0800342c <balance_routine>:
	Discharge configuration bytes in slave_cfg_tx array are written, and
	configuration is sent to LTC-6811s. After some delay configuration is
	read back to slave_cfg_rx array.
*/
void balance_routine(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af02      	add	r7, sp, #8
	build_disch_cfg(IC_NUM, cell_data, slave_cfg_tx, &status_data, &limits);
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <balance_routine+0x30>)
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <balance_routine+0x34>)
 8003438:	4a0a      	ldr	r2, [pc, #40]	@ (8003464 <balance_routine+0x38>)
 800343a:	490b      	ldr	r1, [pc, #44]	@ (8003468 <balance_routine+0x3c>)
 800343c:	2008      	movs	r0, #8
 800343e:	f7fe fd74 	bl	8001f2a <build_disch_cfg>
	build_disch_cfgb(IC_NUM, cell_data, slave_cfgb_tx, &status_data, &limits);
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <balance_routine+0x30>)
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <balance_routine+0x34>)
 8003448:	4a08      	ldr	r2, [pc, #32]	@ (800346c <balance_routine+0x40>)
 800344a:	4907      	ldr	r1, [pc, #28]	@ (8003468 <balance_routine+0x3c>)
 800344c:	2008      	movs	r0, #8
 800344e:	f7fe fdd6 	bl	8001ffe <build_disch_cfgb>

	cfg_slaves();
 8003452:	f000 f8fd 	bl	8003650 <cfg_slaves>

}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000000 	.word	0x20000000
 8003460:	2000062c 	.word	0x2000062c
 8003464:	2000054c 	.word	0x2000054c
 8003468:	200002ac 	.word	0x200002ac
 800346c:	2000057c 	.word	0x2000057c

08003470 <empty_disch_cfg>:

void empty_disch_cfg(void){
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
	WakeUp();
 8003476:	f7fd fd0d 	bl	8000e94 <WakeUp>

	for(int i = 0; i < IC_NUM; i++){
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	e02a      	b.n	80034d6 <empty_disch_cfg+0x66>
		slave_cfg_tx[i][4] = 0x00 ;
 8003480:	4919      	ldr	r1, [pc, #100]	@ (80034e8 <empty_disch_cfg+0x78>)
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	440b      	add	r3, r1
 800348e:	3304      	adds	r3, #4
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 8003494:	4914      	ldr	r1, [pc, #80]	@ (80034e8 <empty_disch_cfg+0x78>)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	440b      	add	r3, r1
 80034a2:	3305      	adds	r3, #5
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]

		slave_cfgb_tx[i][4] = 0x00 ;
 80034a8:	4910      	ldr	r1, [pc, #64]	@ (80034ec <empty_disch_cfg+0x7c>)
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	3304      	adds	r3, #4
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
		slave_cfgb_tx[i][5] = 0x00;
 80034bc:	490b      	ldr	r1, [pc, #44]	@ (80034ec <empty_disch_cfg+0x7c>)
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	440b      	add	r3, r1
 80034ca:	3305      	adds	r3, #5
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < IC_NUM; i++){
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3301      	adds	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b07      	cmp	r3, #7
 80034da:	ddd1      	ble.n	8003480 <empty_disch_cfg+0x10>
	}

	cfg_slaves();
 80034dc:	f000 f8b8 	bl	8003650 <cfg_slaves>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	2000054c 	.word	0x2000054c
 80034ec:	2000057c 	.word	0x2000057c

080034f0 <read_cell_voltage>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_cell_voltage(void){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 80034f6:	f7fd fccd 	bl	8000e94 <WakeUp>
	adcv();
 80034fa:	f7fe fb3d 	bl	8001b78 <adcv>
	adcv_delay();
 80034fe:	f7fe fadc 	bl	8001aba <adcv_delay>

	WakeIdle();
 8003502:	f7fd fcbd 	bl	8000e80 <WakeIdle>

	for(uint8_t reg = 0; reg < 5; reg++){
 8003506:	2300      	movs	r3, #0
 8003508:	71fb      	strb	r3, [r7, #7]
 800350a:	e011      	b.n	8003530 <read_cell_voltage+0x40>
		pec = rdcv(0, IC_NUM, cell_data);
 800350c:	4a0e      	ldr	r2, [pc, #56]	@ (8003548 <read_cell_voltage+0x58>)
 800350e:	2108      	movs	r1, #8
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd ffe3 	bl	80014dc <rdcv>
 8003516:	4603      	mov	r3, r0
 8003518:	71bb      	strb	r3, [r7, #6]

		if (pec == 0) {
 800351a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <read_cell_voltage+0x36>
			return 0;
 8003522:	2300      	movs	r3, #0
 8003524:	e00b      	b.n	800353e <read_cell_voltage+0x4e>
		}
		else increase_pec_counter();
 8003526:	f000 f8b7 	bl	8003698 <increase_pec_counter>
	for(uint8_t reg = 0; reg < 5; reg++){
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	3301      	adds	r3, #1
 800352e:	71fb      	strb	r3, [r7, #7]
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d9ea      	bls.n	800350c <read_cell_voltage+0x1c>
	}
	goto_safe_state(0);
 8003536:	2000      	movs	r0, #0
 8003538:	f000 f8ce 	bl	80036d8 <goto_safe_state>
	return -1;
 800353c:	23ff      	movs	r3, #255	@ 0xff

}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200002ac 	.word	0x200002ac

0800354c <read_temp_measurement>:

	Up to five consecutive reads are performed in case a CRC (PEC) check fails.

	\return			-1 on pec error, 0 on successful read.
*/
uint8_t read_temp_measurement(void){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
	int8_t pec;
	WakeUp();
 8003552:	f7fd fc9f 	bl	8000e94 <WakeUp>
	adax();
 8003556:	f7fe fb33 	bl	8001bc0 <adax>
	adax_delay();
 800355a:	f7fe fab6 	bl	8001aca <adax_delay>
	WakeIdle();
 800355e:	f7fd fc8f 	bl	8000e80 <WakeIdle>

	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 8003562:	2300      	movs	r3, #0
 8003564:	71fb      	strb	r3, [r7, #7]
 8003566:	e015      	b.n	8003594 <read_temp_measurement+0x48>
			 pec = rdaux(0, IC_NUM, temp_data);  // pec = ltc6804_rdaux(0, IC_NUM, temp_data);
 8003568:	4a10      	ldr	r2, [pc, #64]	@ (80035ac <read_temp_measurement+0x60>)
 800356a:	2108      	movs	r1, #8
 800356c:	2000      	movs	r0, #0
 800356e:	f7fe f963 	bl	8001838 <rdaux>
 8003572:	4603      	mov	r3, r0
 8003574:	71bb      	strb	r3, [r7, #6]
			 temp_calc(IC_NUM, temp_data); // Moved out of 'if' to execute even on pec error
 8003576:	490d      	ldr	r1, [pc, #52]	@ (80035ac <read_temp_measurement+0x60>)
 8003578:	2008      	movs	r0, #8
 800357a:	f000 fad1 	bl	8003b20 <temp_calc>
			if (pec == 0) {
 800357e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <read_temp_measurement+0x3e>
				return 0;
 8003586:	2300      	movs	r3, #0
 8003588:	e00b      	b.n	80035a2 <read_temp_measurement+0x56>
			} else {
				increase_pec_counter();
 800358a:	f000 f885 	bl	8003698 <increase_pec_counter>
	for (uint8_t i = 0; i < 5; i++)	{ //for (uint8_t i = 0; i < 5; i++)	{
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	3301      	adds	r3, #1
 8003592:	71fb      	strb	r3, [r7, #7]
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	2b04      	cmp	r3, #4
 8003598:	d9e6      	bls.n	8003568 <read_temp_measurement+0x1c>
			}
		}
		goto_safe_state(0);
 800359a:	2000      	movs	r0, #0
 800359c:	f000 f89c 	bl	80036d8 <goto_safe_state>
		return -1;
 80035a0:	23ff      	movs	r3, #255	@ 0xff

}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200003cc 	.word	0x200003cc

080035b0 <init_slave_cfg>:


void init_slave_cfg(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < IC_NUM; i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	71fb      	strb	r3, [r7, #7]
 80035ba:	e03d      	b.n	8003638 <init_slave_cfg+0x88>
	{
		slave_cfg_tx[i][0] = 0xfe;
 80035bc:	79fa      	ldrb	r2, [r7, #7]
 80035be:	4923      	ldr	r1, [pc, #140]	@ (800364c <init_slave_cfg+0x9c>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	440b      	add	r3, r1
 80035ca:	22fe      	movs	r2, #254	@ 0xfe
 80035cc:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][1] = 0x00;
 80035ce:	79fa      	ldrb	r2, [r7, #7]
 80035d0:	491e      	ldr	r1, [pc, #120]	@ (800364c <init_slave_cfg+0x9c>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	440b      	add	r3, r1
 80035dc:	3301      	adds	r3, #1
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][2] = 0x00;
 80035e2:	79fa      	ldrb	r2, [r7, #7]
 80035e4:	4919      	ldr	r1, [pc, #100]	@ (800364c <init_slave_cfg+0x9c>)
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	440b      	add	r3, r1
 80035f0:	3302      	adds	r3, #2
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][3] = 0x00;
 80035f6:	79fa      	ldrb	r2, [r7, #7]
 80035f8:	4914      	ldr	r1, [pc, #80]	@ (800364c <init_slave_cfg+0x9c>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	440b      	add	r3, r1
 8003604:	3303      	adds	r3, #3
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][4] = 0x00;
 800360a:	79fa      	ldrb	r2, [r7, #7]
 800360c:	490f      	ldr	r1, [pc, #60]	@ (800364c <init_slave_cfg+0x9c>)
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	3304      	adds	r3, #4
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
		slave_cfg_tx[i][5] = 0x00;
 800361e:	79fa      	ldrb	r2, [r7, #7]
 8003620:	490a      	ldr	r1, [pc, #40]	@ (800364c <init_slave_cfg+0x9c>)
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	440b      	add	r3, r1
 800362c:	3305      	adds	r3, #5
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < IC_NUM; i++)
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	3301      	adds	r3, #1
 8003636:	71fb      	strb	r3, [r7, #7]
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	2b07      	cmp	r3, #7
 800363c:	d9be      	bls.n	80035bc <init_slave_cfg+0xc>
	}
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	2000054c 	.word	0x2000054c

08003650 <cfg_slaves>:

void cfg_slaves(void){
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
	WakeUp();
 8003654:	f7fd fc1e 	bl	8000e94 <WakeUp>
	wrcfg(IC_NUM, slave_cfg_tx);
 8003658:	490b      	ldr	r1, [pc, #44]	@ (8003688 <cfg_slaves+0x38>)
 800365a:	2008      	movs	r0, #8
 800365c:	f7fd fcc8 	bl	8000ff0 <wrcfg>
	WakeUp();
 8003660:	f7fd fc18 	bl	8000e94 <WakeUp>
	wrcfgb(IC_NUM, slave_cfgb_tx);
 8003664:	4909      	ldr	r1, [pc, #36]	@ (800368c <cfg_slaves+0x3c>)
 8003666:	2008      	movs	r0, #8
 8003668:	f7fd fdef 	bl	800124a <wrcfgb>
	delay_u(500);
 800366c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003670:	f7ff f8b4 	bl	80027dc <delay_u>
	rdcfg(IC_NUM, slave_cfg_rx);
 8003674:	4906      	ldr	r1, [pc, #24]	@ (8003690 <cfg_slaves+0x40>)
 8003676:	2008      	movs	r0, #8
 8003678:	f7fd fd50 	bl	800111c <rdcfg>
	rdcfgb(IC_NUM, slave_cfgb_rx);
 800367c:	4905      	ldr	r1, [pc, #20]	@ (8003694 <cfg_slaves+0x44>)
 800367e:	2008      	movs	r0, #8
 8003680:	f7fd fe85 	bl	800138e <rdcfgb>
}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	2000054c 	.word	0x2000054c
 800368c:	2000057c 	.word	0x2000057c
 8003690:	200005ac 	.word	0x200005ac
 8003694:	200005ec 	.word	0x200005ec

08003698 <increase_pec_counter>:

void increase_pec_counter(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
	status_data.pec_error_counter++;
 800369c:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <increase_pec_counter+0x3c>)
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a0c      	ldr	r2, [pc, #48]	@ (80036d4 <increase_pec_counter+0x3c>)
 80036a4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	status_data.pec_error_average = (float)status_data.pec_error_counter / status_data.uptime;
 80036a6:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <increase_pec_counter+0x3c>)
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b2:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <increase_pec_counter+0x3c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c2:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <increase_pec_counter+0x3c>)
 80036c4:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	2000062c 	.word	0x2000062c

080036d8 <goto_safe_state>:

void goto_safe_state(uint8_t reason)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]

	open_AIR();
 80036e2:	f7ff fc7f 	bl	8002fe4 <open_AIR>
	open_PRE();
 80036e6:	f7ff fcc3 	bl	8003070 <open_PRE>

}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <test_limp>:

void test_limp(status_data_t *status_data, limit_t *limit)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]

	if(status_data->min_voltage < limit->limp_min_voltage){
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	429a      	cmp	r2, r3
 8003706:	d223      	bcs.n	8003750 <test_limp+0x5e>
		status_data->limping = 1;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	669a      	str	r2, [r3, #104]	@ 0x68

		uint8_t data[8];

		data[0]=8;
 800370e:	2308      	movs	r3, #8
 8003710:	743b      	strb	r3, [r7, #16]
		data[1]=0;
 8003712:	2300      	movs	r3, #0
 8003714:	747b      	strb	r3, [r7, #17]
		data[2]=0;
 8003716:	2300      	movs	r3, #0
 8003718:	74bb      	strb	r3, [r7, #18]
		data[3]=(uint8_t)status_data->sum_of_cells;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003724:	edc7 7a01 	vstr	s15, [r7, #4]
 8003728:	793b      	ldrb	r3, [r7, #4]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	74fb      	strb	r3, [r7, #19]

		data[4]=status_data->limping;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003732:	b2db      	uxtb	r3, r3
 8003734:	753b      	strb	r3, [r7, #20]
		data[5]=0;
 8003736:	2300      	movs	r3, #0
 8003738:	757b      	strb	r3, [r7, #21]
		data[6]=0xAB;
 800373a:	23ab      	movs	r3, #171	@ 0xab
 800373c:	75bb      	strb	r3, [r7, #22]
		data[7]=0xCD;
 800373e:	23cd      	movs	r3, #205	@ 0xcd
 8003740:	75fb      	strb	r3, [r7, #23]

		CanSend(data, 0x08);
 8003742:	f107 0310 	add.w	r3, r7, #16
 8003746:	2108      	movs	r1, #8
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fdd1 	bl	80022f0 <CanSend>
		}
	else{
		status_data->limping = 0;
	}

}
 800374e:	e002      	b.n	8003756 <test_limp+0x64>
		status_data->limping = 0;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <set_fan_duty_cycle>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
}

void set_fan_duty_cycle(status_data_t *status_data){
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]

	if(status_data->max_temp > 39){
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800376e:	2b27      	cmp	r3, #39	@ 0x27
 8003770:	dd04      	ble.n	800377c <set_fan_duty_cycle+0x1c>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_PWM);
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <set_fan_duty_cycle+0x30>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2228      	movs	r2, #40	@ 0x28
 8003778:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else{
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 8);
	}
}
 800377a:	e003      	b.n	8003784 <set_fan_duty_cycle+0x24>
		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 8);
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <set_fan_duty_cycle+0x30>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000178 	.word	0x20000178

08003794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379a:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <HAL_MspInit+0x44>)
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	4a0e      	ldr	r2, [pc, #56]	@ (80037d8 <HAL_MspInit+0x44>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80037a6:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <HAL_MspInit+0x44>)
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_MspInit+0x44>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <HAL_MspInit+0x44>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_MspInit+0x44>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000

080037dc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b09a      	sub	sp, #104	@ 0x68
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	2244      	movs	r2, #68	@ 0x44
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f005 fb75 	bl	8008eec <memset>
  if(hfdcan->Instance==FDCAN1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a24      	ldr	r2, [pc, #144]	@ (8003898 <HAL_FDCAN_MspInit+0xbc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d141      	bne.n	8003890 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800380c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003810:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003812:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003816:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003818:	f107 0310 	add.w	r3, r7, #16
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fb25 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003828:	f7ff fb4e 	bl	8002ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <HAL_FDCAN_MspInit+0xc0>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <HAL_FDCAN_MspInit+0xc0>)
 8003832:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003836:	6593      	str	r3, [r2, #88]	@ 0x58
 8003838:	4b18      	ldr	r3, [pc, #96]	@ (800389c <HAL_FDCAN_MspInit+0xc0>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003844:	4b15      	ldr	r3, [pc, #84]	@ (800389c <HAL_FDCAN_MspInit+0xc0>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003848:	4a14      	ldr	r2, [pc, #80]	@ (800389c <HAL_FDCAN_MspInit+0xc0>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003850:	4b12      	ldr	r3, [pc, #72]	@ (800389c <HAL_FDCAN_MspInit+0xc0>)
 8003852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800385c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003860:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	2300      	movs	r3, #0
 800386c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800386e:	2309      	movs	r3, #9
 8003870:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003876:	4619      	mov	r1, r3
 8003878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800387c:	f001 fb72 	bl	8004f64 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003880:	2200      	movs	r2, #0
 8003882:	2100      	movs	r1, #0
 8003884:	2015      	movs	r0, #21
 8003886:	f000 fc4e 	bl	8004126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800388a:	2015      	movs	r0, #21
 800388c:	f000 fc65 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003890:	bf00      	nop
 8003892:	3768      	adds	r7, #104	@ 0x68
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40006400 	.word	0x40006400
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	@ 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a17      	ldr	r2, [pc, #92]	@ (800391c <HAL_SPI_MspInit+0x7c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d128      	bne.n	8003914 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038c2:	4b17      	ldr	r3, [pc, #92]	@ (8003920 <HAL_SPI_MspInit+0x80>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <HAL_SPI_MspInit+0x80>)
 80038c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80038ce:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <HAL_SPI_MspInit+0x80>)
 80038d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	4b11      	ldr	r3, [pc, #68]	@ (8003920 <HAL_SPI_MspInit+0x80>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	4a10      	ldr	r2, [pc, #64]	@ (8003920 <HAL_SPI_MspInit+0x80>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <HAL_SPI_MspInit+0x80>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038f2:	23e0      	movs	r3, #224	@ 0xe0
 80038f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003902:	2305      	movs	r3, #5
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003910:	f001 fb28 	bl	8004f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	@ 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40013000 	.word	0x40013000
 8003920:	40021000 	.word	0x40021000

08003924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <HAL_TIM_Base_MspInit+0x38>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10b      	bne.n	800394e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003936:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <HAL_TIM_Base_MspInit+0x3c>)
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <HAL_TIM_Base_MspInit+0x3c>)
 800393c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003940:	6613      	str	r3, [r2, #96]	@ 0x60
 8003942:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <HAL_TIM_Base_MspInit+0x3c>)
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40013400 	.word	0x40013400
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a11      	ldr	r2, [pc, #68]	@ (80039c8 <HAL_TIM_MspPostInit+0x64>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d11b      	bne.n	80039be <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_TIM_MspPostInit+0x68>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a10      	ldr	r2, [pc, #64]	@ (80039cc <HAL_TIM_MspPostInit+0x68>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003992:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_TIM_MspPostInit+0x68>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PB5     ------> TIM8_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800399e:	2320      	movs	r3, #32
 80039a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a2:	2302      	movs	r3, #2
 80039a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80039ae:	2303      	movs	r3, #3
 80039b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b2:	f107 030c 	add.w	r3, r7, #12
 80039b6:	4619      	mov	r1, r3
 80039b8:	4805      	ldr	r0, [pc, #20]	@ (80039d0 <HAL_TIM_MspPostInit+0x6c>)
 80039ba:	f001 fad3 	bl	8004f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80039be:	bf00      	nop
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40013400 	.word	0x40013400
 80039cc:	40021000 	.word	0x40021000
 80039d0:	48000400 	.word	0x48000400

080039d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b09a      	sub	sp, #104	@ 0x68
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039ec:	f107 0310 	add.w	r3, r7, #16
 80039f0:	2244      	movs	r2, #68	@ 0x44
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f005 fa79 	bl	8008eec <memset>
  if(huart->Instance==USART2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <HAL_UART_MspInit+0xa8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d136      	bne.n	8003a72 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a04:	2302      	movs	r3, #2
 8003a06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a0c:	f107 0310 	add.w	r3, r7, #16
 8003a10:	4618      	mov	r0, r3
 8003a12:	f002 fa2b 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a1c:	f7ff fa54 	bl	8002ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a20:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <HAL_UART_MspInit+0xac>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a24:	4a16      	ldr	r2, [pc, #88]	@ (8003a80 <HAL_UART_MspInit+0xac>)
 8003a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a2c:	4b14      	ldr	r3, [pc, #80]	@ (8003a80 <HAL_UART_MspInit+0xac>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a38:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <HAL_UART_MspInit+0xac>)
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3c:	4a10      	ldr	r2, [pc, #64]	@ (8003a80 <HAL_UART_MspInit+0xac>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <HAL_UART_MspInit+0xac>)
 8003a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003a50:	230c      	movs	r3, #12
 8003a52:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a60:	2307      	movs	r3, #7
 8003a62:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a6e:	f001 fa79 	bl	8004f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a72:	bf00      	nop
 8003a74:	3768      	adds	r7, #104	@ 0x68
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	40021000 	.word	0x40021000

08003a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <NMI_Handler+0x4>

08003a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a90:	bf00      	nop
 8003a92:	e7fd      	b.n	8003a90 <HardFault_Handler+0x4>

08003a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <MemManage_Handler+0x4>

08003a9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <BusFault_Handler+0x4>

08003aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <UsageFault_Handler+0x4>

08003aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ada:	f000 fa09 	bl	8003ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003ae8:	4802      	ldr	r0, [pc, #8]	@ (8003af4 <FDCAN1_IT0_IRQHandler+0x10>)
 8003aea:	f000 ffdb 	bl	8004aa4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200000b0 	.word	0x200000b0

08003af8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003afc:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <SystemInit+0x20>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b02:	4a05      	ldr	r2, [pc, #20]	@ (8003b18 <SystemInit+0x20>)
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000ed00 	.word	0xe000ed00
 8003b1c:	00000000 	.word	0x00000000

08003b20 <temp_calc>:

#include "temp_calc.h"
#include "math.h"
#include <stdint.h>

void temp_calc(uint8_t total_ic,  temp_data_t temp_data[][GPIO_NUM]){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b090      	sub	sp, #64	@ 0x40
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
    float v, r, t;
    float B = 3940; // B-parameter from CSV file
 8003b2c:	4bae      	ldr	r3, [pc, #696]	@ (8003de8 <temp_calc+0x2c8>)
 8003b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float R0 = 10000; // Reference resistance at 25 degrees Celsius
 8003b30:	4bae      	ldr	r3, [pc, #696]	@ (8003dec <temp_calc+0x2cc>)
 8003b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    float T0 = 298.15; // Reference temperature in Kelvin (25 degrees Celsius)
 8003b34:	4bae      	ldr	r3, [pc, #696]	@ (8003df0 <temp_calc+0x2d0>)
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24

    float R1 = 10000; // Resistance of the voltage divider in ohms
 8003b38:	4bac      	ldr	r3, [pc, #688]	@ (8003dec <temp_calc+0x2cc>)
 8003b3a:	623b      	str	r3, [r7, #32]

    for(int i = 0; i < total_ic; i++){
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b40:	e09c      	b.n	8003c7c <temp_calc+0x15c>
        for(int j = 0; j < 6; j++){
 8003b42:	2300      	movs	r3, #0
 8003b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b46:	e092      	b.n	8003c6e <temp_calc+0x14e>
        	float Vs = (float)temp_data[i][5].raw / 10000; // Source voltage in volts Vref2
 8003b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	461a      	mov	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	8a9b      	ldrh	r3, [r3, #20]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b62:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8003df4 <temp_calc+0x2d4>
 8003b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b6a:	edc7 7a03 	vstr	s15, [r7, #12]
            v = (float)temp_data[i][j].raw / 10000; // Convert raw reading to volts
 8003b6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	461a      	mov	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b80:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b8c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8003df4 <temp_calc+0x2d4>
 8003b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b94:	edc7 7a06 	vstr	s15, [r7, #24]
            r = (v * R1) / (Vs - v); // Calculate resistance of the thermistor
 8003b98:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ba0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ba4:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bb4:	edc7 7a05 	vstr	s15, [r7, #20]
            t = log(r/R0);
 8003bb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bbc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003bc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bc4:	ee16 0a90 	vmov	r0, s13
 8003bc8:	f7fc fc8a 	bl	80004e0 <__aeabi_f2d>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	ec43 2b10 	vmov	d0, r2, r3
 8003bd4:	f005 f9bc 	bl	8008f50 <log>
 8003bd8:	ec53 2b10 	vmov	r2, r3, d0
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fc ff86 	bl	8000af0 <__aeabi_d2f>
 8003be4:	4603      	mov	r3, r0
 8003be6:	613b      	str	r3, [r7, #16]
            t = t / B;
 8003be8:	edd7 6a04 	vldr	s13, [r7, #16]
 8003bec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf4:	edc7 7a04 	vstr	s15, [r7, #16]
            t = t + 1/T0;
 8003bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bfc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c04:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c0c:	edc7 7a04 	vstr	s15, [r7, #16]
            t = 1/t;
 8003c10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c14:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1c:	edc7 7a04 	vstr	s15, [r7, #16]
            t -= 273.15; // Convert from Kelvin to Celsius
 8003c20:	6938      	ldr	r0, [r7, #16]
 8003c22:	f7fc fc5d 	bl	80004e0 <__aeabi_f2d>
 8003c26:	a36e      	add	r3, pc, #440	@ (adr r3, 8003de0 <temp_calc+0x2c0>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f7fc faf8 	bl	8000220 <__aeabi_dsub>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	f7fc ff5a 	bl	8000af0 <__aeabi_d2f>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	613b      	str	r3, [r7, #16]
            temp_data[i][j].temp = (int)t;
 8003c40:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	461a      	mov	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	441a      	add	r2, r3
 8003c58:	ee17 3a90 	vmov	r3, s15
 8003c5c:	b219      	sxth	r1, r3
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	460a      	mov	r2, r1
 8003c66:	805a      	strh	r2, [r3, #2]
        for(int j = 0; j < 6; j++){
 8003c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	f77f af69 	ble.w	8003b48 <temp_calc+0x28>
    for(int i = 0; i < total_ic; i++){
 8003c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c78:	3301      	adds	r3, #1
 8003c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c80:	429a      	cmp	r2, r3
 8003c82:	f6ff af5e 	blt.w	8003b42 <temp_calc+0x22>
        }
    }

    for(int i = 0; i < total_ic; i++){
 8003c86:	2300      	movs	r3, #0
 8003c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c8a:	e09c      	b.n	8003dc6 <temp_calc+0x2a6>
    	for(int j = 6; j < 10; j++){
 8003c8c:	2306      	movs	r3, #6
 8003c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c90:	e092      	b.n	8003db8 <temp_calc+0x298>
    		float Vs = (float)temp_data[i][5].raw / 10000; // Source voltage in volts Vref2
 8003c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	8a9b      	ldrh	r3, [r3, #20]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cac:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8003df4 <temp_calc+0x2d4>
 8003cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cb4:	edc7 7a07 	vstr	s15, [r7, #28]
    		v = (float)temp_data[i][j].raw / 10000; // Convert raw reading to volts
 8003cb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cba:	4613      	mov	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cca:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cd6:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8003df4 <temp_calc+0x2d4>
 8003cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cde:	edc7 7a06 	vstr	s15, [r7, #24]
    		r = (v * R1) / (Vs - v); // Calculate resistance of the thermistor
 8003ce2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ce6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003cee:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfe:	edc7 7a05 	vstr	s15, [r7, #20]
    		t = log(r/R0);
 8003d02:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d06:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d0e:	ee16 0a90 	vmov	r0, s13
 8003d12:	f7fc fbe5 	bl	80004e0 <__aeabi_f2d>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	ec43 2b10 	vmov	d0, r2, r3
 8003d1e:	f005 f917 	bl	8008f50 <log>
 8003d22:	ec53 2b10 	vmov	r2, r3, d0
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f7fc fee1 	bl	8000af0 <__aeabi_d2f>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	613b      	str	r3, [r7, #16]
    		t = t / B;
 8003d32:	edd7 6a04 	vldr	s13, [r7, #16]
 8003d36:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3e:	edc7 7a04 	vstr	s15, [r7, #16]
    		t = t + 1/T0;
 8003d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d56:	edc7 7a04 	vstr	s15, [r7, #16]
    		t = 1/t;
 8003d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d66:	edc7 7a04 	vstr	s15, [r7, #16]
    		t -= 273.15; // Convert from Kelvin to Celsius
 8003d6a:	6938      	ldr	r0, [r7, #16]
 8003d6c:	f7fc fbb8 	bl	80004e0 <__aeabi_f2d>
 8003d70:	a31b      	add	r3, pc, #108	@ (adr r3, 8003de0 <temp_calc+0x2c0>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc fa53 	bl	8000220 <__aeabi_dsub>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	f7fc feb5 	bl	8000af0 <__aeabi_d2f>
 8003d86:	4603      	mov	r3, r0
 8003d88:	613b      	str	r3, [r7, #16]
    		temp_data[i][j].temp = (int)t;
 8003d8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	441a      	add	r2, r3
 8003da2:	ee17 3a90 	vmov	r3, s15
 8003da6:	b219      	sxth	r1, r3
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	460a      	mov	r2, r1
 8003db0:	805a      	strh	r2, [r3, #2]
    	for(int j = 6; j < 10; j++){
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	3301      	adds	r3, #1
 8003db6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	f77f af69 	ble.w	8003c92 <temp_calc+0x172>
    for(int i = 0; i < total_ic; i++){
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	f6ff af5e 	blt.w	8003c8c <temp_calc+0x16c>
    	}
    }
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3740      	adds	r7, #64	@ 0x40
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w
 8003de0:	66666666 	.word	0x66666666
 8003de4:	40711266 	.word	0x40711266
 8003de8:	45764000 	.word	0x45764000
 8003dec:	461c4000 	.word	0x461c4000
 8003df0:	43951333 	.word	0x43951333
 8003df4:	461c4000 	.word	0x461c4000

08003df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003df8:	480d      	ldr	r0, [pc, #52]	@ (8003e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003dfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dfc:	480d      	ldr	r0, [pc, #52]	@ (8003e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dfe:	490e      	ldr	r1, [pc, #56]	@ (8003e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e00:	4a0e      	ldr	r2, [pc, #56]	@ (8003e3c <LoopForever+0xe>)
  movs r3, #0
 8003e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e04:	e002      	b.n	8003e0c <LoopCopyDataInit>

08003e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e0a:	3304      	adds	r3, #4

08003e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e10:	d3f9      	bcc.n	8003e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e12:	4a0b      	ldr	r2, [pc, #44]	@ (8003e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e14:	4c0b      	ldr	r4, [pc, #44]	@ (8003e44 <LoopForever+0x16>)
  movs r3, #0
 8003e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e18:	e001      	b.n	8003e1e <LoopFillZerobss>

08003e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e1c:	3204      	adds	r2, #4

08003e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e20:	d3fb      	bcc.n	8003e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e22:	f7ff fe69 	bl	8003af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e26:	f005 f86f 	bl	8008f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e2a:	f7fe fd7b 	bl	8002924 <main>

08003e2e <LoopForever>:

LoopForever:
    b LoopForever
 8003e2e:	e7fe      	b.n	8003e2e <LoopForever>
  ldr   r0, =_estack
 8003e30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e38:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003e3c:	080097d8 	.word	0x080097d8
  ldr r2, =_sbss
 8003e40:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003e44:	200007d8 	.word	0x200007d8

08003e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC1_2_IRQHandler>

08003e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e54:	2003      	movs	r0, #3
 8003e56:	f000 f95b 	bl	8004110 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f000 f80e 	bl	8003e7c <HAL_InitTick>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	71fb      	strb	r3, [r7, #7]
 8003e6a:	e001      	b.n	8003e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e6c:	f7ff fc92 	bl	8003794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e70:	79fb      	ldrb	r3, [r7, #7]

}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e88:	4b16      	ldr	r3, [pc, #88]	@ (8003ee4 <HAL_InitTick+0x68>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d022      	beq.n	8003ed6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003e90:	4b15      	ldr	r3, [pc, #84]	@ (8003ee8 <HAL_InitTick+0x6c>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <HAL_InitTick+0x68>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f966 	bl	8004176 <HAL_SYSTICK_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10f      	bne.n	8003ed0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d809      	bhi.n	8003eca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	f000 f932 	bl	8004126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <HAL_InitTick+0x70>)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e007      	b.n	8003eda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e004      	b.n	8003eda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e001      	b.n	8003eda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000034 	.word	0x20000034
 8003ee8:	2000002c 	.word	0x2000002c
 8003eec:	20000030 	.word	0x20000030

08003ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <HAL_IncTick+0x1c>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_IncTick+0x20>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	4a03      	ldr	r2, [pc, #12]	@ (8003f0c <HAL_IncTick+0x1c>)
 8003f00:	6013      	str	r3, [r2, #0]
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	2000069c 	.word	0x2000069c
 8003f10:	20000034 	.word	0x20000034

08003f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return uwTick;
 8003f18:	4b03      	ldr	r3, [pc, #12]	@ (8003f28 <HAL_GetTick+0x14>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000069c 	.word	0x2000069c

08003f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff ffee 	bl	8003f14 <HAL_GetTick>
 8003f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d004      	beq.n	8003f50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_Delay+0x40>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f50:	bf00      	nop
 8003f52:	f7ff ffdf 	bl	8003f14 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d8f7      	bhi.n	8003f52 <HAL_Delay+0x26>
  {
  }
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000034 	.word	0x20000034

08003f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f80:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fa2:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	60d3      	str	r3, [r2, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	f003 0307 	and.w	r3, r3, #7
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	db0b      	blt.n	8003ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	f003 021f 	and.w	r2, r3, #31
 8003fec:	4907      	ldr	r1, [pc, #28]	@ (800400c <__NVIC_EnableIRQ+0x38>)
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	e000e100 	.word	0xe000e100

08004010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	6039      	str	r1, [r7, #0]
 800401a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004020:	2b00      	cmp	r3, #0
 8004022:	db0a      	blt.n	800403a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	b2da      	uxtb	r2, r3
 8004028:	490c      	ldr	r1, [pc, #48]	@ (800405c <__NVIC_SetPriority+0x4c>)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	0112      	lsls	r2, r2, #4
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	440b      	add	r3, r1
 8004034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004038:	e00a      	b.n	8004050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4908      	ldr	r1, [pc, #32]	@ (8004060 <__NVIC_SetPriority+0x50>)
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	3b04      	subs	r3, #4
 8004048:	0112      	lsls	r2, r2, #4
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	440b      	add	r3, r1
 800404e:	761a      	strb	r2, [r3, #24]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000e100 	.word	0xe000e100
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004064:	b480      	push	{r7}
 8004066:	b089      	sub	sp, #36	@ 0x24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f1c3 0307 	rsb	r3, r3, #7
 800407e:	2b04      	cmp	r3, #4
 8004080:	bf28      	it	cs
 8004082:	2304      	movcs	r3, #4
 8004084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3304      	adds	r3, #4
 800408a:	2b06      	cmp	r3, #6
 800408c:	d902      	bls.n	8004094 <NVIC_EncodePriority+0x30>
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3b03      	subs	r3, #3
 8004092:	e000      	b.n	8004096 <NVIC_EncodePriority+0x32>
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004098:	f04f 32ff 	mov.w	r2, #4294967295
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43da      	mvns	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	401a      	ands	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040ac:	f04f 31ff 	mov.w	r1, #4294967295
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	43d9      	mvns	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040bc:	4313      	orrs	r3, r2
         );
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3724      	adds	r7, #36	@ 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040dc:	d301      	bcc.n	80040e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040de:	2301      	movs	r3, #1
 80040e0:	e00f      	b.n	8004102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040e2:	4a0a      	ldr	r2, [pc, #40]	@ (800410c <SysTick_Config+0x40>)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ea:	210f      	movs	r1, #15
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	f7ff ff8e 	bl	8004010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <SysTick_Config+0x40>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040fa:	4b04      	ldr	r3, [pc, #16]	@ (800410c <SysTick_Config+0x40>)
 80040fc:	2207      	movs	r2, #7
 80040fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	e000e010 	.word	0xe000e010

08004110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff29 	bl	8003f70 <__NVIC_SetPriorityGrouping>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004134:	f7ff ff40 	bl	8003fb8 <__NVIC_GetPriorityGrouping>
 8004138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff ff90 	bl	8004064 <NVIC_EncodePriority>
 8004144:	4602      	mov	r2, r0
 8004146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff5f 	bl	8004010 <__NVIC_SetPriority>
}
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	4603      	mov	r3, r0
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff33 	bl	8003fd4 <__NVIC_EnableIRQ>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffa4 	bl	80040cc <SysTick_Config>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e147      	b.n	8004432 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fb10 	bl	80037dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0210 	bic.w	r2, r2, #16
 80041ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041cc:	f7ff fea2 	bl	8003f14 <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041d2:	e012      	b.n	80041fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041d4:	f7ff fe9e 	bl	8003f14 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b0a      	cmp	r3, #10
 80041e0:	d90b      	bls.n	80041fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e6:	f043 0201 	orr.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2203      	movs	r2, #3
 80041f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e11b      	b.n	8004432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d0e5      	beq.n	80041d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004218:	f7ff fe7c 	bl	8003f14 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800421e:	e012      	b.n	8004246 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004220:	f7ff fe78 	bl	8003f14 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b0a      	cmp	r3, #10
 800422c:	d90b      	bls.n	8004246 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0f5      	b.n	8004432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0e5      	beq.n	8004220 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0202 	orr.w	r2, r2, #2
 8004262:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a74      	ldr	r2, [pc, #464]	@ (800443c <HAL_FDCAN_Init+0x2ac>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d103      	bne.n	8004276 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800426e:	4a74      	ldr	r2, [pc, #464]	@ (8004440 <HAL_FDCAN_Init+0x2b0>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7c1b      	ldrb	r3, [r3, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d108      	bne.n	8004290 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800428c:	619a      	str	r2, [r3, #24]
 800428e:	e007      	b.n	80042a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800429e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7c5b      	ldrb	r3, [r3, #17]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d108      	bne.n	80042ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042b6:	619a      	str	r2, [r3, #24]
 80042b8:	e007      	b.n	80042ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7c9b      	ldrb	r3, [r3, #18]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d108      	bne.n	80042e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042e0:	619a      	str	r2, [r3, #24]
 80042e2:	e007      	b.n	80042f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004318:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0210 	bic.w	r2, r2, #16
 8004328:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d108      	bne.n	8004344 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0204 	orr.w	r2, r2, #4
 8004340:	619a      	str	r2, [r3, #24]
 8004342:	e02c      	b.n	800439e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d028      	beq.n	800439e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d01c      	beq.n	800438e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004362:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0210 	orr.w	r2, r2, #16
 8004372:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d110      	bne.n	800439e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0220 	orr.w	r2, r2, #32
 800438a:	619a      	str	r2, [r3, #24]
 800438c:	e007      	b.n	800439e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0220 	orr.w	r2, r2, #32
 800439c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	3b01      	subs	r3, #1
 80043c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d2:	d115      	bne.n	8004400 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	3b01      	subs	r3, #1
 80043e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	3b01      	subs	r3, #1
 80043ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	3b01      	subs	r3, #1
 80043f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fcd2 	bl	8004dc0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40006400 	.word	0x40006400
 8004440:	40006500 	.word	0x40006500

08004444 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004454:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d002      	beq.n	8004462 <HAL_FDCAN_ConfigFilter+0x1e>
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d13d      	bne.n	80044de <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d119      	bne.n	800449e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004476:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800447e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e01d      	b.n	80044da <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	075a      	lsls	r2, r3, #29
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	079a      	lsls	r2, r3, #30
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3304      	adds	r3, #4
 80044d2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e006      	b.n	80044ec <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0202 	orr.w	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d116      	bne.n	8004540 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	011a      	lsls	r2, r3, #4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	431a      	orrs	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	431a      	orrs	r2, r3
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e006      	b.n	800454e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d11f      	bne.n	80045b2 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b40      	cmp	r3, #64	@ 0x40
 8004576:	d10d      	bne.n	8004594 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004580:	f423 7100 	bic.w	r1, r3, #512	@ 0x200
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	025a      	lsls	r2, r3, #9
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004592:	e00c      	b.n	80045ae <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Return function status */
    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e006      	b.n	80045c0 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b6:	f043 0204 	orr.w	r2, r3, #4
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d110      	bne.n	8004602 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0201 	bic.w	r2, r2, #1
 80045f6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e006      	b.n	8004610 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d12c      	bne.n	800468e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800463c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004648:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e023      	b.n	800469c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fbfe 	bl	8004e6c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2101      	movs	r1, #1
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	fa01 f202 	lsl.w	r2, r1, r2
 800467c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004680:	2201      	movs	r2, #1
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	409a      	lsls	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e006      	b.n	800469c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004692:	f043 0208 	orr.w	r2, r3, #8
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b08b      	sub	sp, #44	@ 0x2c
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046bc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80046be:	7efb      	ldrb	r3, [r7, #27]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	f040 80e8 	bne.w	8004896 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b40      	cmp	r3, #64	@ 0x40
 80046ca:	d137      	bne.n	800473c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0db      	b.n	80048a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f4:	0e1b      	lsrs	r3, r3, #24
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10a      	bne.n	8004714 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004706:	0a5b      	lsrs	r3, r3, #9
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004710:	2301      	movs	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	440b      	add	r3, r1
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
 800473a:	e036      	b.n	80047aa <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004750:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0a3      	b.n	80048a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004764:	0e1b      	lsrs	r3, r3, #24
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d10a      	bne.n	8004784 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004780:	2301      	movs	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	4613      	mov	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	440b      	add	r3, r1
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d107      	bne.n	80047ce <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	0c9b      	lsrs	r3, r3, #18
 80047c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e005      	b.n	80047da <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	3304      	adds	r3, #4
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e1b      	lsrs	r3, r3, #24
 800482e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	0fda      	lsrs	r2, r3, #31
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	3304      	adds	r3, #4
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	e00a      	b.n	8004866 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	441a      	add	r2, r3
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	440b      	add	r3, r1
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	3301      	adds	r3, #1
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	4a11      	ldr	r2, [pc, #68]	@ (80048b0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800486c:	5cd3      	ldrb	r3, [r2, r3]
 800486e:	461a      	mov	r2, r3
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	4293      	cmp	r3, r2
 8004874:	d3ec      	bcc.n	8004850 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b40      	cmp	r3, #64	@ 0x40
 800487a:	d105      	bne.n	8004888 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004886:	e004      	b.n	8004892 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e006      	b.n	80048a4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489a:	f043 0208 	orr.w	r2, r3, #8
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
  }
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	372c      	adds	r7, #44	@ 0x2c
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	0800978c 	.word	0x0800978c

080048b4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80048ca:	68fb      	ldr	r3, [r7, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048ea:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d003      	beq.n	80048fa <HAL_FDCAN_ActivateNotification+0x22>
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	f040 80c8 	bne.w	8004a8a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004900:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d03b      	beq.n	800498e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d031      	beq.n	800498e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d027      	beq.n	800498e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01d      	beq.n	800498e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d13b      	bne.n	8004a2a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d131      	bne.n	8004a2a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d127      	bne.n	8004a2a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11d      	bne.n	8004a2a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d113      	bne.n	8004a2a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0202 	orr.w	r2, r2, #2
 8004a38:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e006      	b.n	8004a98 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8e:	f043 0202 	orr.w	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	@ 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad8:	4013      	ands	r3, r2
 8004ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af0:	4013      	ands	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004afe:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b06:	6a3a      	ldr	r2, [r7, #32]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b12:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004b16:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b32:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2240      	movs	r2, #64	@ 0x40
 8004b4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f916 	bl	8004d82 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d019      	beq.n	8004b94 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b72:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b8c:	6939      	ldr	r1, [r7, #16]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8d8 	bl	8004d44 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8a2 	bl	8004cee <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bb6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fd fb4a 	bl	8002254 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bcc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004bce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f897 	bl	8004d04 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00c      	beq.n	8004bfa <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f890 	bl	8004d1a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d018      	beq.n	8004c36 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d013      	beq.n	8004c36 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004c16:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4013      	ands	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2280      	movs	r2, #128	@ 0x80
 8004c2c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f87c 	bl	8004d2e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00c      	beq.n	8004c5a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f880 	bl	8004d5a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004c76:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f878 	bl	8004d6e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004cb6:	69f9      	ldr	r1, [r7, #28]
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f876 	bl	8004daa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f858 	bl	8004d96 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3730      	adds	r7, #48	@ 0x30
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004dc8:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004dca:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dda:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de2:	041a      	lsls	r2, r3, #16
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e00:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	061a      	lsls	r2, r3, #24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e005      	b.n	8004e4e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3f3      	bcc.n	8004e42 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	4000a400 	.word	0x4000a400

08004e6c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b089      	sub	sp, #36	@ 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e8a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e00a      	b.n	8004eae <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004ea0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004ea6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eac:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004eb8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004ebe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004ec4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	440b      	add	r3, r1
 8004ee0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	3304      	adds	r3, #4
 8004eec:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e020      	b.n	8004f42 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	3303      	adds	r3, #3
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3302      	adds	r3, #2
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	440b      	add	r3, r1
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f18:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	440b      	add	r3, r1
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f26:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f30:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	4a06      	ldr	r2, [pc, #24]	@ (8004f60 <FDCAN_CopyMessageToRAM+0xf4>)
 8004f48:	5cd3      	ldrb	r3, [r2, r3]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d3d6      	bcc.n	8004f00 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	3724      	adds	r7, #36	@ 0x24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	0800978c 	.word	0x0800978c

08004f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f72:	e15a      	b.n	800522a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	2101      	movs	r1, #1
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 814c 	beq.w	8005224 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d005      	beq.n	8004fa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d130      	bne.n	8005006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fda:	2201      	movs	r2, #1
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0201 	and.w	r2, r3, #1
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d017      	beq.n	8005042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	2203      	movs	r2, #3
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4013      	ands	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d123      	bne.n	8005096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	08da      	lsrs	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3208      	adds	r2, #8
 8005056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	220f      	movs	r2, #15
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	08da      	lsrs	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3208      	adds	r2, #8
 8005090:	6939      	ldr	r1, [r7, #16]
 8005092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	2203      	movs	r2, #3
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 0203 	and.w	r2, r3, #3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80a6 	beq.w	8005224 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005248 <HAL_GPIO_Init+0x2e4>)
 80050da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005248 <HAL_GPIO_Init+0x2e4>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80050e4:	4b58      	ldr	r3, [pc, #352]	@ (8005248 <HAL_GPIO_Init+0x2e4>)
 80050e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050f0:	4a56      	ldr	r2, [pc, #344]	@ (800524c <HAL_GPIO_Init+0x2e8>)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	089b      	lsrs	r3, r3, #2
 80050f6:	3302      	adds	r3, #2
 80050f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	220f      	movs	r2, #15
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800511a:	d01f      	beq.n	800515c <HAL_GPIO_Init+0x1f8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a4c      	ldr	r2, [pc, #304]	@ (8005250 <HAL_GPIO_Init+0x2ec>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d019      	beq.n	8005158 <HAL_GPIO_Init+0x1f4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a4b      	ldr	r2, [pc, #300]	@ (8005254 <HAL_GPIO_Init+0x2f0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_GPIO_Init+0x1f0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a4a      	ldr	r2, [pc, #296]	@ (8005258 <HAL_GPIO_Init+0x2f4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00d      	beq.n	8005150 <HAL_GPIO_Init+0x1ec>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a49      	ldr	r2, [pc, #292]	@ (800525c <HAL_GPIO_Init+0x2f8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <HAL_GPIO_Init+0x1e8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a48      	ldr	r2, [pc, #288]	@ (8005260 <HAL_GPIO_Init+0x2fc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <HAL_GPIO_Init+0x1e4>
 8005144:	2305      	movs	r3, #5
 8005146:	e00a      	b.n	800515e <HAL_GPIO_Init+0x1fa>
 8005148:	2306      	movs	r3, #6
 800514a:	e008      	b.n	800515e <HAL_GPIO_Init+0x1fa>
 800514c:	2304      	movs	r3, #4
 800514e:	e006      	b.n	800515e <HAL_GPIO_Init+0x1fa>
 8005150:	2303      	movs	r3, #3
 8005152:	e004      	b.n	800515e <HAL_GPIO_Init+0x1fa>
 8005154:	2302      	movs	r3, #2
 8005156:	e002      	b.n	800515e <HAL_GPIO_Init+0x1fa>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_GPIO_Init+0x1fa>
 800515c:	2300      	movs	r3, #0
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	f002 0203 	and.w	r2, r2, #3
 8005164:	0092      	lsls	r2, r2, #2
 8005166:	4093      	lsls	r3, r2
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800516e:	4937      	ldr	r1, [pc, #220]	@ (800524c <HAL_GPIO_Init+0x2e8>)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	089b      	lsrs	r3, r3, #2
 8005174:	3302      	adds	r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800517c:	4b39      	ldr	r3, [pc, #228]	@ (8005264 <HAL_GPIO_Init+0x300>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	43db      	mvns	r3, r3
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4013      	ands	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051a0:	4a30      	ldr	r2, [pc, #192]	@ (8005264 <HAL_GPIO_Init+0x300>)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005264 <HAL_GPIO_Init+0x300>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4013      	ands	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051ca:	4a26      	ldr	r2, [pc, #152]	@ (8005264 <HAL_GPIO_Init+0x300>)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80051d0:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <HAL_GPIO_Init+0x300>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	43db      	mvns	r3, r3
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4013      	ands	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <HAL_GPIO_Init+0x300>)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80051fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <HAL_GPIO_Init+0x300>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	43db      	mvns	r3, r3
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800521e:	4a11      	ldr	r2, [pc, #68]	@ (8005264 <HAL_GPIO_Init+0x300>)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3301      	adds	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	f47f ae9d 	bne.w	8004f74 <HAL_GPIO_Init+0x10>
  }
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40021000 	.word	0x40021000
 800524c:	40010000 	.word	0x40010000
 8005250:	48000400 	.word	0x48000400
 8005254:	48000800 	.word	0x48000800
 8005258:	48000c00 	.word	0x48000c00
 800525c:	48001000 	.word	0x48001000
 8005260:	48001400 	.word	0x48001400
 8005264:	40010400 	.word	0x40010400

08005268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	887b      	ldrh	r3, [r7, #2]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e001      	b.n	800528a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
 80052a4:	4613      	mov	r3, r2
 80052a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a8:	787b      	ldrb	r3, [r7, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052b4:	e002      	b.n	80052bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052b6:	887a      	ldrh	r2, [r7, #2]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d141      	bne.n	800535a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e2:	d131      	bne.n	8005348 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e4:	4b47      	ldr	r3, [pc, #284]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ea:	4a46      	ldr	r2, [pc, #280]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f4:	4b43      	ldr	r3, [pc, #268]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052fc:	4a41      	ldr	r2, [pc, #260]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005302:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005304:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2232      	movs	r2, #50	@ 0x32
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	4a3f      	ldr	r2, [pc, #252]	@ (800540c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	0c9b      	lsrs	r3, r3, #18
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531a:	e002      	b.n	8005322 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3b01      	subs	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005322:	4b38      	ldr	r3, [pc, #224]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532e:	d102      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f2      	bne.n	800531c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005336:	4b33      	ldr	r3, [pc, #204]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005342:	d158      	bne.n	80053f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e057      	b.n	80053f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005348:	4b2e      	ldr	r3, [pc, #184]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800534e:	4a2d      	ldr	r2, [pc, #180]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005354:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005358:	e04d      	b.n	80053f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005360:	d141      	bne.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005362:	4b28      	ldr	r3, [pc, #160]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536e:	d131      	bne.n	80053d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005370:	4b24      	ldr	r3, [pc, #144]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005376:	4a23      	ldr	r2, [pc, #140]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005380:	4b20      	ldr	r3, [pc, #128]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005388:	4a1e      	ldr	r2, [pc, #120]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800538e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2232      	movs	r2, #50	@ 0x32
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	4a1c      	ldr	r2, [pc, #112]	@ (800540c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	0c9b      	lsrs	r3, r3, #18
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053a6:	e002      	b.n	80053ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ae:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ba:	d102      	bne.n	80053c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f2      	bne.n	80053a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053c2:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ce:	d112      	bne.n	80053f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e011      	b.n	80053f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053da:	4a0a      	ldr	r2, [pc, #40]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053e4:	e007      	b.n	80053f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053e6:	4b07      	ldr	r3, [pc, #28]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053ee:	4a05      	ldr	r2, [pc, #20]	@ (8005404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40007000 	.word	0x40007000
 8005408:	2000002c 	.word	0x2000002c
 800540c:	431bde83 	.word	0x431bde83

08005410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e2fe      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d075      	beq.n	800551a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800542e:	4b97      	ldr	r3, [pc, #604]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005438:	4b94      	ldr	r3, [pc, #592]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b0c      	cmp	r3, #12
 8005446:	d102      	bne.n	800544e <HAL_RCC_OscConfig+0x3e>
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b03      	cmp	r3, #3
 800544c:	d002      	beq.n	8005454 <HAL_RCC_OscConfig+0x44>
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d10b      	bne.n	800546c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005454:	4b8d      	ldr	r3, [pc, #564]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05b      	beq.n	8005518 <HAL_RCC_OscConfig+0x108>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d157      	bne.n	8005518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e2d9      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005474:	d106      	bne.n	8005484 <HAL_RCC_OscConfig+0x74>
 8005476:	4b85      	ldr	r3, [pc, #532]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a84      	ldr	r2, [pc, #528]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 800547c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e01d      	b.n	80054c0 <HAL_RCC_OscConfig+0xb0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x98>
 800548e:	4b7f      	ldr	r3, [pc, #508]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7e      	ldr	r2, [pc, #504]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b7c      	ldr	r3, [pc, #496]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a7b      	ldr	r2, [pc, #492]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e00b      	b.n	80054c0 <HAL_RCC_OscConfig+0xb0>
 80054a8:	4b78      	ldr	r3, [pc, #480]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a77      	ldr	r2, [pc, #476]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80054ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4b75      	ldr	r3, [pc, #468]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a74      	ldr	r2, [pc, #464]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80054ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d013      	beq.n	80054f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fe fd24 	bl	8003f14 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d0:	f7fe fd20 	bl	8003f14 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	@ 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e29e      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054e2:	4b6a      	ldr	r3, [pc, #424]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0xc0>
 80054ee:	e014      	b.n	800551a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fe fd10 	bl	8003f14 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f8:	f7fe fd0c 	bl	8003f14 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	@ 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e28a      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800550a:	4b60      	ldr	r3, [pc, #384]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0xe8>
 8005516:	e000      	b.n	800551a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d075      	beq.n	8005612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005526:	4b59      	ldr	r3, [pc, #356]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005530:	4b56      	ldr	r3, [pc, #344]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d102      	bne.n	8005546 <HAL_RCC_OscConfig+0x136>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b02      	cmp	r3, #2
 8005544:	d002      	beq.n	800554c <HAL_RCC_OscConfig+0x13c>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d11f      	bne.n	800558c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800554c:	4b4f      	ldr	r3, [pc, #316]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_OscConfig+0x154>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e25d      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005564:	4b49      	ldr	r3, [pc, #292]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	4946      	ldr	r1, [pc, #280]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005578:	4b45      	ldr	r3, [pc, #276]	@ (8005690 <HAL_RCC_OscConfig+0x280>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe fc7d 	bl	8003e7c <HAL_InitTick>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d043      	beq.n	8005610 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e249      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d023      	beq.n	80055dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005594:	4b3d      	ldr	r3, [pc, #244]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a3c      	ldr	r2, [pc, #240]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 800559a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fe fcb8 	bl	8003f14 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a8:	f7fe fcb4 	bl	8003f14 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e232      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055ba:	4b34      	ldr	r3, [pc, #208]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b31      	ldr	r3, [pc, #196]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	492d      	ldr	r1, [pc, #180]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
 80055da:	e01a      	b.n	8005612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055dc:	4b2b      	ldr	r3, [pc, #172]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2a      	ldr	r2, [pc, #168]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 80055e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fe fc94 	bl	8003f14 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f0:	f7fe fc90 	bl	8003f14 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e20e      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005602:	4b22      	ldr	r3, [pc, #136]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x1e0>
 800560e:	e000      	b.n	8005612 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d041      	beq.n	80056a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01c      	beq.n	8005660 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800562c:	4a17      	ldr	r2, [pc, #92]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005636:	f7fe fc6d 	bl	8003f14 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563e:	f7fe fc69 	bl	8003f14 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1e7      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005650:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0ef      	beq.n	800563e <HAL_RCC_OscConfig+0x22e>
 800565e:	e020      	b.n	80056a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005660:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005666:	4a09      	ldr	r2, [pc, #36]	@ (800568c <HAL_RCC_OscConfig+0x27c>)
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fe fc50 	bl	8003f14 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005676:	e00d      	b.n	8005694 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005678:	f7fe fc4c 	bl	8003f14 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d906      	bls.n	8005694 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e1ca      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
 800568a:	bf00      	nop
 800568c:	40021000 	.word	0x40021000
 8005690:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005694:	4b8c      	ldr	r3, [pc, #560]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ea      	bne.n	8005678 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80a6 	beq.w	80057fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b0:	2300      	movs	r3, #0
 80056b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056b4:	4b84      	ldr	r3, [pc, #528]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_OscConfig+0x2b4>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x2b6>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	4b7f      	ldr	r3, [pc, #508]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ce:	4a7e      	ldr	r2, [pc, #504]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80056d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80056d6:	4b7c      	ldr	r3, [pc, #496]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056e2:	2301      	movs	r3, #1
 80056e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e6:	4b79      	ldr	r3, [pc, #484]	@ (80058cc <HAL_RCC_OscConfig+0x4bc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d118      	bne.n	8005724 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056f2:	4b76      	ldr	r3, [pc, #472]	@ (80058cc <HAL_RCC_OscConfig+0x4bc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a75      	ldr	r2, [pc, #468]	@ (80058cc <HAL_RCC_OscConfig+0x4bc>)
 80056f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fe:	f7fe fc09 	bl	8003f14 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005706:	f7fe fc05 	bl	8003f14 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e183      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005718:	4b6c      	ldr	r3, [pc, #432]	@ (80058cc <HAL_RCC_OscConfig+0x4bc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d108      	bne.n	800573e <HAL_RCC_OscConfig+0x32e>
 800572c:	4b66      	ldr	r3, [pc, #408]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005732:	4a65      	ldr	r2, [pc, #404]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800573c:	e024      	b.n	8005788 <HAL_RCC_OscConfig+0x378>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b05      	cmp	r3, #5
 8005744:	d110      	bne.n	8005768 <HAL_RCC_OscConfig+0x358>
 8005746:	4b60      	ldr	r3, [pc, #384]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574c:	4a5e      	ldr	r2, [pc, #376]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005756:	4b5c      	ldr	r3, [pc, #368]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575c:	4a5a      	ldr	r2, [pc, #360]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005766:	e00f      	b.n	8005788 <HAL_RCC_OscConfig+0x378>
 8005768:	4b57      	ldr	r3, [pc, #348]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576e:	4a56      	ldr	r2, [pc, #344]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005778:	4b53      	ldr	r3, [pc, #332]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577e:	4a52      	ldr	r2, [pc, #328]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005790:	f7fe fbc0 	bl	8003f14 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005796:	e00a      	b.n	80057ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fe fbbc 	bl	8003f14 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e138      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ae:	4b46      	ldr	r3, [pc, #280]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0ed      	beq.n	8005798 <HAL_RCC_OscConfig+0x388>
 80057bc:	e015      	b.n	80057ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057be:	f7fe fba9 	bl	8003f14 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c4:	e00a      	b.n	80057dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fe fba5 	bl	8003f14 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e121      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057dc:	4b3a      	ldr	r3, [pc, #232]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1ed      	bne.n	80057c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057ea:	7ffb      	ldrb	r3, [r7, #31]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d105      	bne.n	80057fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f0:	4b35      	ldr	r3, [pc, #212]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80057f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f4:	4a34      	ldr	r2, [pc, #208]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d03c      	beq.n	8005882 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01c      	beq.n	800584a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005810:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005816:	4a2c      	ldr	r2, [pc, #176]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fe fb78 	bl	8003f14 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005828:	f7fe fb74 	bl	8003f14 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e0f2      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800583a:	4b23      	ldr	r3, [pc, #140]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800583c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ef      	beq.n	8005828 <HAL_RCC_OscConfig+0x418>
 8005848:	e01b      	b.n	8005882 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800584a:	4b1f      	ldr	r3, [pc, #124]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800584c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005850:	4a1d      	ldr	r2, [pc, #116]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fe fb5b 	bl	8003f14 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005862:	f7fe fb57 	bl	8003f14 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e0d5      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005874:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 8005876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1ef      	bne.n	8005862 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80c9 	beq.w	8005a1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800588c:	4b0e      	ldr	r3, [pc, #56]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 030c 	and.w	r3, r3, #12
 8005894:	2b0c      	cmp	r3, #12
 8005896:	f000 8083 	beq.w	80059a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d15e      	bne.n	8005960 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a2:	4b09      	ldr	r3, [pc, #36]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a08      	ldr	r2, [pc, #32]	@ (80058c8 <HAL_RCC_OscConfig+0x4b8>)
 80058a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ae:	f7fe fb31 	bl	8003f14 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b4:	e00c      	b.n	80058d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b6:	f7fe fb2d 	bl	8003f14 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d905      	bls.n	80058d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e0ab      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
 80058c8:	40021000 	.word	0x40021000
 80058cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d0:	4b55      	ldr	r3, [pc, #340]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ec      	bne.n	80058b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058dc:	4b52      	ldr	r3, [pc, #328]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	4b52      	ldr	r3, [pc, #328]	@ (8005a2c <HAL_RCC_OscConfig+0x61c>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6a11      	ldr	r1, [r2, #32]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	4311      	orrs	r1, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058f6:	0212      	lsls	r2, r2, #8
 80058f8:	4311      	orrs	r1, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058fe:	0852      	lsrs	r2, r2, #1
 8005900:	3a01      	subs	r2, #1
 8005902:	0552      	lsls	r2, r2, #21
 8005904:	4311      	orrs	r1, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800590a:	0852      	lsrs	r2, r2, #1
 800590c:	3a01      	subs	r2, #1
 800590e:	0652      	lsls	r2, r2, #25
 8005910:	4311      	orrs	r1, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005916:	06d2      	lsls	r2, r2, #27
 8005918:	430a      	orrs	r2, r1
 800591a:	4943      	ldr	r1, [pc, #268]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 800591c:	4313      	orrs	r3, r2
 800591e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005920:	4b41      	ldr	r3, [pc, #260]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a40      	ldr	r2, [pc, #256]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800592a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800592c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4a3d      	ldr	r2, [pc, #244]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005936:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fe faec 	bl	8003f14 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005940:	f7fe fae8 	bl	8003f14 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e066      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005952:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x530>
 800595e:	e05e      	b.n	8005a1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005960:	4b31      	ldr	r3, [pc, #196]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a30      	ldr	r2, [pc, #192]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800596a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fe fad2 	bl	8003f14 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005974:	f7fe face 	bl	8003f14 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e04c      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005986:	4b28      	ldr	r3, [pc, #160]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005992:	4b25      	ldr	r3, [pc, #148]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	4924      	ldr	r1, [pc, #144]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 8005998:	4b25      	ldr	r3, [pc, #148]	@ (8005a30 <HAL_RCC_OscConfig+0x620>)
 800599a:	4013      	ands	r3, r2
 800599c:	60cb      	str	r3, [r1, #12]
 800599e:	e03e      	b.n	8005a1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e039      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80059ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005a28 <HAL_RCC_OscConfig+0x618>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 0203 	and.w	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d12c      	bne.n	8005a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	3b01      	subs	r3, #1
 80059cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d123      	bne.n	8005a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d11b      	bne.n	8005a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d113      	bne.n	8005a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	3b01      	subs	r3, #1
 8005a00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d109      	bne.n	8005a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	3b01      	subs	r3, #1
 8005a14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d001      	beq.n	8005a1e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	019f800c 	.word	0x019f800c
 8005a30:	feeefffc 	.word	0xfeeefffc

08005a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e11e      	b.n	8005c8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b91      	ldr	r3, [pc, #580]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d910      	bls.n	8005a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b8e      	ldr	r3, [pc, #568]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 020f 	bic.w	r2, r3, #15
 8005a62:	498c      	ldr	r1, [pc, #560]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b8a      	ldr	r3, [pc, #552]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e106      	b.n	8005c8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d073      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d129      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a90:	4b81      	ldr	r3, [pc, #516]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0f4      	b.n	8005c8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005aa0:	f000 f99e 	bl	8005de0 <RCC_GetSysClockFreqFromPLLSource>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4a7c      	ldr	r2, [pc, #496]	@ (8005c9c <HAL_RCC_ClockConfig+0x268>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d93f      	bls.n	8005b2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005aae:	4b7a      	ldr	r3, [pc, #488]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d033      	beq.n	8005b2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d12f      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ace:	4b72      	ldr	r3, [pc, #456]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ad6:	4a70      	ldr	r2, [pc, #448]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005adc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ade:	2380      	movs	r3, #128	@ 0x80
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e024      	b.n	8005b2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aec:	4b6a      	ldr	r3, [pc, #424]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0c6      	b.n	8005c8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005afc:	4b66      	ldr	r3, [pc, #408]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0be      	b.n	8005c8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b0c:	f000 f8ce 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4a61      	ldr	r2, [pc, #388]	@ (8005c9c <HAL_RCC_ClockConfig+0x268>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d909      	bls.n	8005b2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b22:	4a5d      	ldr	r2, [pc, #372]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b2a:	2380      	movs	r3, #128	@ 0x80
 8005b2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f023 0203 	bic.w	r2, r3, #3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4957      	ldr	r1, [pc, #348]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b40:	f7fe f9e8 	bl	8003f14 <HAL_GetTick>
 8005b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b48:	f7fe f9e4 	bl	8003f14 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e095      	b.n	8005c8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 020c 	and.w	r2, r3, #12
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d1eb      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d023      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b88:	4b43      	ldr	r3, [pc, #268]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4a42      	ldr	r2, [pc, #264]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005b8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005bae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb0:	4b39      	ldr	r3, [pc, #228]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4936      	ldr	r1, [pc, #216]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b80      	cmp	r3, #128	@ 0x80
 8005bc8:	d105      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bca:	4b33      	ldr	r3, [pc, #204]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	4a32      	ldr	r2, [pc, #200]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005bd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d21d      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 020f 	bic.w	r2, r3, #15
 8005bec:	4929      	ldr	r1, [pc, #164]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bf4:	f7fe f98e 	bl	8003f14 <HAL_GetTick>
 8005bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfc:	f7fe f98a 	bl	8003f14 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e03b      	b.n	8005c8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c12:	4b20      	ldr	r3, [pc, #128]	@ (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d1ed      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4917      	ldr	r1, [pc, #92]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c4a:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	490f      	ldr	r1, [pc, #60]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c5e:	f000 f825 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005c62:	4602      	mov	r2, r0
 8005c64:	4b0c      	ldr	r3, [pc, #48]	@ (8005c98 <HAL_RCC_ClockConfig+0x264>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	490c      	ldr	r1, [pc, #48]	@ (8005ca0 <HAL_RCC_ClockConfig+0x26c>)
 8005c70:	5ccb      	ldrb	r3, [r1, r3]
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca4 <HAL_RCC_ClockConfig+0x270>)
 8005c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <HAL_RCC_ClockConfig+0x274>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe f8fa 	bl	8003e7c <HAL_InitTick>
 8005c88:	4603      	mov	r3, r0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40022000 	.word	0x40022000
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	04c4b400 	.word	0x04c4b400
 8005ca0:	08009774 	.word	0x08009774
 8005ca4:	2000002c 	.word	0x2000002c
 8005ca8:	20000030 	.word	0x20000030

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8005d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	e047      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005cc4:	4b27      	ldr	r3, [pc, #156]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 030c 	and.w	r3, r3, #12
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d102      	bne.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cd0:	4b26      	ldr	r3, [pc, #152]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	e03e      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005cd6:	4b23      	ldr	r3, [pc, #140]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 030c 	and.w	r3, r3, #12
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d136      	bne.n	8005d50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ce2:	4b20      	ldr	r3, [pc, #128]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cec:	4b1d      	ldr	r3, [pc, #116]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d10c      	bne.n	8005d1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d00:	4a1a      	ldr	r2, [pc, #104]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	4a16      	ldr	r2, [pc, #88]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d0a:	68d2      	ldr	r2, [r2, #12]
 8005d0c:	0a12      	lsrs	r2, r2, #8
 8005d0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	617b      	str	r3, [r7, #20]
      break;
 8005d18:	e00c      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d1a:	4a13      	ldr	r2, [pc, #76]	@ (8005d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	4a10      	ldr	r2, [pc, #64]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d24:	68d2      	ldr	r2, [r2, #12]
 8005d26:	0a12      	lsrs	r2, r2, #8
 8005d28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]
      break;
 8005d32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d34:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	0e5b      	lsrs	r3, r3, #25
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	3301      	adds	r3, #1
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	e001      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d54:	693b      	ldr	r3, [r7, #16]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	00f42400 	.word	0x00f42400
 8005d6c:	007a1200 	.word	0x007a1200

08005d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d74:	4b03      	ldr	r3, [pc, #12]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d76:	681b      	ldr	r3, [r3, #0]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	2000002c 	.word	0x2000002c

08005d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d8c:	f7ff fff0 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4904      	ldr	r1, [pc, #16]	@ (8005db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40021000 	.word	0x40021000
 8005db0:	08009784 	.word	0x08009784

08005db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005db8:	f7ff ffda 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	4b06      	ldr	r3, [pc, #24]	@ (8005dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	0adb      	lsrs	r3, r3, #11
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	4904      	ldr	r1, [pc, #16]	@ (8005ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dca:	5ccb      	ldrb	r3, [r1, r3]
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	08009784 	.word	0x08009784

08005de0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005de6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005df0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d10c      	bne.n	8005e1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e04:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	4a14      	ldr	r2, [pc, #80]	@ (8005e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e0e:	68d2      	ldr	r2, [r2, #12]
 8005e10:	0a12      	lsrs	r2, r2, #8
 8005e12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
 8005e1a:	617b      	str	r3, [r7, #20]
    break;
 8005e1c:	e00c      	b.n	8005e38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e1e:	4a12      	ldr	r2, [pc, #72]	@ (8005e68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	4a0e      	ldr	r2, [pc, #56]	@ (8005e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e28:	68d2      	ldr	r2, [r2, #12]
 8005e2a:	0a12      	lsrs	r2, r2, #8
 8005e2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
    break;
 8005e36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e38:	4b09      	ldr	r3, [pc, #36]	@ (8005e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	0e5b      	lsrs	r3, r3, #25
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	3301      	adds	r3, #1
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e52:	687b      	ldr	r3, [r7, #4]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40021000 	.word	0x40021000
 8005e64:	007a1200 	.word	0x007a1200
 8005e68:	00f42400 	.word	0x00f42400

08005e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e74:	2300      	movs	r3, #0
 8005e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e78:	2300      	movs	r3, #0
 8005e7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8098 	beq.w	8005fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8e:	4b43      	ldr	r3, [pc, #268]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10d      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	4b40      	ldr	r3, [pc, #256]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a39      	ldr	r2, [pc, #228]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec2:	f7fe f827 	bl	8003f14 <HAL_GetTick>
 8005ec6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ec8:	e009      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eca:	f7fe f823 	bl	8003f14 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d902      	bls.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	74fb      	strb	r3, [r7, #19]
        break;
 8005edc:	e005      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ede:	4b30      	ldr	r3, [pc, #192]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0ef      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d159      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01e      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d019      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f0c:	4b23      	ldr	r3, [pc, #140]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f18:	4b20      	ldr	r3, [pc, #128]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f28:	4b1c      	ldr	r3, [pc, #112]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f38:	4a18      	ldr	r2, [pc, #96]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fd ffe3 	bl	8003f14 <HAL_GetTick>
 8005f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	e00b      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fd ffdf 	bl	8003f14 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d902      	bls.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	74fb      	strb	r3, [r7, #19]
            break;
 8005f68:	e006      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0ec      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f7e:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	4903      	ldr	r1, [pc, #12]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f94:	e008      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f96:	7cfb      	ldrb	r3, [r7, #19]
 8005f98:	74bb      	strb	r3, [r7, #18]
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	7cfb      	ldrb	r3, [r7, #19]
 8005fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa8:	7c7b      	ldrb	r3, [r7, #17]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d105      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fae:	4ba6      	ldr	r3, [pc, #664]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb2:	4aa5      	ldr	r2, [pc, #660]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fc6:	4ba0      	ldr	r3, [pc, #640]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fcc:	f023 0203 	bic.w	r2, r3, #3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	499c      	ldr	r1, [pc, #624]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fe8:	4b97      	ldr	r3, [pc, #604]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fee:	f023 020c 	bic.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	4994      	ldr	r1, [pc, #592]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800600a:	4b8f      	ldr	r3, [pc, #572]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006010:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	498b      	ldr	r1, [pc, #556]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800602c:	4b86      	ldr	r3, [pc, #536]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006032:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	4983      	ldr	r1, [pc, #524]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800604e:	4b7e      	ldr	r3, [pc, #504]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006054:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	497a      	ldr	r1, [pc, #488]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006070:	4b75      	ldr	r3, [pc, #468]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006076:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	4972      	ldr	r1, [pc, #456]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006092:	4b6d      	ldr	r3, [pc, #436]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006098:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	4969      	ldr	r1, [pc, #420]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060b4:	4b64      	ldr	r3, [pc, #400]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	4961      	ldr	r1, [pc, #388]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	4958      	ldr	r1, [pc, #352]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f8:	4b53      	ldr	r3, [pc, #332]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	4950      	ldr	r1, [pc, #320]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006118:	4b4b      	ldr	r3, [pc, #300]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a4a      	ldr	r2, [pc, #296]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006122:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006130:	4b45      	ldr	r3, [pc, #276]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006136:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	4942      	ldr	r1, [pc, #264]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800614e:	d105      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006150:	4b3d      	ldr	r3, [pc, #244]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4a3c      	ldr	r2, [pc, #240]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800615a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d015      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006168:	4b37      	ldr	r3, [pc, #220]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006176:	4934      	ldr	r1, [pc, #208]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006186:	d105      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006188:	4b2f      	ldr	r3, [pc, #188]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a2e      	ldr	r2, [pc, #184]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006192:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d015      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061a0:	4b29      	ldr	r3, [pc, #164]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	4926      	ldr	r1, [pc, #152]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061be:	d105      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c0:	4b21      	ldr	r3, [pc, #132]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4a20      	ldr	r2, [pc, #128]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d015      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	4918      	ldr	r1, [pc, #96]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f6:	d105      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f8:	4b13      	ldr	r3, [pc, #76]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4a12      	ldr	r2, [pc, #72]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006202:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d015      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006210:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006216:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621e:	490a      	ldr	r1, [pc, #40]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800622e:	d105      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a04      	ldr	r2, [pc, #16]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800623a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800623c:	7cbb      	ldrb	r3, [r7, #18]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000

0800624c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e09d      	b.n	800639a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	2b00      	cmp	r3, #0
 8006264:	d108      	bne.n	8006278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800626e:	d009      	beq.n	8006284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	61da      	str	r2, [r3, #28]
 8006276:	e005      	b.n	8006284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fd fafe 	bl	80038a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062c4:	d902      	bls.n	80062cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e002      	b.n	80062d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062da:	d007      	beq.n	80062ec <HAL_SPI_Init+0xa0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632e:	ea42 0103 	orr.w	r1, r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 0204 	and.w	r2, r3, #4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006368:	ea42 0103 	orr.w	r1, r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b088      	sub	sp, #32
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	603b      	str	r3, [r7, #0]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_SPI_Transmit+0x22>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e15f      	b.n	8006684 <HAL_SPI_Transmit+0x2e2>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063cc:	f7fd fda2 	bl	8003f14 <HAL_GetTick>
 80063d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d002      	beq.n	80063e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
 80063e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063e6:	e148      	b.n	800667a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_Transmit+0x52>
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063f8:	e13f      	b.n	800667a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2203      	movs	r2, #3
 80063fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006444:	d10f      	bne.n	8006466 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006470:	2b40      	cmp	r3, #64	@ 0x40
 8006472:	d007      	beq.n	8006484 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800648c:	d94f      	bls.n	800652e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_SPI_Transmit+0xfa>
 8006496:	8afb      	ldrh	r3, [r7, #22]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d142      	bne.n	8006522 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064c0:	e02f      	b.n	8006522 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d112      	bne.n	80064f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	1c9a      	adds	r2, r3, #2
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064f4:	e015      	b.n	8006522 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f6:	f7fd fd0d 	bl	8003f14 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d803      	bhi.n	800650e <HAL_SPI_Transmit+0x16c>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d102      	bne.n	8006514 <HAL_SPI_Transmit+0x172>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006520:	e0ab      	b.n	800667a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ca      	bne.n	80064c2 <HAL_SPI_Transmit+0x120>
 800652c:	e080      	b.n	8006630 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Transmit+0x19a>
 8006536:	8afb      	ldrh	r3, [r7, #22]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d174      	bne.n	8006626 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b01      	cmp	r3, #1
 8006544:	d912      	bls.n	800656c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654a:	881a      	ldrh	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006556:	1c9a      	adds	r2, r3, #2
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b02      	subs	r3, #2
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800656a:	e05c      	b.n	8006626 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	7812      	ldrb	r2, [r2, #0]
 8006578:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006592:	e048      	b.n	8006626 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d12b      	bne.n	80065fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d912      	bls.n	80065d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	881a      	ldrh	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065bc:	1c9a      	adds	r2, r3, #2
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b02      	subs	r3, #2
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065d0:	e029      	b.n	8006626 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065f8:	e015      	b.n	8006626 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065fa:	f7fd fc8b 	bl	8003f14 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d803      	bhi.n	8006612 <HAL_SPI_Transmit+0x270>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d102      	bne.n	8006618 <HAL_SPI_Transmit+0x276>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006624:	e029      	b.n	800667a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1b1      	bne.n	8006594 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fcf9 	bl	800702c <SPI_EndRxTxTransaction>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e003      	b.n	800667a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006682:	7ffb      	ldrb	r3, [r7, #31]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80066ac:	2302      	movs	r3, #2
 80066ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066b0:	e11a      	b.n	80068e8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ba:	d112      	bne.n	80066e2 <HAL_SPI_Receive+0x56>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10e      	bne.n	80066e2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2204      	movs	r2, #4
 80066c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f90e 	bl	80068fa <HAL_SPI_TransmitReceive>
 80066de:	4603      	mov	r3, r0
 80066e0:	e107      	b.n	80068f2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_SPI_Receive+0x64>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e100      	b.n	80068f2 <HAL_SPI_Receive+0x266>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f8:	f7fd fc0c 	bl	8003f14 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_SPI_Receive+0x7e>
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800670e:	e0eb      	b.n	80068e8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2204      	movs	r2, #4
 8006714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800675a:	d908      	bls.n	800676e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	e007      	b.n	800677e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800677c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006786:	d10f      	bne.n	80067a8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006796:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b2:	2b40      	cmp	r3, #64	@ 0x40
 80067b4:	d007      	beq.n	80067c6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067ce:	d86f      	bhi.n	80068b0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067d0:	e034      	b.n	800683c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d117      	bne.n	8006810 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f103 020c 	add.w	r2, r3, #12
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800680e:	e015      	b.n	800683c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006810:	f7fd fb80 	bl	8003f14 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d803      	bhi.n	8006828 <HAL_SPI_Receive+0x19c>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d102      	bne.n	800682e <HAL_SPI_Receive+0x1a2>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800683a:	e055      	b.n	80068e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1c4      	bne.n	80067d2 <HAL_SPI_Receive+0x146>
 8006848:	e038      	b.n	80068bc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d115      	bne.n	8006884 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	b292      	uxth	r2, r2
 8006864:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	1c9a      	adds	r2, r3, #2
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006882:	e015      	b.n	80068b0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006884:	f7fd fb46 	bl	8003f14 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d803      	bhi.n	800689c <HAL_SPI_Receive+0x210>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d102      	bne.n	80068a2 <HAL_SPI_Receive+0x216>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80068ae:	e01b      	b.n	80068e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1c6      	bne.n	800684a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fb5b 	bl	8006f7c <SPI_EndRxTransaction>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]
 80068de:	e003      	b.n	80068e8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b08a      	sub	sp, #40	@ 0x28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006908:	2301      	movs	r3, #1
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x26>
 800691c:	2302      	movs	r3, #2
 800691e:	e20a      	b.n	8006d36 <HAL_SPI_TransmitReceive+0x43c>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006928:	f7fd faf4 	bl	8003f14 <HAL_GetTick>
 800692c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006934:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800693c:	887b      	ldrh	r3, [r7, #2]
 800693e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006940:	887b      	ldrh	r3, [r7, #2]
 8006942:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006944:	7efb      	ldrb	r3, [r7, #27]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d00e      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x6e>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006950:	d106      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x66>
 800695a:	7efb      	ldrb	r3, [r7, #27]
 800695c:	2b04      	cmp	r3, #4
 800695e:	d003      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006960:	2302      	movs	r3, #2
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006966:	e1e0      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_SPI_TransmitReceive+0x80>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_SPI_TransmitReceive+0x80>
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006980:	e1d3      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b04      	cmp	r3, #4
 800698c:	d003      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2205      	movs	r2, #5
 8006992:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	887a      	ldrh	r2, [r7, #2]
 80069a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	887a      	ldrh	r2, [r7, #2]
 80069ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	887a      	ldrh	r2, [r7, #2]
 80069bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	887a      	ldrh	r2, [r7, #2]
 80069c2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069d8:	d802      	bhi.n	80069e0 <HAL_SPI_TransmitReceive+0xe6>
 80069da:	8a3b      	ldrh	r3, [r7, #16]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d908      	bls.n	80069f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80069ee:	605a      	str	r2, [r3, #4]
 80069f0:	e007      	b.n	8006a02 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a00:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0c:	2b40      	cmp	r3, #64	@ 0x40
 8006a0e:	d007      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a28:	f240 8081 	bls.w	8006b2e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x140>
 8006a34:	8a7b      	ldrh	r3, [r7, #18]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d16d      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	881a      	ldrh	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a5e:	e05a      	b.n	8006b16 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d11b      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x1ac>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d016      	beq.n	8006aa6 <HAL_SPI_TransmitReceive+0x1ac>
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d113      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a82:	881a      	ldrh	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8e:	1c9a      	adds	r2, r3, #2
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d11c      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x1f4>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d016      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aca:	b292      	uxth	r2, r2
 8006acc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	1c9a      	adds	r2, r3, #2
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aea:	2301      	movs	r3, #1
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006aee:	f7fd fa11 	bl	8003f14 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d80b      	bhi.n	8006b16 <HAL_SPI_TransmitReceive+0x21c>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d007      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006b14:	e109      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d19f      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x166>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d199      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x166>
 8006b2c:	e0e3      	b.n	8006cf6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_SPI_TransmitReceive+0x244>
 8006b36:	8a7b      	ldrh	r3, [r7, #18]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f040 80cf 	bne.w	8006cdc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d912      	bls.n	8006b6e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	881a      	ldrh	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b58:	1c9a      	adds	r2, r3, #2
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b02      	subs	r3, #2
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b6c:	e0b6      	b.n	8006cdc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	7812      	ldrb	r2, [r2, #0]
 8006b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b94:	e0a2      	b.n	8006cdc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d134      	bne.n	8006c0e <HAL_SPI_TransmitReceive+0x314>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d02f      	beq.n	8006c0e <HAL_SPI_TransmitReceive+0x314>
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d12c      	bne.n	8006c0e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d912      	bls.n	8006be4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	881a      	ldrh	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	1c9a      	adds	r2, r3, #2
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b02      	subs	r3, #2
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006be2:	e012      	b.n	8006c0a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d148      	bne.n	8006cae <HAL_SPI_TransmitReceive+0x3b4>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d042      	beq.n	8006cae <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d923      	bls.n	8006c7c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	b292      	uxth	r2, r2
 8006c40:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b02      	subs	r3, #2
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d81f      	bhi.n	8006caa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	e016      	b.n	8006caa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f103 020c 	add.w	r2, r3, #12
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c88:	7812      	ldrb	r2, [r2, #0]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006caa:	2301      	movs	r3, #1
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cae:	f7fd f931 	bl	8003f14 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d803      	bhi.n	8006cc6 <HAL_SPI_TransmitReceive+0x3cc>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d102      	bne.n	8006ccc <HAL_SPI_TransmitReceive+0x3d2>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d107      	bne.n	8006cdc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006cda:	e026      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f47f af57 	bne.w	8006b96 <HAL_SPI_TransmitReceive+0x29c>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f af50 	bne.w	8006b96 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f996 	bl	800702c <SPI_EndRxTxTransaction>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d20:	e003      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006d32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3728      	adds	r7, #40	@ 0x28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d50:	f7fd f8e0 	bl	8003f14 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d60:	f7fd f8d8 	bl	8003f14 <HAL_GetTick>
 8006d64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d66:	4b39      	ldr	r3, [pc, #228]	@ (8006e4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	015b      	lsls	r3, r3, #5
 8006d6c:	0d1b      	lsrs	r3, r3, #20
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d76:	e054      	b.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d050      	beq.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d80:	f7fd f8c8 	bl	8003f14 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d902      	bls.n	8006d96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d13d      	bne.n	8006e12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dae:	d111      	bne.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db8:	d004      	beq.n	8006dc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc2:	d107      	bne.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ddc:	d10f      	bne.n	8006dfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e017      	b.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	bf0c      	ite	eq
 8006e32:	2301      	moveq	r3, #1
 8006e34:	2300      	movne	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d19b      	bne.n	8006d78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	2000002c 	.word	0x2000002c

08006e50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	@ 0x28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e62:	f7fd f857 	bl	8003f14 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	4413      	add	r3, r2
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006e72:	f7fd f84f 	bl	8003f14 <HAL_GetTick>
 8006e76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e80:	4b3d      	ldr	r3, [pc, #244]	@ (8006f78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	00da      	lsls	r2, r3, #3
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	0d1b      	lsrs	r3, r3, #20
 8006e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e98:	e060      	b.n	8006f5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ea0:	d107      	bne.n	8006eb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d104      	bne.n	8006eb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d050      	beq.n	8006f5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eba:	f7fd f82b 	bl	8003f14 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d902      	bls.n	8006ed0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d13d      	bne.n	8006f4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ee8:	d111      	bne.n	8006f0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef2:	d004      	beq.n	8006efe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efc:	d107      	bne.n	8006f0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f16:	d10f      	bne.n	8006f38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e010      	b.n	8006f6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4013      	ands	r3, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d196      	bne.n	8006e9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3728      	adds	r7, #40	@ 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	2000002c 	.word	0x2000002c

08006f7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f90:	d111      	bne.n	8006fb6 <SPI_EndRxTransaction+0x3a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9a:	d004      	beq.n	8006fa6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa4:	d107      	bne.n	8006fb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2180      	movs	r1, #128	@ 0x80
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff febd 	bl	8006d40 <SPI_WaitFlagStateUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fd0:	f043 0220 	orr.w	r2, r3, #32
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e023      	b.n	8007024 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fe4:	d11d      	bne.n	8007022 <SPI_EndRxTransaction+0xa6>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fee:	d004      	beq.n	8006ffa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff8:	d113      	bne.n	8007022 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7ff ff22 	bl	8006e50 <SPI_WaitFifoStateUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e000      	b.n	8007024 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff ff03 	bl	8006e50 <SPI_WaitFifoStateUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007054:	f043 0220 	orr.w	r2, r3, #32
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e027      	b.n	80070b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2200      	movs	r2, #0
 8007068:	2180      	movs	r1, #128	@ 0x80
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff fe68 	bl	8006d40 <SPI_WaitFlagStateUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800707a:	f043 0220 	orr.w	r2, r3, #32
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e014      	b.n	80070b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2200      	movs	r2, #0
 800708e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fedc 	bl	8006e50 <SPI_WaitFifoStateUntilTimeout>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d007      	beq.n	80070ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a2:	f043 0220 	orr.w	r2, r3, #32
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e000      	b.n	80070b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e049      	b.n	800715e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fc fc20 	bl	8003924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f000 faa4 	bl	8007644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e049      	b.n	800720c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f841 	bl	8007214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4619      	mov	r1, r3
 80071a4:	4610      	mov	r0, r2
 80071a6:	f000 fa4d 	bl	8007644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007242:	2302      	movs	r3, #2
 8007244:	e0ff      	b.n	8007446 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b14      	cmp	r3, #20
 8007252:	f200 80f0 	bhi.w	8007436 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007256:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	080072b1 	.word	0x080072b1
 8007260:	08007437 	.word	0x08007437
 8007264:	08007437 	.word	0x08007437
 8007268:	08007437 	.word	0x08007437
 800726c:	080072f1 	.word	0x080072f1
 8007270:	08007437 	.word	0x08007437
 8007274:	08007437 	.word	0x08007437
 8007278:	08007437 	.word	0x08007437
 800727c:	08007333 	.word	0x08007333
 8007280:	08007437 	.word	0x08007437
 8007284:	08007437 	.word	0x08007437
 8007288:	08007437 	.word	0x08007437
 800728c:	08007373 	.word	0x08007373
 8007290:	08007437 	.word	0x08007437
 8007294:	08007437 	.word	0x08007437
 8007298:	08007437 	.word	0x08007437
 800729c:	080073b5 	.word	0x080073b5
 80072a0:	08007437 	.word	0x08007437
 80072a4:	08007437 	.word	0x08007437
 80072a8:	08007437 	.word	0x08007437
 80072ac:	080073f5 	.word	0x080073f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fa60 	bl	800777c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0208 	orr.w	r2, r2, #8
 80072ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0204 	bic.w	r2, r2, #4
 80072da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6999      	ldr	r1, [r3, #24]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	619a      	str	r2, [r3, #24]
      break;
 80072ee:	e0a5      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fad0 	bl	800789c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800730a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800731a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6999      	ldr	r1, [r3, #24]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	021a      	lsls	r2, r3, #8
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	619a      	str	r2, [r3, #24]
      break;
 8007330:	e084      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb39 	bl	80079b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0208 	orr.w	r2, r2, #8
 800734c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0204 	bic.w	r2, r2, #4
 800735c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69d9      	ldr	r1, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	61da      	str	r2, [r3, #28]
      break;
 8007370:	e064      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fba1 	bl	8007ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800738c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69da      	ldr	r2, [r3, #28]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800739c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69d9      	ldr	r1, [r3, #28]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	021a      	lsls	r2, r3, #8
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	61da      	str	r2, [r3, #28]
      break;
 80073b2:	e043      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fc0a 	bl	8007bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0208 	orr.w	r2, r2, #8
 80073ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0204 	bic.w	r2, r2, #4
 80073de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80073f2:	e023      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fc4e 	bl	8007c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800740e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800741e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	021a      	lsls	r2, r3, #8
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007434:	e002      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	75fb      	strb	r3, [r7, #23]
      break;
 800743a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop

08007450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIM_ConfigClockSource+0x1c>
 8007468:	2302      	movs	r3, #2
 800746a:	e0de      	b.n	800762a <HAL_TIM_ConfigClockSource+0x1da>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800748a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800748e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a63      	ldr	r2, [pc, #396]	@ (8007634 <HAL_TIM_ConfigClockSource+0x1e4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	f000 80a9 	beq.w	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 80074ac:	4a61      	ldr	r2, [pc, #388]	@ (8007634 <HAL_TIM_ConfigClockSource+0x1e4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	f200 80ae 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 80074b4:	4a60      	ldr	r2, [pc, #384]	@ (8007638 <HAL_TIM_ConfigClockSource+0x1e8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	f000 80a1 	beq.w	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 80074bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007638 <HAL_TIM_ConfigClockSource+0x1e8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	f200 80a6 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 80074c4:	4a5d      	ldr	r2, [pc, #372]	@ (800763c <HAL_TIM_ConfigClockSource+0x1ec>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	f000 8099 	beq.w	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 80074cc:	4a5b      	ldr	r2, [pc, #364]	@ (800763c <HAL_TIM_ConfigClockSource+0x1ec>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	f200 809e 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 80074d4:	4a5a      	ldr	r2, [pc, #360]	@ (8007640 <HAL_TIM_ConfigClockSource+0x1f0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	f000 8091 	beq.w	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 80074dc:	4a58      	ldr	r2, [pc, #352]	@ (8007640 <HAL_TIM_ConfigClockSource+0x1f0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	f200 8096 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 80074e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074e8:	f000 8089 	beq.w	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 80074ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074f0:	f200 808e 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f8:	d03e      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x128>
 80074fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074fe:	f200 8087 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007506:	f000 8086 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1c6>
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750e:	d87f      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007510:	2b70      	cmp	r3, #112	@ 0x70
 8007512:	d01a      	beq.n	800754a <HAL_TIM_ConfigClockSource+0xfa>
 8007514:	2b70      	cmp	r3, #112	@ 0x70
 8007516:	d87b      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007518:	2b60      	cmp	r3, #96	@ 0x60
 800751a:	d050      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x16e>
 800751c:	2b60      	cmp	r3, #96	@ 0x60
 800751e:	d877      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007520:	2b50      	cmp	r3, #80	@ 0x50
 8007522:	d03c      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x14e>
 8007524:	2b50      	cmp	r3, #80	@ 0x50
 8007526:	d873      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007528:	2b40      	cmp	r3, #64	@ 0x40
 800752a:	d058      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x18e>
 800752c:	2b40      	cmp	r3, #64	@ 0x40
 800752e:	d86f      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007530:	2b30      	cmp	r3, #48	@ 0x30
 8007532:	d064      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 8007534:	2b30      	cmp	r3, #48	@ 0x30
 8007536:	d86b      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007538:	2b20      	cmp	r3, #32
 800753a:	d060      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 800753c:	2b20      	cmp	r3, #32
 800753e:	d867      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d05c      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 8007544:	2b10      	cmp	r3, #16
 8007546:	d05a      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x1ae>
 8007548:	e062      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800755a:	f000 fc81 	bl	8007e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800756c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	609a      	str	r2, [r3, #8]
      break;
 8007576:	e04f      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007588:	f000 fc6a 	bl	8007e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800759a:	609a      	str	r2, [r3, #8]
      break;
 800759c:	e03c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075aa:	461a      	mov	r2, r3
 80075ac:	f000 fbdc 	bl	8007d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2150      	movs	r1, #80	@ 0x50
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fc35 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 80075bc:	e02c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075ca:	461a      	mov	r2, r3
 80075cc:	f000 fbfb 	bl	8007dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2160      	movs	r1, #96	@ 0x60
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fc25 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 80075dc:	e01c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ea:	461a      	mov	r2, r3
 80075ec:	f000 fbbc 	bl	8007d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2140      	movs	r1, #64	@ 0x40
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fc15 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 80075fc:	e00c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f000 fc0c 	bl	8007e26 <TIM_ITRx_SetConfig>
      break;
 800760e:	e003      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e000      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	00100070 	.word	0x00100070
 8007638:	00100040 	.word	0x00100040
 800763c:	00100030 	.word	0x00100030
 8007640:	00100020 	.word	0x00100020

08007644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a42      	ldr	r2, [pc, #264]	@ (8007760 <TIM_Base_SetConfig+0x11c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00f      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007662:	d00b      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a3f      	ldr	r2, [pc, #252]	@ (8007764 <TIM_Base_SetConfig+0x120>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d007      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a3e      	ldr	r2, [pc, #248]	@ (8007768 <TIM_Base_SetConfig+0x124>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d003      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3d      	ldr	r2, [pc, #244]	@ (800776c <TIM_Base_SetConfig+0x128>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d108      	bne.n	800768e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a33      	ldr	r2, [pc, #204]	@ (8007760 <TIM_Base_SetConfig+0x11c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d01b      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800769c:	d017      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a30      	ldr	r2, [pc, #192]	@ (8007764 <TIM_Base_SetConfig+0x120>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007768 <TIM_Base_SetConfig+0x124>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00f      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a2e      	ldr	r2, [pc, #184]	@ (800776c <TIM_Base_SetConfig+0x128>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00b      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007770 <TIM_Base_SetConfig+0x12c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007774 <TIM_Base_SetConfig+0x130>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007778 <TIM_Base_SetConfig+0x134>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d108      	bne.n	80076e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a16      	ldr	r2, [pc, #88]	@ (8007760 <TIM_Base_SetConfig+0x11c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00f      	beq.n	800772c <TIM_Base_SetConfig+0xe8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a17      	ldr	r2, [pc, #92]	@ (800776c <TIM_Base_SetConfig+0x128>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_Base_SetConfig+0xe8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a16      	ldr	r2, [pc, #88]	@ (8007770 <TIM_Base_SetConfig+0x12c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_Base_SetConfig+0xe8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a15      	ldr	r2, [pc, #84]	@ (8007774 <TIM_Base_SetConfig+0x130>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_Base_SetConfig+0xe8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a14      	ldr	r2, [pc, #80]	@ (8007778 <TIM_Base_SetConfig+0x134>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d103      	bne.n	8007734 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d105      	bne.n	8007752 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f023 0201 	bic.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]
  }
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40013400 	.word	0x40013400
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800

0800777c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	f023 0201 	bic.w	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f023 0302 	bic.w	r3, r3, #2
 80077c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007888 <TIM_OC1_SetConfig+0x10c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00f      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a2b      	ldr	r2, [pc, #172]	@ (800788c <TIM_OC1_SetConfig+0x110>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00b      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007890 <TIM_OC1_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d007      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a29      	ldr	r2, [pc, #164]	@ (8007894 <TIM_OC1_SetConfig+0x118>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_OC1_SetConfig+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a28      	ldr	r2, [pc, #160]	@ (8007898 <TIM_OC1_SetConfig+0x11c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10c      	bne.n	8007816 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f023 0308 	bic.w	r3, r3, #8
 8007802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f023 0304 	bic.w	r3, r3, #4
 8007814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <TIM_OC1_SetConfig+0x10c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00f      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a1a      	ldr	r2, [pc, #104]	@ (800788c <TIM_OC1_SetConfig+0x110>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00b      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a19      	ldr	r2, [pc, #100]	@ (8007890 <TIM_OC1_SetConfig+0x114>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d007      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a18      	ldr	r2, [pc, #96]	@ (8007894 <TIM_OC1_SetConfig+0x118>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d003      	beq.n	800783e <TIM_OC1_SetConfig+0xc2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <TIM_OC1_SetConfig+0x11c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d111      	bne.n	8007862 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800784c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	621a      	str	r2, [r3, #32]
}
 800787c:	bf00      	nop
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40014000 	.word	0x40014000
 8007894:	40014400 	.word	0x40014400
 8007898:	40014800 	.word	0x40014800

0800789c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f023 0210 	bic.w	r2, r3, #16
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 0320 	bic.w	r3, r3, #32
 80078ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a28      	ldr	r2, [pc, #160]	@ (800799c <TIM_OC2_SetConfig+0x100>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_OC2_SetConfig+0x6c>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a27      	ldr	r2, [pc, #156]	@ (80079a0 <TIM_OC2_SetConfig+0x104>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d10d      	bne.n	8007924 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800790e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a1d      	ldr	r2, [pc, #116]	@ (800799c <TIM_OC2_SetConfig+0x100>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a1c      	ldr	r2, [pc, #112]	@ (80079a0 <TIM_OC2_SetConfig+0x104>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a1b      	ldr	r2, [pc, #108]	@ (80079a4 <TIM_OC2_SetConfig+0x108>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a1a      	ldr	r2, [pc, #104]	@ (80079a8 <TIM_OC2_SetConfig+0x10c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC2_SetConfig+0xb0>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a19      	ldr	r2, [pc, #100]	@ (80079ac <TIM_OC2_SetConfig+0x110>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d113      	bne.n	8007974 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800795a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40012c00 	.word	0x40012c00
 80079a0:	40013400 	.word	0x40013400
 80079a4:	40014000 	.word	0x40014000
 80079a8:	40014400 	.word	0x40014400
 80079ac:	40014800 	.word	0x40014800

080079b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a27      	ldr	r2, [pc, #156]	@ (8007aac <TIM_OC3_SetConfig+0xfc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_OC3_SetConfig+0x6a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a26      	ldr	r2, [pc, #152]	@ (8007ab0 <TIM_OC3_SetConfig+0x100>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d10d      	bne.n	8007a36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	021b      	lsls	r3, r3, #8
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1c      	ldr	r2, [pc, #112]	@ (8007aac <TIM_OC3_SetConfig+0xfc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00f      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab0 <TIM_OC3_SetConfig+0x100>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00b      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a1a      	ldr	r2, [pc, #104]	@ (8007ab4 <TIM_OC3_SetConfig+0x104>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d007      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a19      	ldr	r2, [pc, #100]	@ (8007ab8 <TIM_OC3_SetConfig+0x108>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_OC3_SetConfig+0xae>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <TIM_OC3_SetConfig+0x10c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d113      	bne.n	8007a86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	621a      	str	r2, [r3, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40013400 	.word	0x40013400
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	031b      	lsls	r3, r3, #12
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a28      	ldr	r2, [pc, #160]	@ (8007bc0 <TIM_OC4_SetConfig+0x100>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC4_SetConfig+0x6c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a27      	ldr	r2, [pc, #156]	@ (8007bc4 <TIM_OC4_SetConfig+0x104>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d10d      	bne.n	8007b48 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	031b      	lsls	r3, r3, #12
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc0 <TIM_OC4_SetConfig+0x100>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00f      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc4 <TIM_OC4_SetConfig+0x104>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc8 <TIM_OC4_SetConfig+0x108>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d007      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a1a      	ldr	r2, [pc, #104]	@ (8007bcc <TIM_OC4_SetConfig+0x10c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_OC4_SetConfig+0xb0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a19      	ldr	r2, [pc, #100]	@ (8007bd0 <TIM_OC4_SetConfig+0x110>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d113      	bne.n	8007b98 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	019b      	lsls	r3, r3, #6
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	019b      	lsls	r3, r3, #6
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40013400 	.word	0x40013400
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a17      	ldr	r2, [pc, #92]	@ (8007c88 <TIM_OC5_SetConfig+0xb4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00f      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a16      	ldr	r2, [pc, #88]	@ (8007c8c <TIM_OC5_SetConfig+0xb8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a15      	ldr	r2, [pc, #84]	@ (8007c90 <TIM_OC5_SetConfig+0xbc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a14      	ldr	r2, [pc, #80]	@ (8007c94 <TIM_OC5_SetConfig+0xc0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a13      	ldr	r2, [pc, #76]	@ (8007c98 <TIM_OC5_SetConfig+0xc4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d109      	bne.n	8007c62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	621a      	str	r2, [r3, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40012c00 	.word	0x40012c00
 8007c8c:	40013400 	.word	0x40013400
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800

08007c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	051b      	lsls	r3, r3, #20
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	@ (8007d54 <TIM_OC6_SetConfig+0xb8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00f      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	@ (8007d58 <TIM_OC6_SetConfig+0xbc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a16      	ldr	r2, [pc, #88]	@ (8007d5c <TIM_OC6_SetConfig+0xc0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a15      	ldr	r2, [pc, #84]	@ (8007d60 <TIM_OC6_SetConfig+0xc4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a14      	ldr	r2, [pc, #80]	@ (8007d64 <TIM_OC6_SetConfig+0xc8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d109      	bne.n	8007d2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	029b      	lsls	r3, r3, #10
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40013400 	.word	0x40013400
 8007d5c:	40014000 	.word	0x40014000
 8007d60:	40014400 	.word	0x40014400
 8007d64:	40014800 	.word	0x40014800

08007d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f023 030a 	bic.w	r3, r3, #10
 8007da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b087      	sub	sp, #28
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	f023 0210 	bic.w	r2, r3, #16
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	031b      	lsls	r3, r3, #12
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f043 0307 	orr.w	r3, r3, #7
 8007e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	609a      	str	r2, [r3, #8]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	021a      	lsls	r2, r3, #8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	609a      	str	r2, [r3, #8]
}
 8007e94:	bf00      	nop
 8007e96:	371c      	adds	r7, #28
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d109      	bne.n	8007ec4 <HAL_TIMEx_PWMN_Start+0x24>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	bf14      	ite	ne
 8007ebc:	2301      	movne	r3, #1
 8007ebe:	2300      	moveq	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	e022      	b.n	8007f0a <HAL_TIMEx_PWMN_Start+0x6a>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d109      	bne.n	8007ede <HAL_TIMEx_PWMN_Start+0x3e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	bf14      	ite	ne
 8007ed6:	2301      	movne	r3, #1
 8007ed8:	2300      	moveq	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	e015      	b.n	8007f0a <HAL_TIMEx_PWMN_Start+0x6a>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d109      	bne.n	8007ef8 <HAL_TIMEx_PWMN_Start+0x58>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	bf14      	ite	ne
 8007ef0:	2301      	movne	r3, #1
 8007ef2:	2300      	moveq	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	e008      	b.n	8007f0a <HAL_TIMEx_PWMN_Start+0x6a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	bf14      	ite	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	2300      	moveq	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e069      	b.n	8007fe6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d104      	bne.n	8007f22 <HAL_TIMEx_PWMN_Start+0x82>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f20:	e013      	b.n	8007f4a <HAL_TIMEx_PWMN_Start+0xaa>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d104      	bne.n	8007f32 <HAL_TIMEx_PWMN_Start+0x92>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f30:	e00b      	b.n	8007f4a <HAL_TIMEx_PWMN_Start+0xaa>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d104      	bne.n	8007f42 <HAL_TIMEx_PWMN_Start+0xa2>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f40:	e003      	b.n	8007f4a <HAL_TIMEx_PWMN_Start+0xaa>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2204      	movs	r2, #4
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f966 	bl	8008224 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a20      	ldr	r2, [pc, #128]	@ (8007ff0 <HAL_TIMEx_PWMN_Start+0x150>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d018      	beq.n	8007fa4 <HAL_TIMEx_PWMN_Start+0x104>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f7a:	d013      	beq.n	8007fa4 <HAL_TIMEx_PWMN_Start+0x104>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff4 <HAL_TIMEx_PWMN_Start+0x154>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00e      	beq.n	8007fa4 <HAL_TIMEx_PWMN_Start+0x104>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff8 <HAL_TIMEx_PWMN_Start+0x158>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d009      	beq.n	8007fa4 <HAL_TIMEx_PWMN_Start+0x104>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a19      	ldr	r2, [pc, #100]	@ (8007ffc <HAL_TIMEx_PWMN_Start+0x15c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d004      	beq.n	8007fa4 <HAL_TIMEx_PWMN_Start+0x104>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a18      	ldr	r2, [pc, #96]	@ (8008000 <HAL_TIMEx_PWMN_Start+0x160>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d115      	bne.n	8007fd0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	4b16      	ldr	r3, [pc, #88]	@ (8008004 <HAL_TIMEx_PWMN_Start+0x164>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b06      	cmp	r3, #6
 8007fb4:	d015      	beq.n	8007fe2 <HAL_TIMEx_PWMN_Start+0x142>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fbc:	d011      	beq.n	8007fe2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fce:	e008      	b.n	8007fe2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e000      	b.n	8007fe4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40013400 	.word	0x40013400
 8008000:	40014000 	.word	0x40014000
 8008004:	00010007 	.word	0x00010007

08008008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800801c:	2302      	movs	r3, #2
 800801e:	e065      	b.n	80080ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a2c      	ldr	r2, [pc, #176]	@ (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a2b      	ldr	r2, [pc, #172]	@ (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d108      	bne.n	8008066 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800805a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800806c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d018      	beq.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008096:	d013      	beq.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a18      	ldr	r2, [pc, #96]	@ (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00e      	beq.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a17      	ldr	r2, [pc, #92]	@ (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d009      	beq.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a12      	ldr	r2, [pc, #72]	@ (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d004      	beq.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a13      	ldr	r2, [pc, #76]	@ (8008108 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d10c      	bne.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	40012c00 	.word	0x40012c00
 80080fc:	40013400 	.word	0x40013400
 8008100:	40000400 	.word	0x40000400
 8008104:	40000800 	.word	0x40000800
 8008108:	40014000 	.word	0x40014000

0800810c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008124:	2302      	movs	r3, #2
 8008126:	e073      	b.n	8008210 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	041b      	lsls	r3, r3, #16
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a19      	ldr	r2, [pc, #100]	@ (800821c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a18      	ldr	r2, [pc, #96]	@ (8008220 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d11c      	bne.n	80081fe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	051b      	lsls	r3, r3, #20
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	40012c00 	.word	0x40012c00
 8008220:	40013400 	.word	0x40013400

08008224 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	2204      	movs	r2, #4
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6a1a      	ldr	r2, [r3, #32]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	43db      	mvns	r3, r3
 8008246:	401a      	ands	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1a      	ldr	r2, [r3, #32]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	431a      	orrs	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e042      	b.n	8008306 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fb fb9e 	bl	80039d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2224      	movs	r2, #36	@ 0x24
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0201 	bic.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 faf5 	bl	80088a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f826 	bl	8008310 <UART_SetConfig>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e01b      	b.n	8008306 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0201 	orr.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fb74 	bl	80089ec <UART_CheckIdleState>
 8008304:	4603      	mov	r3, r0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008314:	b08c      	sub	sp, #48	@ 0x30
 8008316:	af00      	add	r7, sp, #0
 8008318:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	431a      	orrs	r2, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	431a      	orrs	r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	4313      	orrs	r3, r2
 8008336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4bab      	ldr	r3, [pc, #684]	@ (80085ec <UART_SetConfig+0x2dc>)
 8008340:	4013      	ands	r3, r2
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	6812      	ldr	r2, [r2, #0]
 8008346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008348:	430b      	orrs	r3, r1
 800834a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4aa0      	ldr	r2, [pc, #640]	@ (80085f0 <UART_SetConfig+0x2e0>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008378:	4313      	orrs	r3, r2
 800837a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008386:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	6812      	ldr	r2, [r2, #0]
 800838e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008390:	430b      	orrs	r3, r1
 8008392:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	f023 010f 	bic.w	r1, r3, #15
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a91      	ldr	r2, [pc, #580]	@ (80085f4 <UART_SetConfig+0x2e4>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d125      	bne.n	8008400 <UART_SetConfig+0xf0>
 80083b4:	4b90      	ldr	r3, [pc, #576]	@ (80085f8 <UART_SetConfig+0x2e8>)
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d81a      	bhi.n	80083f8 <UART_SetConfig+0xe8>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <UART_SetConfig+0xb8>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083e9 	.word	0x080083e9
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083de:	e0d6      	b.n	800858e <UART_SetConfig+0x27e>
 80083e0:	2302      	movs	r3, #2
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e0d2      	b.n	800858e <UART_SetConfig+0x27e>
 80083e8:	2304      	movs	r3, #4
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ee:	e0ce      	b.n	800858e <UART_SetConfig+0x27e>
 80083f0:	2308      	movs	r3, #8
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f6:	e0ca      	b.n	800858e <UART_SetConfig+0x27e>
 80083f8:	2310      	movs	r3, #16
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fe:	e0c6      	b.n	800858e <UART_SetConfig+0x27e>
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a7d      	ldr	r2, [pc, #500]	@ (80085fc <UART_SetConfig+0x2ec>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d138      	bne.n	800847c <UART_SetConfig+0x16c>
 800840a:	4b7b      	ldr	r3, [pc, #492]	@ (80085f8 <UART_SetConfig+0x2e8>)
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008410:	f003 030c 	and.w	r3, r3, #12
 8008414:	2b0c      	cmp	r3, #12
 8008416:	d82d      	bhi.n	8008474 <UART_SetConfig+0x164>
 8008418:	a201      	add	r2, pc, #4	@ (adr r2, 8008420 <UART_SetConfig+0x110>)
 800841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008455 	.word	0x08008455
 8008424:	08008475 	.word	0x08008475
 8008428:	08008475 	.word	0x08008475
 800842c:	08008475 	.word	0x08008475
 8008430:	08008465 	.word	0x08008465
 8008434:	08008475 	.word	0x08008475
 8008438:	08008475 	.word	0x08008475
 800843c:	08008475 	.word	0x08008475
 8008440:	0800845d 	.word	0x0800845d
 8008444:	08008475 	.word	0x08008475
 8008448:	08008475 	.word	0x08008475
 800844c:	08008475 	.word	0x08008475
 8008450:	0800846d 	.word	0x0800846d
 8008454:	2300      	movs	r3, #0
 8008456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800845a:	e098      	b.n	800858e <UART_SetConfig+0x27e>
 800845c:	2302      	movs	r3, #2
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008462:	e094      	b.n	800858e <UART_SetConfig+0x27e>
 8008464:	2304      	movs	r3, #4
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800846a:	e090      	b.n	800858e <UART_SetConfig+0x27e>
 800846c:	2308      	movs	r3, #8
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008472:	e08c      	b.n	800858e <UART_SetConfig+0x27e>
 8008474:	2310      	movs	r3, #16
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800847a:	e088      	b.n	800858e <UART_SetConfig+0x27e>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a5f      	ldr	r2, [pc, #380]	@ (8008600 <UART_SetConfig+0x2f0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d125      	bne.n	80084d2 <UART_SetConfig+0x1c2>
 8008486:	4b5c      	ldr	r3, [pc, #368]	@ (80085f8 <UART_SetConfig+0x2e8>)
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800848c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008490:	2b30      	cmp	r3, #48	@ 0x30
 8008492:	d016      	beq.n	80084c2 <UART_SetConfig+0x1b2>
 8008494:	2b30      	cmp	r3, #48	@ 0x30
 8008496:	d818      	bhi.n	80084ca <UART_SetConfig+0x1ba>
 8008498:	2b20      	cmp	r3, #32
 800849a:	d00a      	beq.n	80084b2 <UART_SetConfig+0x1a2>
 800849c:	2b20      	cmp	r3, #32
 800849e:	d814      	bhi.n	80084ca <UART_SetConfig+0x1ba>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <UART_SetConfig+0x19a>
 80084a4:	2b10      	cmp	r3, #16
 80084a6:	d008      	beq.n	80084ba <UART_SetConfig+0x1aa>
 80084a8:	e00f      	b.n	80084ca <UART_SetConfig+0x1ba>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084b0:	e06d      	b.n	800858e <UART_SetConfig+0x27e>
 80084b2:	2302      	movs	r3, #2
 80084b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084b8:	e069      	b.n	800858e <UART_SetConfig+0x27e>
 80084ba:	2304      	movs	r3, #4
 80084bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084c0:	e065      	b.n	800858e <UART_SetConfig+0x27e>
 80084c2:	2308      	movs	r3, #8
 80084c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084c8:	e061      	b.n	800858e <UART_SetConfig+0x27e>
 80084ca:	2310      	movs	r3, #16
 80084cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084d0:	e05d      	b.n	800858e <UART_SetConfig+0x27e>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4b      	ldr	r2, [pc, #300]	@ (8008604 <UART_SetConfig+0x2f4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d125      	bne.n	8008528 <UART_SetConfig+0x218>
 80084dc:	4b46      	ldr	r3, [pc, #280]	@ (80085f8 <UART_SetConfig+0x2e8>)
 80084de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80084e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80084e8:	d016      	beq.n	8008518 <UART_SetConfig+0x208>
 80084ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80084ec:	d818      	bhi.n	8008520 <UART_SetConfig+0x210>
 80084ee:	2b80      	cmp	r3, #128	@ 0x80
 80084f0:	d00a      	beq.n	8008508 <UART_SetConfig+0x1f8>
 80084f2:	2b80      	cmp	r3, #128	@ 0x80
 80084f4:	d814      	bhi.n	8008520 <UART_SetConfig+0x210>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <UART_SetConfig+0x1f0>
 80084fa:	2b40      	cmp	r3, #64	@ 0x40
 80084fc:	d008      	beq.n	8008510 <UART_SetConfig+0x200>
 80084fe:	e00f      	b.n	8008520 <UART_SetConfig+0x210>
 8008500:	2300      	movs	r3, #0
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008506:	e042      	b.n	800858e <UART_SetConfig+0x27e>
 8008508:	2302      	movs	r3, #2
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800850e:	e03e      	b.n	800858e <UART_SetConfig+0x27e>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008516:	e03a      	b.n	800858e <UART_SetConfig+0x27e>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800851e:	e036      	b.n	800858e <UART_SetConfig+0x27e>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008526:	e032      	b.n	800858e <UART_SetConfig+0x27e>
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a30      	ldr	r2, [pc, #192]	@ (80085f0 <UART_SetConfig+0x2e0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d12a      	bne.n	8008588 <UART_SetConfig+0x278>
 8008532:	4b31      	ldr	r3, [pc, #196]	@ (80085f8 <UART_SetConfig+0x2e8>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008538:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800853c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008540:	d01a      	beq.n	8008578 <UART_SetConfig+0x268>
 8008542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008546:	d81b      	bhi.n	8008580 <UART_SetConfig+0x270>
 8008548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800854c:	d00c      	beq.n	8008568 <UART_SetConfig+0x258>
 800854e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008552:	d815      	bhi.n	8008580 <UART_SetConfig+0x270>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <UART_SetConfig+0x250>
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855c:	d008      	beq.n	8008570 <UART_SetConfig+0x260>
 800855e:	e00f      	b.n	8008580 <UART_SetConfig+0x270>
 8008560:	2300      	movs	r3, #0
 8008562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008566:	e012      	b.n	800858e <UART_SetConfig+0x27e>
 8008568:	2302      	movs	r3, #2
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800856e:	e00e      	b.n	800858e <UART_SetConfig+0x27e>
 8008570:	2304      	movs	r3, #4
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008576:	e00a      	b.n	800858e <UART_SetConfig+0x27e>
 8008578:	2308      	movs	r3, #8
 800857a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800857e:	e006      	b.n	800858e <UART_SetConfig+0x27e>
 8008580:	2310      	movs	r3, #16
 8008582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008586:	e002      	b.n	800858e <UART_SetConfig+0x27e>
 8008588:	2310      	movs	r3, #16
 800858a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a17      	ldr	r2, [pc, #92]	@ (80085f0 <UART_SetConfig+0x2e0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	f040 80a8 	bne.w	80086ea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800859a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800859e:	2b08      	cmp	r3, #8
 80085a0:	d834      	bhi.n	800860c <UART_SetConfig+0x2fc>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <UART_SetConfig+0x298>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	0800860d 	.word	0x0800860d
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	0800860d 	.word	0x0800860d
 80085b8:	080085db 	.word	0x080085db
 80085bc:	0800860d 	.word	0x0800860d
 80085c0:	0800860d 	.word	0x0800860d
 80085c4:	0800860d 	.word	0x0800860d
 80085c8:	080085e3 	.word	0x080085e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085cc:	f7fd fbdc 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 80085d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085d2:	e021      	b.n	8008618 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008608 <UART_SetConfig+0x2f8>)
 80085d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085d8:	e01e      	b.n	8008618 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085da:	f7fd fb67 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 80085de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085e0:	e01a      	b.n	8008618 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085e8:	e016      	b.n	8008618 <UART_SetConfig+0x308>
 80085ea:	bf00      	nop
 80085ec:	cfff69f3 	.word	0xcfff69f3
 80085f0:	40008000 	.word	0x40008000
 80085f4:	40013800 	.word	0x40013800
 80085f8:	40021000 	.word	0x40021000
 80085fc:	40004400 	.word	0x40004400
 8008600:	40004800 	.word	0x40004800
 8008604:	40004c00 	.word	0x40004c00
 8008608:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008616:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 812a 	beq.w	8008874 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008624:	4a9e      	ldr	r2, [pc, #632]	@ (80088a0 <UART_SetConfig+0x590>)
 8008626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800862a:	461a      	mov	r2, r3
 800862c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008632:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4413      	add	r3, r2
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d305      	bcc.n	8008650 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800864a:	69ba      	ldr	r2, [r7, #24]
 800864c:	429a      	cmp	r2, r3
 800864e:	d903      	bls.n	8008658 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008656:	e10d      	b.n	8008874 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	2200      	movs	r2, #0
 800865c:	60bb      	str	r3, [r7, #8]
 800865e:	60fa      	str	r2, [r7, #12]
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008664:	4a8e      	ldr	r2, [pc, #568]	@ (80088a0 <UART_SetConfig+0x590>)
 8008666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800866a:	b29b      	uxth	r3, r3
 800866c:	2200      	movs	r2, #0
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	607a      	str	r2, [r7, #4]
 8008672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800867a:	f7f8 fa89 	bl	8000b90 <__aeabi_uldivmod>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4610      	mov	r0, r2
 8008684:	4619      	mov	r1, r3
 8008686:	f04f 0200 	mov.w	r2, #0
 800868a:	f04f 0300 	mov.w	r3, #0
 800868e:	020b      	lsls	r3, r1, #8
 8008690:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008694:	0202      	lsls	r2, r0, #8
 8008696:	6979      	ldr	r1, [r7, #20]
 8008698:	6849      	ldr	r1, [r1, #4]
 800869a:	0849      	lsrs	r1, r1, #1
 800869c:	2000      	movs	r0, #0
 800869e:	460c      	mov	r4, r1
 80086a0:	4605      	mov	r5, r0
 80086a2:	eb12 0804 	adds.w	r8, r2, r4
 80086a6:	eb43 0905 	adc.w	r9, r3, r5
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	469a      	mov	sl, r3
 80086b2:	4693      	mov	fp, r2
 80086b4:	4652      	mov	r2, sl
 80086b6:	465b      	mov	r3, fp
 80086b8:	4640      	mov	r0, r8
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f8 fa68 	bl	8000b90 <__aeabi_uldivmod>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4613      	mov	r3, r2
 80086c6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086ce:	d308      	bcc.n	80086e2 <UART_SetConfig+0x3d2>
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086d6:	d204      	bcs.n	80086e2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a3a      	ldr	r2, [r7, #32]
 80086de:	60da      	str	r2, [r3, #12]
 80086e0:	e0c8      	b.n	8008874 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086e8:	e0c4      	b.n	8008874 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086f2:	d167      	bne.n	80087c4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80086f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d828      	bhi.n	800874e <UART_SetConfig+0x43e>
 80086fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <UART_SetConfig+0x3f4>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008729 	.word	0x08008729
 8008708:	08008731 	.word	0x08008731
 800870c:	08008739 	.word	0x08008739
 8008710:	0800874f 	.word	0x0800874f
 8008714:	0800873f 	.word	0x0800873f
 8008718:	0800874f 	.word	0x0800874f
 800871c:	0800874f 	.word	0x0800874f
 8008720:	0800874f 	.word	0x0800874f
 8008724:	08008747 	.word	0x08008747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008728:	f7fd fb2e 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 800872c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800872e:	e014      	b.n	800875a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008730:	f7fd fb40 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008736:	e010      	b.n	800875a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008738:	4b5a      	ldr	r3, [pc, #360]	@ (80088a4 <UART_SetConfig+0x594>)
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800873c:	e00d      	b.n	800875a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800873e:	f7fd fab5 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8008742:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008744:	e009      	b.n	800875a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800874a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800874c:	e005      	b.n	800875a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8089 	beq.w	8008874 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008766:	4a4e      	ldr	r2, [pc, #312]	@ (80088a0 <UART_SetConfig+0x590>)
 8008768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800876c:	461a      	mov	r2, r3
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	fbb3 f3f2 	udiv	r3, r3, r2
 8008774:	005a      	lsls	r2, r3, #1
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	441a      	add	r2, r3
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	2b0f      	cmp	r3, #15
 800878c:	d916      	bls.n	80087bc <UART_SetConfig+0x4ac>
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008794:	d212      	bcs.n	80087bc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	b29b      	uxth	r3, r3
 800879a:	f023 030f 	bic.w	r3, r3, #15
 800879e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	8bfb      	ldrh	r3, [r7, #30]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	8bfa      	ldrh	r2, [r7, #30]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	e05b      	b.n	8008874 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087c2:	e057      	b.n	8008874 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d828      	bhi.n	800881e <UART_SetConfig+0x50e>
 80087cc:	a201      	add	r2, pc, #4	@ (adr r2, 80087d4 <UART_SetConfig+0x4c4>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087f9 	.word	0x080087f9
 80087d8:	08008801 	.word	0x08008801
 80087dc:	08008809 	.word	0x08008809
 80087e0:	0800881f 	.word	0x0800881f
 80087e4:	0800880f 	.word	0x0800880f
 80087e8:	0800881f 	.word	0x0800881f
 80087ec:	0800881f 	.word	0x0800881f
 80087f0:	0800881f 	.word	0x0800881f
 80087f4:	08008817 	.word	0x08008817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f8:	f7fd fac6 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 80087fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087fe:	e014      	b.n	800882a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008800:	f7fd fad8 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008804:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008806:	e010      	b.n	800882a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008808:	4b26      	ldr	r3, [pc, #152]	@ (80088a4 <UART_SetConfig+0x594>)
 800880a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800880c:	e00d      	b.n	800882a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880e:	f7fd fa4d 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8008812:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008814:	e009      	b.n	800882a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800881a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800881c:	e005      	b.n	800882a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008828:	bf00      	nop
    }

    if (pclk != 0U)
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	2b00      	cmp	r3, #0
 800882e:	d021      	beq.n	8008874 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008834:	4a1a      	ldr	r2, [pc, #104]	@ (80088a0 <UART_SetConfig+0x590>)
 8008836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800883a:	461a      	mov	r2, r3
 800883c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	085b      	lsrs	r3, r3, #1
 8008848:	441a      	add	r2, r3
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008852:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	2b0f      	cmp	r3, #15
 8008858:	d909      	bls.n	800886e <UART_SetConfig+0x55e>
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008860:	d205      	bcs.n	800886e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	b29a      	uxth	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60da      	str	r2, [r3, #12]
 800886c:	e002      	b.n	8008874 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2201      	movs	r2, #1
 8008878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2201      	movs	r2, #1
 8008880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2200      	movs	r2, #0
 8008888:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2200      	movs	r2, #0
 800888e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008890:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008894:	4618      	mov	r0, r3
 8008896:	3730      	adds	r7, #48	@ 0x30
 8008898:	46bd      	mov	sp, r7
 800889a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800889e:	bf00      	nop
 80088a0:	0800979c 	.word	0x0800979c
 80088a4:	00f42400 	.word	0x00f42400

080088a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01a      	beq.n	80089be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089a6:	d10a      	bne.n	80089be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	605a      	str	r2, [r3, #4]
  }
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b098      	sub	sp, #96	@ 0x60
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089fc:	f7fb fa8a 	bl	8003f14 <HAL_GetTick>
 8008a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d12f      	bne.n	8008a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f88e 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d022      	beq.n	8008a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e063      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d149      	bne.n	8008b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a86:	2200      	movs	r2, #0
 8008a88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f857 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03c      	beq.n	8008b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e6      	bne.n	8008a98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aea:	61fa      	str	r2, [r7, #28]
 8008aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	69b9      	ldr	r1, [r7, #24]
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	617b      	str	r3, [r7, #20]
   return(result);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e012      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3758      	adds	r7, #88	@ 0x58
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b50:	e04f      	b.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d04b      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b5a:	f7fb f9db 	bl	8003f14 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d302      	bcc.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e04e      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d037      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b80      	cmp	r3, #128	@ 0x80
 8008b86:	d034      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b40      	cmp	r3, #64	@ 0x40
 8008b8c:	d031      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d110      	bne.n	8008bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f838 	bl	8008c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2208      	movs	r2, #8
 8008bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e029      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bcc:	d111      	bne.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f81e 	bl	8008c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e00f      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	bf0c      	ite	eq
 8008c02:	2301      	moveq	r3, #1
 8008c04:	2300      	movne	r3, #0
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d0a0      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b095      	sub	sp, #84	@ 0x54
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2a:	e853 3f00 	ldrex	r3, [r3]
 8008c2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c48:	e841 2300 	strex	r3, r2, [r1]
 8008c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e6      	bne.n	8008c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c6a:	f023 0301 	bic.w	r3, r3, #1
 8008c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3308      	adds	r3, #8
 8008c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e3      	bne.n	8008c54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d118      	bne.n	8008cc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f023 0310 	bic.w	r3, r3, #16
 8008ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb2:	61bb      	str	r3, [r7, #24]
 8008cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6979      	ldr	r1, [r7, #20]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e6      	bne.n	8008c94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cda:	bf00      	nop
 8008cdc:	3754      	adds	r7, #84	@ 0x54
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_UARTEx_DisableFifoMode+0x16>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e027      	b.n	8008d4c <HAL_UARTEx_DisableFifoMode+0x66>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2224      	movs	r2, #36	@ 0x24
 8008d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0201 	bic.w	r2, r2, #1
 8008d22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e02d      	b.n	8008dcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2224      	movs	r2, #36	@ 0x24
 8008d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0201 	bic.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f84f 	bl	8008e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e02d      	b.n	8008e48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2224      	movs	r2, #36	@ 0x24
 8008df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0201 	bic.w	r2, r2, #1
 8008e12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f811 	bl	8008e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d108      	bne.n	8008e72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e70:	e031      	b.n	8008ed6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e72:	2308      	movs	r3, #8
 8008e74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e76:	2308      	movs	r3, #8
 8008e78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	0e5b      	lsrs	r3, r3, #25
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	0f5b      	lsrs	r3, r3, #29
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	7b3a      	ldrb	r2, [r7, #12]
 8008e9e:	4911      	ldr	r1, [pc, #68]	@ (8008ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ea0:	5c8a      	ldrb	r2, [r1, r2]
 8008ea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ea6:	7b3a      	ldrb	r2, [r7, #12]
 8008ea8:	490f      	ldr	r1, [pc, #60]	@ (8008ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8008eaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	7b7a      	ldrb	r2, [r7, #13]
 8008ebc:	4909      	ldr	r1, [pc, #36]	@ (8008ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ebe:	5c8a      	ldrb	r2, [r1, r2]
 8008ec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ec4:	7b7a      	ldrb	r2, [r7, #13]
 8008ec6:	4908      	ldr	r1, [pc, #32]	@ (8008ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	080097b4 	.word	0x080097b4
 8008ee8:	080097bc 	.word	0x080097bc

08008eec <memset>:
 8008eec:	4402      	add	r2, r0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d100      	bne.n	8008ef6 <memset+0xa>
 8008ef4:	4770      	bx	lr
 8008ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8008efa:	e7f9      	b.n	8008ef0 <memset+0x4>

08008efc <__errno>:
 8008efc:	4b01      	ldr	r3, [pc, #4]	@ (8008f04 <__errno+0x8>)
 8008efe:	6818      	ldr	r0, [r3, #0]
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20000038 	.word	0x20000038

08008f08 <__libc_init_array>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f40 <__libc_init_array+0x38>)
 8008f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f44 <__libc_init_array+0x3c>)
 8008f0e:	1b64      	subs	r4, r4, r5
 8008f10:	10a4      	asrs	r4, r4, #2
 8008f12:	2600      	movs	r6, #0
 8008f14:	42a6      	cmp	r6, r4
 8008f16:	d109      	bne.n	8008f2c <__libc_init_array+0x24>
 8008f18:	4d0b      	ldr	r5, [pc, #44]	@ (8008f48 <__libc_init_array+0x40>)
 8008f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f4c <__libc_init_array+0x44>)
 8008f1c:	f000 fa16 	bl	800934c <_init>
 8008f20:	1b64      	subs	r4, r4, r5
 8008f22:	10a4      	asrs	r4, r4, #2
 8008f24:	2600      	movs	r6, #0
 8008f26:	42a6      	cmp	r6, r4
 8008f28:	d105      	bne.n	8008f36 <__libc_init_array+0x2e>
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f30:	4798      	blx	r3
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7ee      	b.n	8008f14 <__libc_init_array+0xc>
 8008f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3a:	4798      	blx	r3
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	e7f2      	b.n	8008f26 <__libc_init_array+0x1e>
 8008f40:	080097d0 	.word	0x080097d0
 8008f44:	080097d0 	.word	0x080097d0
 8008f48:	080097d0 	.word	0x080097d0
 8008f4c:	080097d4 	.word	0x080097d4

08008f50 <log>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	ed2d 8b02 	vpush	{d8}
 8008f56:	ec55 4b10 	vmov	r4, r5, d0
 8008f5a:	f000 f841 	bl	8008fe0 <__ieee754_log>
 8008f5e:	4622      	mov	r2, r4
 8008f60:	462b      	mov	r3, r5
 8008f62:	4620      	mov	r0, r4
 8008f64:	4629      	mov	r1, r5
 8008f66:	eeb0 8a40 	vmov.f32	s16, s0
 8008f6a:	eef0 8a60 	vmov.f32	s17, s1
 8008f6e:	f7f7 fda9 	bl	8000ac4 <__aeabi_dcmpun>
 8008f72:	b998      	cbnz	r0, 8008f9c <log+0x4c>
 8008f74:	2200      	movs	r2, #0
 8008f76:	2300      	movs	r3, #0
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 fd98 	bl	8000ab0 <__aeabi_dcmpgt>
 8008f80:	b960      	cbnz	r0, 8008f9c <log+0x4c>
 8008f82:	2200      	movs	r2, #0
 8008f84:	2300      	movs	r3, #0
 8008f86:	4620      	mov	r0, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7f7 fd69 	bl	8000a60 <__aeabi_dcmpeq>
 8008f8e:	b160      	cbz	r0, 8008faa <log+0x5a>
 8008f90:	f7ff ffb4 	bl	8008efc <__errno>
 8008f94:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8008fc0 <log+0x70>
 8008f98:	2322      	movs	r3, #34	@ 0x22
 8008f9a:	6003      	str	r3, [r0, #0]
 8008f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008fa0:	eef0 0a68 	vmov.f32	s1, s17
 8008fa4:	ecbd 8b02 	vpop	{d8}
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	f7ff ffa7 	bl	8008efc <__errno>
 8008fae:	ecbd 8b02 	vpop	{d8}
 8008fb2:	2321      	movs	r3, #33	@ 0x21
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fba:	4803      	ldr	r0, [pc, #12]	@ (8008fc8 <log+0x78>)
 8008fbc:	f000 b808 	b.w	8008fd0 <nan>
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	fff00000 	.word	0xfff00000
 8008fc8:	080097c4 	.word	0x080097c4
 8008fcc:	00000000 	.word	0x00000000

08008fd0 <nan>:
 8008fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008fd8 <nan+0x8>
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	7ff80000 	.word	0x7ff80000

08008fe0 <__ieee754_log>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	ec51 0b10 	vmov	r0, r1, d0
 8008fe8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008fec:	b087      	sub	sp, #28
 8008fee:	460d      	mov	r5, r1
 8008ff0:	da26      	bge.n	8009040 <__ieee754_log+0x60>
 8008ff2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ff6:	4303      	orrs	r3, r0
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	d10a      	bne.n	8009012 <__ieee754_log+0x32>
 8008ffc:	49ce      	ldr	r1, [pc, #824]	@ (8009338 <__ieee754_log+0x358>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	2300      	movs	r3, #0
 8009002:	2000      	movs	r0, #0
 8009004:	f7f7 fbee 	bl	80007e4 <__aeabi_ddiv>
 8009008:	ec41 0b10 	vmov	d0, r0, r1
 800900c:	b007      	add	sp, #28
 800900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009012:	2900      	cmp	r1, #0
 8009014:	da05      	bge.n	8009022 <__ieee754_log+0x42>
 8009016:	460b      	mov	r3, r1
 8009018:	f7f7 f902 	bl	8000220 <__aeabi_dsub>
 800901c:	2200      	movs	r2, #0
 800901e:	2300      	movs	r3, #0
 8009020:	e7f0      	b.n	8009004 <__ieee754_log+0x24>
 8009022:	4bc6      	ldr	r3, [pc, #792]	@ (800933c <__ieee754_log+0x35c>)
 8009024:	2200      	movs	r2, #0
 8009026:	f7f7 fab3 	bl	8000590 <__aeabi_dmul>
 800902a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800902e:	460d      	mov	r5, r1
 8009030:	4ac3      	ldr	r2, [pc, #780]	@ (8009340 <__ieee754_log+0x360>)
 8009032:	4295      	cmp	r5, r2
 8009034:	dd06      	ble.n	8009044 <__ieee754_log+0x64>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	f7f7 f8f3 	bl	8000224 <__adddf3>
 800903e:	e7e3      	b.n	8009008 <__ieee754_log+0x28>
 8009040:	2300      	movs	r3, #0
 8009042:	e7f5      	b.n	8009030 <__ieee754_log+0x50>
 8009044:	152c      	asrs	r4, r5, #20
 8009046:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800904a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800904e:	441c      	add	r4, r3
 8009050:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009054:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800905c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009060:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009064:	ea42 0105 	orr.w	r1, r2, r5
 8009068:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800906c:	2200      	movs	r2, #0
 800906e:	4bb5      	ldr	r3, [pc, #724]	@ (8009344 <__ieee754_log+0x364>)
 8009070:	f7f7 f8d6 	bl	8000220 <__aeabi_dsub>
 8009074:	1cab      	adds	r3, r5, #2
 8009076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800907a:	2b02      	cmp	r3, #2
 800907c:	4682      	mov	sl, r0
 800907e:	468b      	mov	fp, r1
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	dc53      	bgt.n	800912e <__ieee754_log+0x14e>
 8009086:	2300      	movs	r3, #0
 8009088:	f7f7 fcea 	bl	8000a60 <__aeabi_dcmpeq>
 800908c:	b1d0      	cbz	r0, 80090c4 <__ieee754_log+0xe4>
 800908e:	2c00      	cmp	r4, #0
 8009090:	f000 8120 	beq.w	80092d4 <__ieee754_log+0x2f4>
 8009094:	4620      	mov	r0, r4
 8009096:	f7f7 fa11 	bl	80004bc <__aeabi_i2d>
 800909a:	a391      	add	r3, pc, #580	@ (adr r3, 80092e0 <__ieee754_log+0x300>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	4606      	mov	r6, r0
 80090a2:	460f      	mov	r7, r1
 80090a4:	f7f7 fa74 	bl	8000590 <__aeabi_dmul>
 80090a8:	a38f      	add	r3, pc, #572	@ (adr r3, 80092e8 <__ieee754_log+0x308>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	4630      	mov	r0, r6
 80090b4:	4639      	mov	r1, r7
 80090b6:	f7f7 fa6b 	bl	8000590 <__aeabi_dmul>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	e7ba      	b.n	800903a <__ieee754_log+0x5a>
 80090c4:	a38a      	add	r3, pc, #552	@ (adr r3, 80092f0 <__ieee754_log+0x310>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	4650      	mov	r0, sl
 80090cc:	4659      	mov	r1, fp
 80090ce:	f7f7 fa5f 	bl	8000590 <__aeabi_dmul>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	2000      	movs	r0, #0
 80090d8:	499b      	ldr	r1, [pc, #620]	@ (8009348 <__ieee754_log+0x368>)
 80090da:	f7f7 f8a1 	bl	8000220 <__aeabi_dsub>
 80090de:	4652      	mov	r2, sl
 80090e0:	4606      	mov	r6, r0
 80090e2:	460f      	mov	r7, r1
 80090e4:	465b      	mov	r3, fp
 80090e6:	4650      	mov	r0, sl
 80090e8:	4659      	mov	r1, fp
 80090ea:	f7f7 fa51 	bl	8000590 <__aeabi_dmul>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4630      	mov	r0, r6
 80090f4:	4639      	mov	r1, r7
 80090f6:	f7f7 fa4b 	bl	8000590 <__aeabi_dmul>
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	b914      	cbnz	r4, 8009106 <__ieee754_log+0x126>
 8009100:	4632      	mov	r2, r6
 8009102:	463b      	mov	r3, r7
 8009104:	e0a0      	b.n	8009248 <__ieee754_log+0x268>
 8009106:	4620      	mov	r0, r4
 8009108:	f7f7 f9d8 	bl	80004bc <__aeabi_i2d>
 800910c:	a374      	add	r3, pc, #464	@ (adr r3, 80092e0 <__ieee754_log+0x300>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	4680      	mov	r8, r0
 8009114:	4689      	mov	r9, r1
 8009116:	f7f7 fa3b 	bl	8000590 <__aeabi_dmul>
 800911a:	a373      	add	r3, pc, #460	@ (adr r3, 80092e8 <__ieee754_log+0x308>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	4604      	mov	r4, r0
 8009122:	460d      	mov	r5, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 fa32 	bl	8000590 <__aeabi_dmul>
 800912c:	e0a5      	b.n	800927a <__ieee754_log+0x29a>
 800912e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009132:	f7f7 f877 	bl	8000224 <__adddf3>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4650      	mov	r0, sl
 800913c:	4659      	mov	r1, fp
 800913e:	f7f7 fb51 	bl	80007e4 <__aeabi_ddiv>
 8009142:	e9cd 0100 	strd	r0, r1, [sp]
 8009146:	4620      	mov	r0, r4
 8009148:	f7f7 f9b8 	bl	80004bc <__aeabi_i2d>
 800914c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009154:	4610      	mov	r0, r2
 8009156:	4619      	mov	r1, r3
 8009158:	f7f7 fa1a 	bl	8000590 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009164:	f7f7 fa14 	bl	8000590 <__aeabi_dmul>
 8009168:	a363      	add	r3, pc, #396	@ (adr r3, 80092f8 <__ieee754_log+0x318>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	4680      	mov	r8, r0
 8009170:	4689      	mov	r9, r1
 8009172:	f7f7 fa0d 	bl	8000590 <__aeabi_dmul>
 8009176:	a362      	add	r3, pc, #392	@ (adr r3, 8009300 <__ieee754_log+0x320>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f7 f852 	bl	8000224 <__adddf3>
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	f7f7 fa04 	bl	8000590 <__aeabi_dmul>
 8009188:	a35f      	add	r3, pc, #380	@ (adr r3, 8009308 <__ieee754_log+0x328>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 f849 	bl	8000224 <__adddf3>
 8009192:	4642      	mov	r2, r8
 8009194:	464b      	mov	r3, r9
 8009196:	f7f7 f9fb 	bl	8000590 <__aeabi_dmul>
 800919a:	a35d      	add	r3, pc, #372	@ (adr r3, 8009310 <__ieee754_log+0x330>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f7 f840 	bl	8000224 <__adddf3>
 80091a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091a8:	f7f7 f9f2 	bl	8000590 <__aeabi_dmul>
 80091ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8009318 <__ieee754_log+0x338>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091b6:	4640      	mov	r0, r8
 80091b8:	4649      	mov	r1, r9
 80091ba:	f7f7 f9e9 	bl	8000590 <__aeabi_dmul>
 80091be:	a358      	add	r3, pc, #352	@ (adr r3, 8009320 <__ieee754_log+0x340>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 f82e 	bl	8000224 <__adddf3>
 80091c8:	4642      	mov	r2, r8
 80091ca:	464b      	mov	r3, r9
 80091cc:	f7f7 f9e0 	bl	8000590 <__aeabi_dmul>
 80091d0:	a355      	add	r3, pc, #340	@ (adr r3, 8009328 <__ieee754_log+0x348>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f7 f825 	bl	8000224 <__adddf3>
 80091da:	4642      	mov	r2, r8
 80091dc:	464b      	mov	r3, r9
 80091de:	f7f7 f9d7 	bl	8000590 <__aeabi_dmul>
 80091e2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80091ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f2:	f7f7 f817 	bl	8000224 <__adddf3>
 80091f6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80091fa:	3551      	adds	r5, #81	@ 0x51
 80091fc:	4335      	orrs	r5, r6
 80091fe:	2d00      	cmp	r5, #0
 8009200:	4680      	mov	r8, r0
 8009202:	4689      	mov	r9, r1
 8009204:	dd48      	ble.n	8009298 <__ieee754_log+0x2b8>
 8009206:	4b50      	ldr	r3, [pc, #320]	@ (8009348 <__ieee754_log+0x368>)
 8009208:	2200      	movs	r2, #0
 800920a:	4650      	mov	r0, sl
 800920c:	4659      	mov	r1, fp
 800920e:	f7f7 f9bf 	bl	8000590 <__aeabi_dmul>
 8009212:	4652      	mov	r2, sl
 8009214:	465b      	mov	r3, fp
 8009216:	f7f7 f9bb 	bl	8000590 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	4640      	mov	r0, r8
 8009224:	4649      	mov	r1, r9
 8009226:	f7f6 fffd 	bl	8000224 <__adddf3>
 800922a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800922e:	f7f7 f9af 	bl	8000590 <__aeabi_dmul>
 8009232:	4680      	mov	r8, r0
 8009234:	4689      	mov	r9, r1
 8009236:	b964      	cbnz	r4, 8009252 <__ieee754_log+0x272>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f7f6 ffee 	bl	8000220 <__aeabi_dsub>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4650      	mov	r0, sl
 800924a:	4659      	mov	r1, fp
 800924c:	f7f6 ffe8 	bl	8000220 <__aeabi_dsub>
 8009250:	e6da      	b.n	8009008 <__ieee754_log+0x28>
 8009252:	a323      	add	r3, pc, #140	@ (adr r3, 80092e0 <__ieee754_log+0x300>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925c:	f7f7 f998 	bl	8000590 <__aeabi_dmul>
 8009260:	a321      	add	r3, pc, #132	@ (adr r3, 80092e8 <__ieee754_log+0x308>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	4604      	mov	r4, r0
 8009268:	460d      	mov	r5, r1
 800926a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800926e:	f7f7 f98f 	bl	8000590 <__aeabi_dmul>
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	f7f6 ffd5 	bl	8000224 <__adddf3>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4630      	mov	r0, r6
 8009280:	4639      	mov	r1, r7
 8009282:	f7f6 ffcd 	bl	8000220 <__aeabi_dsub>
 8009286:	4652      	mov	r2, sl
 8009288:	465b      	mov	r3, fp
 800928a:	f7f6 ffc9 	bl	8000220 <__aeabi_dsub>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4620      	mov	r0, r4
 8009294:	4629      	mov	r1, r5
 8009296:	e7d9      	b.n	800924c <__ieee754_log+0x26c>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4650      	mov	r0, sl
 800929e:	4659      	mov	r1, fp
 80092a0:	f7f6 ffbe 	bl	8000220 <__aeabi_dsub>
 80092a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092a8:	f7f7 f972 	bl	8000590 <__aeabi_dmul>
 80092ac:	4606      	mov	r6, r0
 80092ae:	460f      	mov	r7, r1
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	f43f af25 	beq.w	8009100 <__ieee754_log+0x120>
 80092b6:	a30a      	add	r3, pc, #40	@ (adr r3, 80092e0 <__ieee754_log+0x300>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c0:	f7f7 f966 	bl	8000590 <__aeabi_dmul>
 80092c4:	a308      	add	r3, pc, #32	@ (adr r3, 80092e8 <__ieee754_log+0x308>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092d2:	e729      	b.n	8009128 <__ieee754_log+0x148>
 80092d4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009330 <__ieee754_log+0x350>
 80092d8:	e698      	b.n	800900c <__ieee754_log+0x2c>
 80092da:	bf00      	nop
 80092dc:	f3af 8000 	nop.w
 80092e0:	fee00000 	.word	0xfee00000
 80092e4:	3fe62e42 	.word	0x3fe62e42
 80092e8:	35793c76 	.word	0x35793c76
 80092ec:	3dea39ef 	.word	0x3dea39ef
 80092f0:	55555555 	.word	0x55555555
 80092f4:	3fd55555 	.word	0x3fd55555
 80092f8:	df3e5244 	.word	0xdf3e5244
 80092fc:	3fc2f112 	.word	0x3fc2f112
 8009300:	96cb03de 	.word	0x96cb03de
 8009304:	3fc74664 	.word	0x3fc74664
 8009308:	94229359 	.word	0x94229359
 800930c:	3fd24924 	.word	0x3fd24924
 8009310:	55555593 	.word	0x55555593
 8009314:	3fe55555 	.word	0x3fe55555
 8009318:	d078c69f 	.word	0xd078c69f
 800931c:	3fc39a09 	.word	0x3fc39a09
 8009320:	1d8e78af 	.word	0x1d8e78af
 8009324:	3fcc71c5 	.word	0x3fcc71c5
 8009328:	9997fa04 	.word	0x9997fa04
 800932c:	3fd99999 	.word	0x3fd99999
	...
 8009338:	c3500000 	.word	0xc3500000
 800933c:	43500000 	.word	0x43500000
 8009340:	7fefffff 	.word	0x7fefffff
 8009344:	3ff00000 	.word	0x3ff00000
 8009348:	3fe00000 	.word	0x3fe00000

0800934c <_init>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr

08009358 <_fini>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr
